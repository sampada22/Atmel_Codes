
Compass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004d  00800060  00800060  000009b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126d  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b16  00000000  00000000  00001d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000851  00000000  00000000  000028b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00003104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072f  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005eb  00000000  00000000  00003a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004072  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_13>
  38:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_14>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	08 4a       	sbci	r16, 0xA8	; 168
  56:	d7 3b       	cpi	r29, 0xB7	; 183
  58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
  5a:	01 6e       	ori	r16, 0xE1	; 225
  5c:	84 bc       	out	0x24, r8	; 36
  5e:	bf fd       	.word	0xfdbf	; ????
  60:	c1 2f       	mov	r28, r17
  62:	3d 6c       	ori	r19, 0xCD	; 205
  64:	74 31       	cpi	r23, 0x14	; 20
  66:	9a bd       	out	0x2a, r25	; 42
  68:	56 83       	std	Z+6, r21	; 0x06
  6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
  6c:	3d 00       	.word	0x003d	; ????
  6e:	c7 7f       	andi	r28, 0xF7	; 247
  70:	11 be       	out	0x31, r1	; 49
  72:	d9 e4       	ldi	r29, 0x49	; 73
  74:	bb 4c       	sbci	r27, 0xCB	; 203
  76:	3e 91       	ld	r19, -X
  78:	6b aa       	std	Y+51, r6	; 0x33
  7a:	aa be       	out	0x3a, r10	; 58
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	3f 00       	.word	0x003f	; ????

00000082 <__ctors_start>:
  82:	24 01       	movw	r4, r8

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf e5       	ldi	r28, 0x5F	; 95
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_clear_bss>:
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	a0 e6       	ldi	r26, 0x60	; 96
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
  98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
  9a:	ad 3a       	cpi	r26, 0xAD	; 173
  9c:	b2 07       	cpc	r27, r18
  9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>

000000a0 <__do_global_ctors>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	c2 e4       	ldi	r28, 0x42	; 66
  a4:	d0 e0       	ldi	r29, 0x00	; 0
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_global_ctors+0x10>
  a8:	21 97       	sbiw	r28, 0x01	; 1
  aa:	fe 01       	movw	r30, r28
  ac:	0e 94 97 04 	call	0x92e	; 0x92e <__tablejump2__>
  b0:	c1 34       	cpi	r28, 0x41	; 65
  b2:	d1 07       	cpc	r29, r17
  b4:	c9 f7       	brne	.-14     	; 0xa8 <__do_global_ctors+0x8>
  b6:	0e 94 0b 01 	call	0x216	; 0x216 <main>
  ba:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <_ZN7CompassC1Ev>:
#define X_OFFSET -8.5
#define Y_OFFSET -85



Compass::Compass(void)
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ec 01       	movw	r28, r24
{
	i2c_init();
  c8:	0e 94 29 01 	call	0x252	; 0x252 <_Z8i2c_initv>
	raw_x=0;
  cc:	19 82       	std	Y+1, r1	; 0x01
  ce:	18 82       	st	Y, r1
	raw_y=0;
  d0:	1b 82       	std	Y+3, r1	; 0x03
  d2:	1a 82       	std	Y+2, r1	; 0x02
	raw_z=0;
  d4:	1d 82       	std	Y+5, r1	; 0x05
  d6:	1c 82       	std	Y+4, r1	; 0x04
	Angle = 0;
  d8:	1f 82       	std	Y+7, r1	; 0x07
  da:	1e 82       	std	Y+6, r1	; 0x06
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <_ZN7Compass12init_compassEv>:

void Compass::init_compass(void){

	i2c_start(WRITE_ADDRESS );
  e2:	8c e3       	ldi	r24, 0x3C	; 60
  e4:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z9i2c_starth>
	i2c_write(0x00);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z9i2c_writeh>
	i2c_write(0x70);
  ee:	80 e7       	ldi	r24, 0x70	; 112
  f0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z9i2c_writeh>
	i2c_stop();
  f4:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z8i2c_stopv>

	i2c_start(WRITE_ADDRESS );
  f8:	8c e3       	ldi	r24, 0x3C	; 60
  fa:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z9i2c_starth>
	i2c_write(0x01);
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z9i2c_writeh>
	i2c_write(0xA0);
 104:	80 ea       	ldi	r24, 0xA0	; 160
 106:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z9i2c_writeh>
	i2c_stop();
 10a:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z8i2c_stopv>

	i2c_start(WRITE_ADDRESS );
 10e:	8c e3       	ldi	r24, 0x3C	; 60
 110:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z9i2c_starth>
	i2c_write(0x02);
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z9i2c_writeh>
	i2c_write(0x00);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z9i2c_writeh>
	i2c_stop();
 120:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z8i2c_stopv>
 124:	08 95       	ret

00000126 <_ZN7Compass12read_CompassEv>:
}

void Compass::read_Compass(void){
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24

	i2c_start(WRITE_ADDRESS );
 134:	8c e3       	ldi	r24, 0x3C	; 60
 136:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z9i2c_starth>
	i2c_write(0x03);
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z9i2c_writeh>
	i2c_stop();
 140:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z8i2c_stopv>

	i2c_rep_start(READ_ADDRESS );
 144:	8d e3       	ldi	r24, 0x3D	; 61
 146:	0e 94 4b 01 	call	0x296	; 0x296 <_Z13i2c_rep_starth>

	raw_x = ((uint8_t)i2c_readAck())<<8;
 14a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11i2c_readAckv>
 14e:	18 82       	st	Y, r1
 150:	89 83       	std	Y+1, r24	; 0x01
	raw_x |= i2c_readAck();
 152:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11i2c_readAckv>
 156:	68 81       	ld	r22, Y
 158:	79 81       	ldd	r23, Y+1	; 0x01
 15a:	68 2b       	or	r22, r24
	raw_x-=	 X_OFFSET;
 15c:	07 2e       	mov	r0, r23
 15e:	00 0c       	add	r0, r0
 160:	88 0b       	sbc	r24, r24
 162:	99 0b       	sbc	r25, r25
 164:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__floatsisf>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	48 e0       	ldi	r20, 0x08	; 8
 16e:	51 e4       	ldi	r21, 0x41	; 65
 170:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__addsf3>
 174:	0e 94 33 03 	call	0x666	; 0x666 <__fixsfsi>
 178:	79 83       	std	Y+1, r23	; 0x01
 17a:	68 83       	st	Y, r22
	
	
	
	raw_z = ((uint8_t)i2c_readAck())<<8;
 17c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11i2c_readAckv>
 180:	1c 82       	std	Y+4, r1	; 0x04
 182:	8d 83       	std	Y+5, r24	; 0x05
	raw_z |= i2c_readAck();
 184:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11i2c_readAckv>
 188:	2c 81       	ldd	r18, Y+4	; 0x04
 18a:	3d 81       	ldd	r19, Y+5	; 0x05
 18c:	28 2b       	or	r18, r24
 18e:	3d 83       	std	Y+5, r19	; 0x05
 190:	2c 83       	std	Y+4, r18	; 0x04
	
	
	raw_y = ((uint8_t)i2c_readAck())<<8;
 192:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_Z11i2c_readAckv>
 196:	1a 82       	std	Y+2, r1	; 0x02
 198:	8b 83       	std	Y+3, r24	; 0x03
	raw_y |= i2c_readNak();
 19a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z11i2c_readNakv>
 19e:	2a 81       	ldd	r18, Y+2	; 0x02
 1a0:	3b 81       	ldd	r19, Y+3	; 0x03
 1a2:	28 2b       	or	r18, r24
	raw_y-=Y_OFFSET;
 1a4:	2b 5a       	subi	r18, 0xAB	; 171
 1a6:	3f 4f       	sbci	r19, 0xFF	; 255
 1a8:	3b 83       	std	Y+3, r19	; 0x03
 1aa:	2a 83       	std	Y+2, r18	; 0x02
	
	i2c_stop();
 1ac:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z8i2c_stopv>
	
	Angle = (atan2((double)raw_y,(double)raw_x)* 180 / 3.14159265 + 180.0);
 1b0:	68 81       	ld	r22, Y
 1b2:	79 81       	ldd	r23, Y+1	; 0x01
 1b4:	07 2e       	mov	r0, r23
 1b6:	00 0c       	add	r0, r0
 1b8:	88 0b       	sbc	r24, r24
 1ba:	99 0b       	sbc	r25, r25
 1bc:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__floatsisf>
 1c0:	6b 01       	movw	r12, r22
 1c2:	7c 01       	movw	r14, r24
 1c4:	8a 81       	ldd	r24, Y+2	; 0x02
 1c6:	9b 81       	ldd	r25, Y+3	; 0x03
 1c8:	bc 01       	movw	r22, r24
 1ca:	99 0f       	add	r25, r25
 1cc:	88 0b       	sbc	r24, r24
 1ce:	99 0b       	sbc	r25, r25
 1d0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__floatsisf>
 1d4:	a7 01       	movw	r20, r14
 1d6:	96 01       	movw	r18, r12
 1d8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <atan2>
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	44 e3       	ldi	r20, 0x34	; 52
 1e2:	53 e4       	ldi	r21, 0x43	; 67
 1e4:	0e 94 26 04 	call	0x84c	; 0x84c <__mulsf3>
 1e8:	2b ed       	ldi	r18, 0xDB	; 219
 1ea:	3f e0       	ldi	r19, 0x0F	; 15
 1ec:	49 e4       	ldi	r20, 0x49	; 73
 1ee:	50 e4       	ldi	r21, 0x40	; 64
 1f0:	0e 94 c1 02 	call	0x582	; 0x582 <__divsf3>
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	44 e3       	ldi	r20, 0x34	; 52
 1fa:	53 e4       	ldi	r21, 0x43	; 67
 1fc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__addsf3>
 200:	0e 94 3a 03 	call	0x674	; 0x674 <__fixunssfsi>
 204:	7f 83       	std	Y+7, r23	; 0x07
 206:	6e 83       	std	Y+6, r22	; 0x06
	
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	08 95       	ret

00000216 <main>:

Compass C1;

int main(void)
{
	sei();
 216:	78 94       	sei
	uart0_init(UART_BAUD_SELECT(38400,F_CPU));
 218:	89 e1       	ldi	r24, 0x19	; 25
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 bd 01 	call	0x37a	; 0x37a <_Z10uart0_initj>
	C1.init_compass();
 220:	80 e6       	ldi	r24, 0x60	; 96
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN7Compass12init_compassEv>
    /* Replace with your application code */
    while (1) 
    {
		C1.read_Compass();
 228:	80 e6       	ldi	r24, 0x60	; 96
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 93 00 	call	0x126	; 0x126 <_ZN7Compass12read_CompassEv>
		Compass(void);
		void init_compass();
		void read_Compass();	
		inline int16_t read_rawx(void){return raw_x;};
		inline int16_t read_rawy(void){return raw_y;};
		inline int16_t Get_Angle(void){return Angle;};
 230:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <_edata+0x6>
 234:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <_edata+0x7>
		uart0_putc(C1.Get_Angle()/2);
 238:	99 23       	and	r25, r25
 23a:	0c f4       	brge	.+2      	; 0x23e <main+0x28>
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	95 95       	asr	r25
 240:	87 95       	ror	r24
 242:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z10uart0_putch>
#include "uart.h"
#include "Compass.h"

Compass C1;

int main(void)
 246:	f0 cf       	rjmp	.-32     	; 0x228 <main+0x12>

00000248 <_GLOBAL__sub_I_C1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "uart.h"
#include "Compass.h"

Compass C1;
 248:	80 e6       	ldi	r24, 0x60	; 96
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN7CompassC1Ev>
 250:	08 95       	ret

00000252 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 252:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 254:	88 e4       	ldi	r24, 0x48	; 72
 256:	80 b9       	out	0x00, r24	; 0
 258:	08 95       	ret

0000025a <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 25a:	94 ea       	ldi	r25, 0xA4	; 164
 25c:	96 bf       	out	0x36, r25	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 25e:	06 b6       	in	r0, 0x36	; 54
 260:	07 fe       	sbrs	r0, 7
 262:	fd cf       	rjmp	.-6      	; 0x25e <_Z9i2c_starth+0x4>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 264:	91 b1       	in	r25, 0x01	; 1
 266:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 268:	98 30       	cpi	r25, 0x08	; 8
 26a:	11 f0       	breq	.+4      	; 0x270 <_Z9i2c_starth+0x16>
 26c:	90 31       	cpi	r25, 0x10	; 16
 26e:	79 f4       	brne	.+30     	; 0x28e <_Z9i2c_starth+0x34>

	// send device address
	TWDR = address;
 270:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 272:	84 e8       	ldi	r24, 0x84	; 132
 274:	86 bf       	out	0x36, r24	; 54

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 276:	06 b6       	in	r0, 0x36	; 54
 278:	07 fe       	sbrs	r0, 7
 27a:	fd cf       	rjmp	.-6      	; 0x276 <_Z9i2c_starth+0x1c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 27c:	91 b1       	in	r25, 0x01	; 1
 27e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 280:	98 31       	cpi	r25, 0x18	; 24
 282:	39 f0       	breq	.+14     	; 0x292 <_Z9i2c_starth+0x38>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 34       	cpi	r25, 0x40	; 64
 288:	29 f4       	brne	.+10     	; 0x294 <_Z9i2c_starth+0x3a>
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 292:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 294:	08 95       	ret

00000296 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 296:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z9i2c_starth>

}/* i2c_rep_start */
 29a:	08 95       	ret

0000029c <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 29c:	84 e9       	ldi	r24, 0x94	; 148
 29e:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 2a0:	06 b6       	in	r0, 0x36	; 54
 2a2:	04 fc       	sbrc	r0, 4
 2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <_Z8i2c_stopv+0x4>

}/* i2c_stop */
 2a6:	08 95       	ret

000002a8 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 2a8:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 2aa:	84 e8       	ldi	r24, 0x84	; 132
 2ac:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 2ae:	06 b6       	in	r0, 0x36	; 54
 2b0:	07 fe       	sbrs	r0, 7
 2b2:	fd cf       	rjmp	.-6      	; 0x2ae <_Z9i2c_writeh+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 2b4:	91 b1       	in	r25, 0x01	; 1
 2b6:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	98 32       	cpi	r25, 0x28	; 40
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <_Z9i2c_writeh+0x18>
 2be:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
 2c0:	08 95       	ret

000002c2 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 2c2:	84 ec       	ldi	r24, 0xC4	; 196
 2c4:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));    
 2c6:	06 b6       	in	r0, 0x36	; 54
 2c8:	07 fe       	sbrs	r0, 7
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <_Z11i2c_readAckv+0x4>

    return TWDR;
 2cc:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readAck */
 2ce:	08 95       	ret

000002d0 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 2d0:	84 e8       	ldi	r24, 0x84	; 132
 2d2:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 2d4:	06 b6       	in	r0, 0x36	; 54
 2d6:	07 fe       	sbrs	r0, 7
 2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <_Z11i2c_readNakv+0x4>
	
    return TWDR;
 2da:	83 b1       	in	r24, 0x03	; 3

 2dc:	08 95       	ret

000002de <__vector_13>:
	/* get data from receive buffer */
	data = UART0_RxBuf[tmptail];

	return (UART0_LastRxError << 8) + data;

}/* uart_getc */
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
 2f2:	8b b1       	in	r24, 0x0b	; 11
 2f4:	2c b1       	in	r18, 0x0c	; 12
 2f6:	88 71       	andi	r24, 0x18	; 24
 2f8:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <_ZL12UART0_RxHead>
 2fc:	ef 5f       	subi	r30, 0xFF	; 255
 2fe:	ef 71       	andi	r30, 0x1F	; 31
 300:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <_ZL12UART0_RxTail>
 304:	e9 17       	cp	r30, r25
 306:	39 f0       	breq	.+14     	; 0x316 <__vector_13+0x38>
 308:	e0 93 6a 00 	sts	0x006A, r30	; 0x80006a <_ZL12UART0_RxHead>
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	e3 59       	subi	r30, 0x93	; 147
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	20 83       	st	Z, r18
 314:	01 c0       	rjmp	.+2      	; 0x318 <__vector_13+0x3a>
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <_ZL17UART0_LastRxError>
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <__vector_14>:
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
 342:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <_ZL12UART0_TxHead>
 346:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <_ZL12UART0_TxTail>
 34a:	98 17       	cp	r25, r24
 34c:	61 f0       	breq	.+24     	; 0x366 <__vector_14+0x36>
 34e:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <_ZL12UART0_TxTail>
 352:	ef 5f       	subi	r30, 0xFF	; 255
 354:	ef 71       	andi	r30, 0x1F	; 31
 356:	e0 93 6b 00 	sts	0x006B, r30	; 0x80006b <_ZL12UART0_TxTail>
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	e3 57       	subi	r30, 0x73	; 115
 35e:	ff 4f       	sbci	r31, 0xFF	; 255
 360:	80 81       	ld	r24, Z
 362:	8c b9       	out	0x0c, r24	; 12
 364:	01 c0       	rjmp	.+2      	; 0x368 <__vector_14+0x38>
 366:	55 98       	cbi	0x0a, 5	; 10
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <_Z10uart0_initj>:
 37a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <_ZL12UART0_TxHead>
 37e:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <_ZL12UART0_TxTail>
 382:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <_ZL12UART0_RxHead>
 386:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <_ZL12UART0_RxTail>
 38a:	99 23       	and	r25, r25
 38c:	1c f4       	brge	.+6      	; 0x394 <_Z10uart0_initj+0x1a>
 38e:	22 e0       	ldi	r18, 0x02	; 2
 390:	2b b9       	out	0x0b, r18	; 11
 392:	9f 77       	andi	r25, 0x7F	; 127
 394:	90 bd       	out	0x20, r25	; 32
 396:	89 b9       	out	0x09, r24	; 9
 398:	88 e9       	ldi	r24, 0x98	; 152
 39a:	8a b9       	out	0x0a, r24	; 10
 39c:	86 e8       	ldi	r24, 0x86	; 134
 39e:	80 bd       	out	0x20, r24	; 32
 3a0:	08 95       	ret

000003a2 <_Z10uart0_putch>:
void uart0_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART0_TxHead + 1) & UART_TX_BUFFER_MASK;
 3a2:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <_ZL12UART0_TxHead>
 3a6:	2f 5f       	subi	r18, 0xFF	; 255
 3a8:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART0_TxTail) {
 3aa:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <_ZL12UART0_TxTail>
 3ae:	29 17       	cp	r18, r25
 3b0:	e1 f3       	breq	.-8      	; 0x3aa <_Z10uart0_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART0_TxBuf[tmphead] = data;
 3b2:	e2 2f       	mov	r30, r18
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	e3 57       	subi	r30, 0x73	; 115
 3b8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ba:	80 83       	st	Z, r24
	UART0_TxHead = tmphead;
 3bc:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <_ZL12UART0_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
 3c0:	55 9a       	sbi	0x0a, 5	; 10
 3c2:	08 95       	ret

000003c4 <__subsf3>:
 3c4:	50 58       	subi	r21, 0x80	; 128

000003c6 <__addsf3>:
 3c6:	bb 27       	eor	r27, r27
 3c8:	aa 27       	eor	r26, r26
 3ca:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__addsf3x>
 3ce:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_round>
 3d2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fp_pscA>
 3d6:	38 f0       	brcs	.+14     	; 0x3e6 <__addsf3+0x20>
 3d8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscB>
 3dc:	20 f0       	brcs	.+8      	; 0x3e6 <__addsf3+0x20>
 3de:	39 f4       	brne	.+14     	; 0x3ee <__addsf3+0x28>
 3e0:	9f 3f       	cpi	r25, 0xFF	; 255
 3e2:	19 f4       	brne	.+6      	; 0x3ea <__addsf3+0x24>
 3e4:	26 f4       	brtc	.+8      	; 0x3ee <__addsf3+0x28>
 3e6:	0c 94 ac 03 	jmp	0x758	; 0x758 <__fp_nan>
 3ea:	0e f4       	brtc	.+2      	; 0x3ee <__addsf3+0x28>
 3ec:	e0 95       	com	r30
 3ee:	e7 fb       	bst	r30, 7
 3f0:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_inf>

000003f4 <__addsf3x>:
 3f4:	e9 2f       	mov	r30, r25
 3f6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_split3>
 3fa:	58 f3       	brcs	.-42     	; 0x3d2 <__addsf3+0xc>
 3fc:	ba 17       	cp	r27, r26
 3fe:	62 07       	cpc	r22, r18
 400:	73 07       	cpc	r23, r19
 402:	84 07       	cpc	r24, r20
 404:	95 07       	cpc	r25, r21
 406:	20 f0       	brcs	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 408:	79 f4       	brne	.+30     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 40a:	a6 f5       	brtc	.+104    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 40c:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_zero>
 410:	0e f4       	brtc	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	e0 95       	com	r30
 414:	0b 2e       	mov	r0, r27
 416:	ba 2f       	mov	r27, r26
 418:	a0 2d       	mov	r26, r0
 41a:	0b 01       	movw	r0, r22
 41c:	b9 01       	movw	r22, r18
 41e:	90 01       	movw	r18, r0
 420:	0c 01       	movw	r0, r24
 422:	ca 01       	movw	r24, r20
 424:	a0 01       	movw	r20, r0
 426:	11 24       	eor	r1, r1
 428:	ff 27       	eor	r31, r31
 42a:	59 1b       	sub	r21, r25
 42c:	99 f0       	breq	.+38     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 42e:	59 3f       	cpi	r21, 0xF9	; 249
 430:	50 f4       	brcc	.+20     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 432:	50 3e       	cpi	r21, 0xE0	; 224
 434:	68 f1       	brcs	.+90     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 436:	1a 16       	cp	r1, r26
 438:	f0 40       	sbci	r31, 0x00	; 0
 43a:	a2 2f       	mov	r26, r18
 43c:	23 2f       	mov	r18, r19
 43e:	34 2f       	mov	r19, r20
 440:	44 27       	eor	r20, r20
 442:	58 5f       	subi	r21, 0xF8	; 248
 444:	f3 cf       	rjmp	.-26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 446:	46 95       	lsr	r20
 448:	37 95       	ror	r19
 44a:	27 95       	ror	r18
 44c:	a7 95       	ror	r26
 44e:	f0 40       	sbci	r31, 0x00	; 0
 450:	53 95       	inc	r21
 452:	c9 f7       	brne	.-14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 454:	7e f4       	brtc	.+30     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 456:	1f 16       	cp	r1, r31
 458:	ba 0b       	sbc	r27, r26
 45a:	62 0b       	sbc	r22, r18
 45c:	73 0b       	sbc	r23, r19
 45e:	84 0b       	sbc	r24, r20
 460:	ba f0       	brmi	.+46     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 462:	91 50       	subi	r25, 0x01	; 1
 464:	a1 f0       	breq	.+40     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 466:	ff 0f       	add	r31, r31
 468:	bb 1f       	adc	r27, r27
 46a:	66 1f       	adc	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	88 1f       	adc	r24, r24
 470:	c2 f7       	brpl	.-16     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 472:	0e c0       	rjmp	.+28     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 474:	ba 0f       	add	r27, r26
 476:	62 1f       	adc	r22, r18
 478:	73 1f       	adc	r23, r19
 47a:	84 1f       	adc	r24, r20
 47c:	48 f4       	brcc	.+18     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 47e:	87 95       	ror	r24
 480:	77 95       	ror	r23
 482:	67 95       	ror	r22
 484:	b7 95       	ror	r27
 486:	f7 95       	ror	r31
 488:	9e 3f       	cpi	r25, 0xFE	; 254
 48a:	08 f0       	brcs	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48c:	b0 cf       	rjmp	.-160    	; 0x3ee <__addsf3+0x28>
 48e:	93 95       	inc	r25
 490:	88 0f       	add	r24, r24
 492:	08 f0       	brcs	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 494:	99 27       	eor	r25, r25
 496:	ee 0f       	add	r30, r30
 498:	97 95       	ror	r25
 49a:	87 95       	ror	r24
 49c:	08 95       	ret
 49e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fp_pscA>
 4a2:	60 f0       	brcs	.+24     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4a4:	80 e8       	ldi	r24, 0x80	; 128
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	09 f4       	brne	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4aa:	9e ef       	ldi	r25, 0xFE	; 254
 4ac:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscB>
 4b0:	28 f0       	brcs	.+10     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b2:	40 e8       	ldi	r20, 0x80	; 128
 4b4:	51 e0       	ldi	r21, 0x01	; 1
 4b6:	71 f4       	brne	.+28     	; 0x4d4 <atan2+0x10>
 4b8:	5e ef       	ldi	r21, 0xFE	; 254
 4ba:	0c c0       	rjmp	.+24     	; 0x4d4 <atan2+0x10>
 4bc:	0c 94 ac 03 	jmp	0x758	; 0x758 <__fp_nan>
 4c0:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_zero>

000004c4 <atan2>:
 4c4:	e9 2f       	mov	r30, r25
 4c6:	e0 78       	andi	r30, 0x80	; 128
 4c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_split3>
 4cc:	40 f3       	brcs	.-48     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4ce:	09 2e       	mov	r0, r25
 4d0:	05 2a       	or	r0, r21
 4d2:	b1 f3       	breq	.-20     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4d4:	26 17       	cp	r18, r22
 4d6:	37 07       	cpc	r19, r23
 4d8:	48 07       	cpc	r20, r24
 4da:	59 07       	cpc	r21, r25
 4dc:	38 f0       	brcs	.+14     	; 0x4ec <atan2+0x28>
 4de:	0e 2e       	mov	r0, r30
 4e0:	07 f8       	bld	r0, 7
 4e2:	e0 25       	eor	r30, r0
 4e4:	69 f0       	breq	.+26     	; 0x500 <atan2+0x3c>
 4e6:	e0 25       	eor	r30, r0
 4e8:	e0 64       	ori	r30, 0x40	; 64
 4ea:	0a c0       	rjmp	.+20     	; 0x500 <atan2+0x3c>
 4ec:	ef 63       	ori	r30, 0x3F	; 63
 4ee:	07 f8       	bld	r0, 7
 4f0:	00 94       	com	r0
 4f2:	07 fa       	bst	r0, 7
 4f4:	db 01       	movw	r26, r22
 4f6:	b9 01       	movw	r22, r18
 4f8:	9d 01       	movw	r18, r26
 4fa:	dc 01       	movw	r26, r24
 4fc:	ca 01       	movw	r24, r20
 4fe:	ad 01       	movw	r20, r26
 500:	ef 93       	push	r30
 502:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__divsf3_pse>
 506:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__fp_round>
 50a:	0e 94 92 02 	call	0x524	; 0x524 <atan>
 50e:	5f 91       	pop	r21
 510:	55 23       	and	r21, r21
 512:	39 f0       	breq	.+14     	; 0x522 <atan2+0x5e>
 514:	2b ed       	ldi	r18, 0xDB	; 219
 516:	3f e0       	ldi	r19, 0x0F	; 15
 518:	49 e4       	ldi	r20, 0x49	; 73
 51a:	50 fd       	sbrc	r21, 0
 51c:	49 ec       	ldi	r20, 0xC9	; 201
 51e:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__addsf3>
 522:	08 95       	ret

00000524 <atan>:
 524:	df 93       	push	r29
 526:	dd 27       	eor	r29, r29
 528:	b9 2f       	mov	r27, r25
 52a:	bf 77       	andi	r27, 0x7F	; 127
 52c:	40 e8       	ldi	r20, 0x80	; 128
 52e:	5f e3       	ldi	r21, 0x3F	; 63
 530:	16 16       	cp	r1, r22
 532:	17 06       	cpc	r1, r23
 534:	48 07       	cpc	r20, r24
 536:	5b 07       	cpc	r21, r27
 538:	18 f4       	brcc	.+6      	; 0x540 <atan+0x1c>
 53a:	d9 2f       	mov	r29, r25
 53c:	0e 94 1e 04 	call	0x83c	; 0x83c <inverse>
 540:	9f 93       	push	r25
 542:	8f 93       	push	r24
 544:	7f 93       	push	r23
 546:	6f 93       	push	r22
 548:	0e 94 93 04 	call	0x926	; 0x926 <square>
 54c:	e4 e5       	ldi	r30, 0x54	; 84
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	0e 94 af 03 	call	0x75e	; 0x75e <__fp_powser>
 554:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__fp_round>
 558:	2f 91       	pop	r18
 55a:	3f 91       	pop	r19
 55c:	4f 91       	pop	r20
 55e:	5f 91       	pop	r21
 560:	0e 94 39 04 	call	0x872	; 0x872 <__mulsf3x>
 564:	dd 23       	and	r29, r29
 566:	51 f0       	breq	.+20     	; 0x57c <atan+0x58>
 568:	90 58       	subi	r25, 0x80	; 128
 56a:	a2 ea       	ldi	r26, 0xA2	; 162
 56c:	2a ed       	ldi	r18, 0xDA	; 218
 56e:	3f e0       	ldi	r19, 0x0F	; 15
 570:	49 ec       	ldi	r20, 0xC9	; 201
 572:	5f e3       	ldi	r21, 0x3F	; 63
 574:	d0 78       	andi	r29, 0x80	; 128
 576:	5d 27       	eor	r21, r29
 578:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__addsf3x>
 57c:	df 91       	pop	r29
 57e:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_round>

00000582 <__divsf3>:
 582:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__divsf3x>
 586:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_round>
 58a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscB>
 58e:	58 f0       	brcs	.+22     	; 0x5a6 <__divsf3+0x24>
 590:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fp_pscA>
 594:	40 f0       	brcs	.+16     	; 0x5a6 <__divsf3+0x24>
 596:	29 f4       	brne	.+10     	; 0x5a2 <__divsf3+0x20>
 598:	5f 3f       	cpi	r21, 0xFF	; 255
 59a:	29 f0       	breq	.+10     	; 0x5a6 <__divsf3+0x24>
 59c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_inf>
 5a0:	51 11       	cpse	r21, r1
 5a2:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>
 5a6:	0c 94 ac 03 	jmp	0x758	; 0x758 <__fp_nan>

000005aa <__divsf3x>:
 5aa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_split3>
 5ae:	68 f3       	brcs	.-38     	; 0x58a <__divsf3+0x8>

000005b0 <__divsf3_pse>:
 5b0:	99 23       	and	r25, r25
 5b2:	b1 f3       	breq	.-20     	; 0x5a0 <__divsf3+0x1e>
 5b4:	55 23       	and	r21, r21
 5b6:	91 f3       	breq	.-28     	; 0x59c <__divsf3+0x1a>
 5b8:	95 1b       	sub	r25, r21
 5ba:	55 0b       	sbc	r21, r21
 5bc:	bb 27       	eor	r27, r27
 5be:	aa 27       	eor	r26, r26
 5c0:	62 17       	cp	r22, r18
 5c2:	73 07       	cpc	r23, r19
 5c4:	84 07       	cpc	r24, r20
 5c6:	38 f0       	brcs	.+14     	; 0x5d6 <__divsf3_pse+0x26>
 5c8:	9f 5f       	subi	r25, 0xFF	; 255
 5ca:	5f 4f       	sbci	r21, 0xFF	; 255
 5cc:	22 0f       	add	r18, r18
 5ce:	33 1f       	adc	r19, r19
 5d0:	44 1f       	adc	r20, r20
 5d2:	aa 1f       	adc	r26, r26
 5d4:	a9 f3       	breq	.-22     	; 0x5c0 <__divsf3_pse+0x10>
 5d6:	35 d0       	rcall	.+106    	; 0x642 <__divsf3_pse+0x92>
 5d8:	0e 2e       	mov	r0, r30
 5da:	3a f0       	brmi	.+14     	; 0x5ea <__divsf3_pse+0x3a>
 5dc:	e0 e8       	ldi	r30, 0x80	; 128
 5de:	32 d0       	rcall	.+100    	; 0x644 <__divsf3_pse+0x94>
 5e0:	91 50       	subi	r25, 0x01	; 1
 5e2:	50 40       	sbci	r21, 0x00	; 0
 5e4:	e6 95       	lsr	r30
 5e6:	00 1c       	adc	r0, r0
 5e8:	ca f7       	brpl	.-14     	; 0x5dc <__divsf3_pse+0x2c>
 5ea:	2b d0       	rcall	.+86     	; 0x642 <__divsf3_pse+0x92>
 5ec:	fe 2f       	mov	r31, r30
 5ee:	29 d0       	rcall	.+82     	; 0x642 <__divsf3_pse+0x92>
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	88 1f       	adc	r24, r24
 5f6:	bb 1f       	adc	r27, r27
 5f8:	26 17       	cp	r18, r22
 5fa:	37 07       	cpc	r19, r23
 5fc:	48 07       	cpc	r20, r24
 5fe:	ab 07       	cpc	r26, r27
 600:	b0 e8       	ldi	r27, 0x80	; 128
 602:	09 f0       	breq	.+2      	; 0x606 <__divsf3_pse+0x56>
 604:	bb 0b       	sbc	r27, r27
 606:	80 2d       	mov	r24, r0
 608:	bf 01       	movw	r22, r30
 60a:	ff 27       	eor	r31, r31
 60c:	93 58       	subi	r25, 0x83	; 131
 60e:	5f 4f       	sbci	r21, 0xFF	; 255
 610:	3a f0       	brmi	.+14     	; 0x620 <__divsf3_pse+0x70>
 612:	9e 3f       	cpi	r25, 0xFE	; 254
 614:	51 05       	cpc	r21, r1
 616:	78 f0       	brcs	.+30     	; 0x636 <__divsf3_pse+0x86>
 618:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_inf>
 61c:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>
 620:	5f 3f       	cpi	r21, 0xFF	; 255
 622:	e4 f3       	brlt	.-8      	; 0x61c <__divsf3_pse+0x6c>
 624:	98 3e       	cpi	r25, 0xE8	; 232
 626:	d4 f3       	brlt	.-12     	; 0x61c <__divsf3_pse+0x6c>
 628:	86 95       	lsr	r24
 62a:	77 95       	ror	r23
 62c:	67 95       	ror	r22
 62e:	b7 95       	ror	r27
 630:	f7 95       	ror	r31
 632:	9f 5f       	subi	r25, 0xFF	; 255
 634:	c9 f7       	brne	.-14     	; 0x628 <__divsf3_pse+0x78>
 636:	88 0f       	add	r24, r24
 638:	91 1d       	adc	r25, r1
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	97 f9       	bld	r25, 7
 640:	08 95       	ret
 642:	e1 e0       	ldi	r30, 0x01	; 1
 644:	66 0f       	add	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	88 1f       	adc	r24, r24
 64a:	bb 1f       	adc	r27, r27
 64c:	62 17       	cp	r22, r18
 64e:	73 07       	cpc	r23, r19
 650:	84 07       	cpc	r24, r20
 652:	ba 07       	cpc	r27, r26
 654:	20 f0       	brcs	.+8      	; 0x65e <__divsf3_pse+0xae>
 656:	62 1b       	sub	r22, r18
 658:	73 0b       	sbc	r23, r19
 65a:	84 0b       	sbc	r24, r20
 65c:	ba 0b       	sbc	r27, r26
 65e:	ee 1f       	adc	r30, r30
 660:	88 f7       	brcc	.-30     	; 0x644 <__divsf3_pse+0x94>
 662:	e0 95       	com	r30
 664:	08 95       	ret

00000666 <__fixsfsi>:
 666:	0e 94 3a 03 	call	0x674	; 0x674 <__fixunssfsi>
 66a:	68 94       	set
 66c:	b1 11       	cpse	r27, r1
 66e:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>
 672:	08 95       	ret

00000674 <__fixunssfsi>:
 674:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_splitA>
 678:	88 f0       	brcs	.+34     	; 0x69c <__fixunssfsi+0x28>
 67a:	9f 57       	subi	r25, 0x7F	; 127
 67c:	98 f0       	brcs	.+38     	; 0x6a4 <__fixunssfsi+0x30>
 67e:	b9 2f       	mov	r27, r25
 680:	99 27       	eor	r25, r25
 682:	b7 51       	subi	r27, 0x17	; 23
 684:	b0 f0       	brcs	.+44     	; 0x6b2 <__fixunssfsi+0x3e>
 686:	e1 f0       	breq	.+56     	; 0x6c0 <__fixunssfsi+0x4c>
 688:	66 0f       	add	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	88 1f       	adc	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	1a f0       	brmi	.+6      	; 0x698 <__fixunssfsi+0x24>
 692:	ba 95       	dec	r27
 694:	c9 f7       	brne	.-14     	; 0x688 <__fixunssfsi+0x14>
 696:	14 c0       	rjmp	.+40     	; 0x6c0 <__fixunssfsi+0x4c>
 698:	b1 30       	cpi	r27, 0x01	; 1
 69a:	91 f0       	breq	.+36     	; 0x6c0 <__fixunssfsi+0x4c>
 69c:	0e 94 17 04 	call	0x82e	; 0x82e <__fp_zero>
 6a0:	b1 e0       	ldi	r27, 0x01	; 1
 6a2:	08 95       	ret
 6a4:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_zero>
 6a8:	67 2f       	mov	r22, r23
 6aa:	78 2f       	mov	r23, r24
 6ac:	88 27       	eor	r24, r24
 6ae:	b8 5f       	subi	r27, 0xF8	; 248
 6b0:	39 f0       	breq	.+14     	; 0x6c0 <__fixunssfsi+0x4c>
 6b2:	b9 3f       	cpi	r27, 0xF9	; 249
 6b4:	cc f3       	brlt	.-14     	; 0x6a8 <__fixunssfsi+0x34>
 6b6:	86 95       	lsr	r24
 6b8:	77 95       	ror	r23
 6ba:	67 95       	ror	r22
 6bc:	b3 95       	inc	r27
 6be:	d9 f7       	brne	.-10     	; 0x6b6 <__fixunssfsi+0x42>
 6c0:	3e f4       	brtc	.+14     	; 0x6d0 <__fixunssfsi+0x5c>
 6c2:	90 95       	com	r25
 6c4:	80 95       	com	r24
 6c6:	70 95       	com	r23
 6c8:	61 95       	neg	r22
 6ca:	7f 4f       	sbci	r23, 0xFF	; 255
 6cc:	8f 4f       	sbci	r24, 0xFF	; 255
 6ce:	9f 4f       	sbci	r25, 0xFF	; 255
 6d0:	08 95       	ret

000006d2 <__floatunsisf>:
 6d2:	e8 94       	clt
 6d4:	09 c0       	rjmp	.+18     	; 0x6e8 <__floatsisf+0x12>

000006d6 <__floatsisf>:
 6d6:	97 fb       	bst	r25, 7
 6d8:	3e f4       	brtc	.+14     	; 0x6e8 <__floatsisf+0x12>
 6da:	90 95       	com	r25
 6dc:	80 95       	com	r24
 6de:	70 95       	com	r23
 6e0:	61 95       	neg	r22
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	99 23       	and	r25, r25
 6ea:	a9 f0       	breq	.+42     	; 0x716 <__floatsisf+0x40>
 6ec:	f9 2f       	mov	r31, r25
 6ee:	96 e9       	ldi	r25, 0x96	; 150
 6f0:	bb 27       	eor	r27, r27
 6f2:	93 95       	inc	r25
 6f4:	f6 95       	lsr	r31
 6f6:	87 95       	ror	r24
 6f8:	77 95       	ror	r23
 6fa:	67 95       	ror	r22
 6fc:	b7 95       	ror	r27
 6fe:	f1 11       	cpse	r31, r1
 700:	f8 cf       	rjmp	.-16     	; 0x6f2 <__floatsisf+0x1c>
 702:	fa f4       	brpl	.+62     	; 0x742 <__floatsisf+0x6c>
 704:	bb 0f       	add	r27, r27
 706:	11 f4       	brne	.+4      	; 0x70c <__floatsisf+0x36>
 708:	60 ff       	sbrs	r22, 0
 70a:	1b c0       	rjmp	.+54     	; 0x742 <__floatsisf+0x6c>
 70c:	6f 5f       	subi	r22, 0xFF	; 255
 70e:	7f 4f       	sbci	r23, 0xFF	; 255
 710:	8f 4f       	sbci	r24, 0xFF	; 255
 712:	9f 4f       	sbci	r25, 0xFF	; 255
 714:	16 c0       	rjmp	.+44     	; 0x742 <__floatsisf+0x6c>
 716:	88 23       	and	r24, r24
 718:	11 f0       	breq	.+4      	; 0x71e <__floatsisf+0x48>
 71a:	96 e9       	ldi	r25, 0x96	; 150
 71c:	11 c0       	rjmp	.+34     	; 0x740 <__floatsisf+0x6a>
 71e:	77 23       	and	r23, r23
 720:	21 f0       	breq	.+8      	; 0x72a <__floatsisf+0x54>
 722:	9e e8       	ldi	r25, 0x8E	; 142
 724:	87 2f       	mov	r24, r23
 726:	76 2f       	mov	r23, r22
 728:	05 c0       	rjmp	.+10     	; 0x734 <__floatsisf+0x5e>
 72a:	66 23       	and	r22, r22
 72c:	71 f0       	breq	.+28     	; 0x74a <__floatsisf+0x74>
 72e:	96 e8       	ldi	r25, 0x86	; 134
 730:	86 2f       	mov	r24, r22
 732:	70 e0       	ldi	r23, 0x00	; 0
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	2a f0       	brmi	.+10     	; 0x742 <__floatsisf+0x6c>
 738:	9a 95       	dec	r25
 73a:	66 0f       	add	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	88 1f       	adc	r24, r24
 740:	da f7       	brpl	.-10     	; 0x738 <__floatsisf+0x62>
 742:	88 0f       	add	r24, r24
 744:	96 95       	lsr	r25
 746:	87 95       	ror	r24
 748:	97 f9       	bld	r25, 7
 74a:	08 95       	ret

0000074c <__fp_inf>:
 74c:	97 f9       	bld	r25, 7
 74e:	9f 67       	ori	r25, 0x7F	; 127
 750:	80 e8       	ldi	r24, 0x80	; 128
 752:	70 e0       	ldi	r23, 0x00	; 0
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	08 95       	ret

00000758 <__fp_nan>:
 758:	9f ef       	ldi	r25, 0xFF	; 255
 75a:	80 ec       	ldi	r24, 0xC0	; 192
 75c:	08 95       	ret

0000075e <__fp_powser>:
 75e:	df 93       	push	r29
 760:	cf 93       	push	r28
 762:	1f 93       	push	r17
 764:	0f 93       	push	r16
 766:	ff 92       	push	r15
 768:	ef 92       	push	r14
 76a:	df 92       	push	r13
 76c:	7b 01       	movw	r14, r22
 76e:	8c 01       	movw	r16, r24
 770:	68 94       	set
 772:	06 c0       	rjmp	.+12     	; 0x780 <__fp_powser+0x22>
 774:	da 2e       	mov	r13, r26
 776:	ef 01       	movw	r28, r30
 778:	0e 94 39 04 	call	0x872	; 0x872 <__mulsf3x>
 77c:	fe 01       	movw	r30, r28
 77e:	e8 94       	clt
 780:	a5 91       	lpm	r26, Z+
 782:	25 91       	lpm	r18, Z+
 784:	35 91       	lpm	r19, Z+
 786:	45 91       	lpm	r20, Z+
 788:	55 91       	lpm	r21, Z+
 78a:	a6 f3       	brts	.-24     	; 0x774 <__fp_powser+0x16>
 78c:	ef 01       	movw	r28, r30
 78e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__addsf3x>
 792:	fe 01       	movw	r30, r28
 794:	97 01       	movw	r18, r14
 796:	a8 01       	movw	r20, r16
 798:	da 94       	dec	r13
 79a:	69 f7       	brne	.-38     	; 0x776 <__fp_powser+0x18>
 79c:	df 90       	pop	r13
 79e:	ef 90       	pop	r14
 7a0:	ff 90       	pop	r15
 7a2:	0f 91       	pop	r16
 7a4:	1f 91       	pop	r17
 7a6:	cf 91       	pop	r28
 7a8:	df 91       	pop	r29
 7aa:	08 95       	ret

000007ac <__fp_pscA>:
 7ac:	00 24       	eor	r0, r0
 7ae:	0a 94       	dec	r0
 7b0:	16 16       	cp	r1, r22
 7b2:	17 06       	cpc	r1, r23
 7b4:	18 06       	cpc	r1, r24
 7b6:	09 06       	cpc	r0, r25
 7b8:	08 95       	ret

000007ba <__fp_pscB>:
 7ba:	00 24       	eor	r0, r0
 7bc:	0a 94       	dec	r0
 7be:	12 16       	cp	r1, r18
 7c0:	13 06       	cpc	r1, r19
 7c2:	14 06       	cpc	r1, r20
 7c4:	05 06       	cpc	r0, r21
 7c6:	08 95       	ret

000007c8 <__fp_round>:
 7c8:	09 2e       	mov	r0, r25
 7ca:	03 94       	inc	r0
 7cc:	00 0c       	add	r0, r0
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <__fp_round+0xc>
 7d0:	88 23       	and	r24, r24
 7d2:	52 f0       	brmi	.+20     	; 0x7e8 <__fp_round+0x20>
 7d4:	bb 0f       	add	r27, r27
 7d6:	40 f4       	brcc	.+16     	; 0x7e8 <__fp_round+0x20>
 7d8:	bf 2b       	or	r27, r31
 7da:	11 f4       	brne	.+4      	; 0x7e0 <__fp_round+0x18>
 7dc:	60 ff       	sbrs	r22, 0
 7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__fp_round+0x20>
 7e0:	6f 5f       	subi	r22, 0xFF	; 255
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	08 95       	ret

000007ea <__fp_split3>:
 7ea:	57 fd       	sbrc	r21, 7
 7ec:	90 58       	subi	r25, 0x80	; 128
 7ee:	44 0f       	add	r20, r20
 7f0:	55 1f       	adc	r21, r21
 7f2:	59 f0       	breq	.+22     	; 0x80a <__fp_splitA+0x10>
 7f4:	5f 3f       	cpi	r21, 0xFF	; 255
 7f6:	71 f0       	breq	.+28     	; 0x814 <__fp_splitA+0x1a>
 7f8:	47 95       	ror	r20

000007fa <__fp_splitA>:
 7fa:	88 0f       	add	r24, r24
 7fc:	97 fb       	bst	r25, 7
 7fe:	99 1f       	adc	r25, r25
 800:	61 f0       	breq	.+24     	; 0x81a <__fp_splitA+0x20>
 802:	9f 3f       	cpi	r25, 0xFF	; 255
 804:	79 f0       	breq	.+30     	; 0x824 <__fp_splitA+0x2a>
 806:	87 95       	ror	r24
 808:	08 95       	ret
 80a:	12 16       	cp	r1, r18
 80c:	13 06       	cpc	r1, r19
 80e:	14 06       	cpc	r1, r20
 810:	55 1f       	adc	r21, r21
 812:	f2 cf       	rjmp	.-28     	; 0x7f8 <__fp_split3+0xe>
 814:	46 95       	lsr	r20
 816:	f1 df       	rcall	.-30     	; 0x7fa <__fp_splitA>
 818:	08 c0       	rjmp	.+16     	; 0x82a <__fp_splitA+0x30>
 81a:	16 16       	cp	r1, r22
 81c:	17 06       	cpc	r1, r23
 81e:	18 06       	cpc	r1, r24
 820:	99 1f       	adc	r25, r25
 822:	f1 cf       	rjmp	.-30     	; 0x806 <__fp_splitA+0xc>
 824:	86 95       	lsr	r24
 826:	71 05       	cpc	r23, r1
 828:	61 05       	cpc	r22, r1
 82a:	08 94       	sec
 82c:	08 95       	ret

0000082e <__fp_zero>:
 82e:	e8 94       	clt

00000830 <__fp_szero>:
 830:	bb 27       	eor	r27, r27
 832:	66 27       	eor	r22, r22
 834:	77 27       	eor	r23, r23
 836:	cb 01       	movw	r24, r22
 838:	97 f9       	bld	r25, 7
 83a:	08 95       	ret

0000083c <inverse>:
 83c:	9b 01       	movw	r18, r22
 83e:	ac 01       	movw	r20, r24
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	80 e8       	ldi	r24, 0x80	; 128
 846:	9f e3       	ldi	r25, 0x3F	; 63
 848:	0c 94 c1 02 	jmp	0x582	; 0x582 <__divsf3>

0000084c <__mulsf3>:
 84c:	0e 94 39 04 	call	0x872	; 0x872 <__mulsf3x>
 850:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_round>
 854:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__fp_pscA>
 858:	38 f0       	brcs	.+14     	; 0x868 <__stack+0x9>
 85a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_pscB>
 85e:	20 f0       	brcs	.+8      	; 0x868 <__stack+0x9>
 860:	95 23       	and	r25, r21
 862:	11 f0       	breq	.+4      	; 0x868 <__stack+0x9>
 864:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_inf>
 868:	0c 94 ac 03 	jmp	0x758	; 0x758 <__fp_nan>
 86c:	11 24       	eor	r1, r1
 86e:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>

00000872 <__mulsf3x>:
 872:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_split3>
 876:	70 f3       	brcs	.-36     	; 0x854 <__mulsf3+0x8>

00000878 <__mulsf3_pse>:
 878:	95 9f       	mul	r25, r21
 87a:	c1 f3       	breq	.-16     	; 0x86c <__stack+0xd>
 87c:	95 0f       	add	r25, r21
 87e:	50 e0       	ldi	r21, 0x00	; 0
 880:	55 1f       	adc	r21, r21
 882:	62 9f       	mul	r22, r18
 884:	f0 01       	movw	r30, r0
 886:	72 9f       	mul	r23, r18
 888:	bb 27       	eor	r27, r27
 88a:	f0 0d       	add	r31, r0
 88c:	b1 1d       	adc	r27, r1
 88e:	63 9f       	mul	r22, r19
 890:	aa 27       	eor	r26, r26
 892:	f0 0d       	add	r31, r0
 894:	b1 1d       	adc	r27, r1
 896:	aa 1f       	adc	r26, r26
 898:	64 9f       	mul	r22, r20
 89a:	66 27       	eor	r22, r22
 89c:	b0 0d       	add	r27, r0
 89e:	a1 1d       	adc	r26, r1
 8a0:	66 1f       	adc	r22, r22
 8a2:	82 9f       	mul	r24, r18
 8a4:	22 27       	eor	r18, r18
 8a6:	b0 0d       	add	r27, r0
 8a8:	a1 1d       	adc	r26, r1
 8aa:	62 1f       	adc	r22, r18
 8ac:	73 9f       	mul	r23, r19
 8ae:	b0 0d       	add	r27, r0
 8b0:	a1 1d       	adc	r26, r1
 8b2:	62 1f       	adc	r22, r18
 8b4:	83 9f       	mul	r24, r19
 8b6:	a0 0d       	add	r26, r0
 8b8:	61 1d       	adc	r22, r1
 8ba:	22 1f       	adc	r18, r18
 8bc:	74 9f       	mul	r23, r20
 8be:	33 27       	eor	r19, r19
 8c0:	a0 0d       	add	r26, r0
 8c2:	61 1d       	adc	r22, r1
 8c4:	23 1f       	adc	r18, r19
 8c6:	84 9f       	mul	r24, r20
 8c8:	60 0d       	add	r22, r0
 8ca:	21 1d       	adc	r18, r1
 8cc:	82 2f       	mov	r24, r18
 8ce:	76 2f       	mov	r23, r22
 8d0:	6a 2f       	mov	r22, r26
 8d2:	11 24       	eor	r1, r1
 8d4:	9f 57       	subi	r25, 0x7F	; 127
 8d6:	50 40       	sbci	r21, 0x00	; 0
 8d8:	9a f0       	brmi	.+38     	; 0x900 <__mulsf3_pse+0x88>
 8da:	f1 f0       	breq	.+60     	; 0x918 <__mulsf3_pse+0xa0>
 8dc:	88 23       	and	r24, r24
 8de:	4a f0       	brmi	.+18     	; 0x8f2 <__mulsf3_pse+0x7a>
 8e0:	ee 0f       	add	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	bb 1f       	adc	r27, r27
 8e6:	66 1f       	adc	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	91 50       	subi	r25, 0x01	; 1
 8ee:	50 40       	sbci	r21, 0x00	; 0
 8f0:	a9 f7       	brne	.-22     	; 0x8dc <__mulsf3_pse+0x64>
 8f2:	9e 3f       	cpi	r25, 0xFE	; 254
 8f4:	51 05       	cpc	r21, r1
 8f6:	80 f0       	brcs	.+32     	; 0x918 <__mulsf3_pse+0xa0>
 8f8:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__fp_inf>
 8fc:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_szero>
 900:	5f 3f       	cpi	r21, 0xFF	; 255
 902:	e4 f3       	brlt	.-8      	; 0x8fc <__mulsf3_pse+0x84>
 904:	98 3e       	cpi	r25, 0xE8	; 232
 906:	d4 f3       	brlt	.-12     	; 0x8fc <__mulsf3_pse+0x84>
 908:	86 95       	lsr	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	b7 95       	ror	r27
 910:	f7 95       	ror	r31
 912:	e7 95       	ror	r30
 914:	9f 5f       	subi	r25, 0xFF	; 255
 916:	c1 f7       	brne	.-16     	; 0x908 <__mulsf3_pse+0x90>
 918:	fe 2b       	or	r31, r30
 91a:	88 0f       	add	r24, r24
 91c:	91 1d       	adc	r25, r1
 91e:	96 95       	lsr	r25
 920:	87 95       	ror	r24
 922:	97 f9       	bld	r25, 7
 924:	08 95       	ret

00000926 <square>:
 926:	9b 01       	movw	r18, r22
 928:	ac 01       	movw	r20, r24
 92a:	0c 94 26 04 	jmp	0x84c	; 0x84c <__mulsf3>

0000092e <__tablejump2__>:
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31
 932:	05 90       	lpm	r0, Z+
 934:	f4 91       	lpm	r31, Z
 936:	e0 2d       	mov	r30, r0
 938:	09 94       	ijmp

0000093a <_exit>:
 93a:	f8 94       	cli

0000093c <__stop_program>:
 93c:	ff cf       	rjmp	.-2      	; 0x93c <__stop_program>
