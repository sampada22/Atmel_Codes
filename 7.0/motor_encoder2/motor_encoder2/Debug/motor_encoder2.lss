
motor_encoder2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000005a4  00000638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  00800062  00800062  0000063a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab1  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cc  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c9  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00001e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052e  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f9  00000000  00000000  0000257e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002a77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_13>
  38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3b       	cpi	r26, 0xB0	; 176
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  8a:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:

uint8_t count    = 0;
float  revperMin = 0;
float  revperSec = 0;

ISR (INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	count++;
  9e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <count>
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <count>
}
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <__vector_8>:

ISR (TIMER1_COMPB_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
	revperSec = count;
  d6:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <count>
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 0d 02 	call	0x41a	; 0x41a <__floatunsisf>
  e4:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_end>
  e8:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__data_end+0x1>
  ec:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end+0x2>
  f0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x3>
	revperMin = revperSec/60;
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	40 e7       	ldi	r20, 0x70	; 112
  fa:	52 e4       	ldi	r21, 0x42	; 66
  fc:	0e 94 65 01 	call	0x2ca	; 0x2ca <__divsf3>
 100:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <revperMin>
 104:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <revperMin+0x1>
 108:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <revperMin+0x2>
 10c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <revperMin+0x3>
	count = 0;
 110:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <count>
	uart_putint(revperMin);
 114:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__fixsfsi>
 118:	cb 01       	movw	r24, r22
 11a:	0e 94 3b 01 	call	0x276	; 0x276 <_Z11uart_putinti>
	uart_puts("\n");
 11e:	80 e6       	ldi	r24, 0x60	; 96
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 2c 01 	call	0x258	; 0x258 <_Z9uart_putsPKc>
	
}
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	bf 91       	pop	r27
 12c:	af 91       	pop	r26
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	7f 91       	pop	r23
 134:	6f 91       	pop	r22
 136:	5f 91       	pop	r21
 138:	4f 91       	pop	r20
 13a:	3f 91       	pop	r19
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <main>:

int main(void)
{
	uart_init(UART_BAUD_SELECT(BAUD_RATE,F_CPU));
 148:	87 e6       	ldi	r24, 0x67	; 103
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 05 01 	call	0x20a	; 0x20a <_Z9uart_initj>
	sei();
 150:	78 94       	sei
	GICR |= (1<<INT0)|(1<<INT1);
 152:	8b b7       	in	r24, 0x3b	; 59
 154:	80 6c       	ori	r24, 0xC0	; 192
 156:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC00)|(1<<ISC01)|(0<<ISC10)|(0<<ISC11); // INT0 for UPPER  edge detection and INT1 for LOWER edge detection
 158:	85 b7       	in	r24, 0x35	; 53
 15a:	83 60       	ori	r24, 0x03	; 3
 15c:	85 bf       	out	0x35, r24	; 53
	TCCR1B|= (1<<CS10)|(1<<CS12);   // enabling the timer having prescalar 1024
 15e:	8e b5       	in	r24, 0x2e	; 46
 160:	85 60       	ori	r24, 0x05	; 5
 162:	8e bd       	out	0x2e, r24	; 46
	OCR1B = 15625;                                                                                                                                                                                                                                                                       ;
 164:	89 e0       	ldi	r24, 0x09	; 9
 166:	9d e3       	ldi	r25, 0x3D	; 61
 168:	99 bd       	out	0x29, r25	; 41
 16a:	88 bd       	out	0x28, r24	; 40
 16c:	ff cf       	rjmp	.-2      	; 0x16c <main+0x24>

0000016e <__vector_13>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	2c b1       	in	r18, 0x0c	; 12
 186:	88 71       	andi	r24, 0x18	; 24
 188:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <_ZL11UART_RxHead>
 18c:	ef 5f       	subi	r30, 0xFF	; 255
 18e:	ef 71       	andi	r30, 0x1F	; 31
 190:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <_ZL11UART_RxTail>
 194:	e9 17       	cp	r30, r25
 196:	39 f0       	breq	.+14     	; 0x1a6 <__vector_13+0x38>
 198:	e0 93 6d 00 	sts	0x006D, r30	; 0x80006d <_ZL11UART_RxHead>
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	e0 59       	subi	r30, 0x90	; 144
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	20 83       	st	Z, r18
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <__vector_13+0x3a>
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <_ZL16UART_LastRxError>
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <__vector_14>:
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
 1d2:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <_ZL11UART_TxHead>
 1d6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <_ZL11UART_TxTail>
 1da:	98 17       	cp	r25, r24
 1dc:	61 f0       	breq	.+24     	; 0x1f6 <__vector_14+0x36>
 1de:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <_ZL11UART_TxTail>
 1e2:	ef 5f       	subi	r30, 0xFF	; 255
 1e4:	ef 71       	andi	r30, 0x1F	; 31
 1e6:	e0 93 6e 00 	sts	0x006E, r30	; 0x80006e <_ZL11UART_TxTail>
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	e0 57       	subi	r30, 0x70	; 112
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	80 81       	ld	r24, Z
 1f2:	8c b9       	out	0x0c, r24	; 12
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <__vector_14+0x38>
 1f6:	55 98       	cbi	0x0a, 5	; 10
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <_Z9uart_initj>:
 20a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <_ZL11UART_TxHead>
 20e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <_ZL11UART_TxTail>
 212:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <_ZL11UART_RxHead>
 216:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <_ZL11UART_RxTail>
 21a:	99 23       	and	r25, r25
 21c:	1c f4       	brge	.+6      	; 0x224 <_Z9uart_initj+0x1a>
 21e:	22 e0       	ldi	r18, 0x02	; 2
 220:	2b b9       	out	0x0b, r18	; 11
 222:	9f 77       	andi	r25, 0x7F	; 127
 224:	90 bd       	out	0x20, r25	; 32
 226:	89 b9       	out	0x09, r24	; 9
 228:	88 e9       	ldi	r24, 0x98	; 152
 22a:	8a b9       	out	0x0a, r24	; 10
 22c:	86 e8       	ldi	r24, 0x86	; 134
 22e:	80 bd       	out	0x20, r24	; 32
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	80 bd       	out	0x20, r24	; 32
 234:	08 95       	ret

00000236 <_Z9uart_putch>:
 236:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <_ZL11UART_TxHead>
 23a:	2f 5f       	subi	r18, 0xFF	; 255
 23c:	2f 71       	andi	r18, 0x1F	; 31
 23e:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <_ZL11UART_TxTail>
 242:	29 17       	cp	r18, r25
 244:	e1 f3       	breq	.-8      	; 0x23e <_Z9uart_putch+0x8>
 246:	e2 2f       	mov	r30, r18
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	e0 57       	subi	r30, 0x70	; 112
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	80 83       	st	Z, r24
 250:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <_ZL11UART_TxHead>
 254:	55 9a       	sbi	0x0a, 5	; 10
 256:	08 95       	ret

00000258 <_Z9uart_putsPKc>:
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
 25e:	88 81       	ld	r24, Y
 260:	88 23       	and	r24, r24
 262:	31 f0       	breq	.+12     	; 0x270 <_Z9uart_putsPKc+0x18>
 264:	21 96       	adiw	r28, 0x01	; 1
 266:	0e 94 1b 01 	call	0x236	; 0x236 <_Z9uart_putch>
 26a:	89 91       	ld	r24, Y+
 26c:	81 11       	cpse	r24, r1
 26e:	fb cf       	rjmp	.-10     	; 0x266 <_Z9uart_putsPKc+0xe>
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <_Z11uart_putinti>:
 Purpose:  transmit integer to UART0
 Input:    integer to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putint(int input)
{
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	2f 97       	sbiw	r28, 0x0f	; 15
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 28e:	4a e0       	ldi	r20, 0x0A	; 10
 290:	be 01       	movw	r22, r28
 292:	6f 5f       	subi	r22, 0xFF	; 255
 294:	7f 4f       	sbci	r23, 0xFF	; 255
 296:	0e 94 9b 02 	call	0x536	; 0x536 <__itoa_ncheck>
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	88 23       	and	r24, r24
 29e:	51 f0       	breq	.+20     	; 0x2b4 <_Z11uart_putinti+0x3e>
 2a0:	8e 01       	movw	r16, r28
 2a2:	0e 5f       	subi	r16, 0xFE	; 254
 2a4:	1f 4f       	sbci	r17, 0xFF	; 255
	uart_putc(*s++);
 2a6:	0e 94 1b 01 	call	0x236	; 0x236 <_Z9uart_putch>
void uart_putint(int input)
{
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 2aa:	f8 01       	movw	r30, r16
 2ac:	81 91       	ld	r24, Z+
 2ae:	8f 01       	movw	r16, r30
 2b0:	81 11       	cpse	r24, r1
 2b2:	f9 cf       	rjmp	.-14     	; 0x2a6 <_Z11uart_putinti+0x30>
	uart_putc(*s++);

	}
 2b4:	2f 96       	adiw	r28, 0x0f	; 15
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	08 95       	ret

000002ca <__divsf3>:
 2ca:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__divsf3x>
 2ce:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_round>
 2d2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__fp_pscB>
 2d6:	58 f0       	brcs	.+22     	; 0x2ee <__divsf3+0x24>
 2d8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fp_pscA>
 2dc:	40 f0       	brcs	.+16     	; 0x2ee <__divsf3+0x24>
 2de:	29 f4       	brne	.+10     	; 0x2ea <__divsf3+0x20>
 2e0:	5f 3f       	cpi	r21, 0xFF	; 255
 2e2:	29 f0       	breq	.+10     	; 0x2ee <__divsf3+0x24>
 2e4:	0c 94 4a 02 	jmp	0x494	; 0x494 <__fp_inf>
 2e8:	51 11       	cpse	r21, r1
 2ea:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_szero>
 2ee:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__fp_nan>

000002f2 <__divsf3x>:
 2f2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fp_split3>
 2f6:	68 f3       	brcs	.-38     	; 0x2d2 <__divsf3+0x8>

000002f8 <__divsf3_pse>:
 2f8:	99 23       	and	r25, r25
 2fa:	b1 f3       	breq	.-20     	; 0x2e8 <__divsf3+0x1e>
 2fc:	55 23       	and	r21, r21
 2fe:	91 f3       	breq	.-28     	; 0x2e4 <__divsf3+0x1a>
 300:	95 1b       	sub	r25, r21
 302:	55 0b       	sbc	r21, r21
 304:	bb 27       	eor	r27, r27
 306:	aa 27       	eor	r26, r26
 308:	62 17       	cp	r22, r18
 30a:	73 07       	cpc	r23, r19
 30c:	84 07       	cpc	r24, r20
 30e:	38 f0       	brcs	.+14     	; 0x31e <__divsf3_pse+0x26>
 310:	9f 5f       	subi	r25, 0xFF	; 255
 312:	5f 4f       	sbci	r21, 0xFF	; 255
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	44 1f       	adc	r20, r20
 31a:	aa 1f       	adc	r26, r26
 31c:	a9 f3       	breq	.-22     	; 0x308 <__divsf3_pse+0x10>
 31e:	35 d0       	rcall	.+106    	; 0x38a <__divsf3_pse+0x92>
 320:	0e 2e       	mov	r0, r30
 322:	3a f0       	brmi	.+14     	; 0x332 <__divsf3_pse+0x3a>
 324:	e0 e8       	ldi	r30, 0x80	; 128
 326:	32 d0       	rcall	.+100    	; 0x38c <__divsf3_pse+0x94>
 328:	91 50       	subi	r25, 0x01	; 1
 32a:	50 40       	sbci	r21, 0x00	; 0
 32c:	e6 95       	lsr	r30
 32e:	00 1c       	adc	r0, r0
 330:	ca f7       	brpl	.-14     	; 0x324 <__divsf3_pse+0x2c>
 332:	2b d0       	rcall	.+86     	; 0x38a <__divsf3_pse+0x92>
 334:	fe 2f       	mov	r31, r30
 336:	29 d0       	rcall	.+82     	; 0x38a <__divsf3_pse+0x92>
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	88 1f       	adc	r24, r24
 33e:	bb 1f       	adc	r27, r27
 340:	26 17       	cp	r18, r22
 342:	37 07       	cpc	r19, r23
 344:	48 07       	cpc	r20, r24
 346:	ab 07       	cpc	r26, r27
 348:	b0 e8       	ldi	r27, 0x80	; 128
 34a:	09 f0       	breq	.+2      	; 0x34e <__divsf3_pse+0x56>
 34c:	bb 0b       	sbc	r27, r27
 34e:	80 2d       	mov	r24, r0
 350:	bf 01       	movw	r22, r30
 352:	ff 27       	eor	r31, r31
 354:	93 58       	subi	r25, 0x83	; 131
 356:	5f 4f       	sbci	r21, 0xFF	; 255
 358:	3a f0       	brmi	.+14     	; 0x368 <__divsf3_pse+0x70>
 35a:	9e 3f       	cpi	r25, 0xFE	; 254
 35c:	51 05       	cpc	r21, r1
 35e:	78 f0       	brcs	.+30     	; 0x37e <__divsf3_pse+0x86>
 360:	0c 94 4a 02 	jmp	0x494	; 0x494 <__fp_inf>
 364:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_szero>
 368:	5f 3f       	cpi	r21, 0xFF	; 255
 36a:	e4 f3       	brlt	.-8      	; 0x364 <__divsf3_pse+0x6c>
 36c:	98 3e       	cpi	r25, 0xE8	; 232
 36e:	d4 f3       	brlt	.-12     	; 0x364 <__divsf3_pse+0x6c>
 370:	86 95       	lsr	r24
 372:	77 95       	ror	r23
 374:	67 95       	ror	r22
 376:	b7 95       	ror	r27
 378:	f7 95       	ror	r31
 37a:	9f 5f       	subi	r25, 0xFF	; 255
 37c:	c9 f7       	brne	.-14     	; 0x370 <__divsf3_pse+0x78>
 37e:	88 0f       	add	r24, r24
 380:	91 1d       	adc	r25, r1
 382:	96 95       	lsr	r25
 384:	87 95       	ror	r24
 386:	97 f9       	bld	r25, 7
 388:	08 95       	ret
 38a:	e1 e0       	ldi	r30, 0x01	; 1
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	88 1f       	adc	r24, r24
 392:	bb 1f       	adc	r27, r27
 394:	62 17       	cp	r22, r18
 396:	73 07       	cpc	r23, r19
 398:	84 07       	cpc	r24, r20
 39a:	ba 07       	cpc	r27, r26
 39c:	20 f0       	brcs	.+8      	; 0x3a6 <__divsf3_pse+0xae>
 39e:	62 1b       	sub	r22, r18
 3a0:	73 0b       	sbc	r23, r19
 3a2:	84 0b       	sbc	r24, r20
 3a4:	ba 0b       	sbc	r27, r26
 3a6:	ee 1f       	adc	r30, r30
 3a8:	88 f7       	brcc	.-30     	; 0x38c <__divsf3_pse+0x94>
 3aa:	e0 95       	com	r30
 3ac:	08 95       	ret

000003ae <__fixsfsi>:
 3ae:	0e 94 de 01 	call	0x3bc	; 0x3bc <__fixunssfsi>
 3b2:	68 94       	set
 3b4:	b1 11       	cpse	r27, r1
 3b6:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_szero>
 3ba:	08 95       	ret

000003bc <__fixunssfsi>:
 3bc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fp_splitA>
 3c0:	88 f0       	brcs	.+34     	; 0x3e4 <__fixunssfsi+0x28>
 3c2:	9f 57       	subi	r25, 0x7F	; 127
 3c4:	98 f0       	brcs	.+38     	; 0x3ec <__fixunssfsi+0x30>
 3c6:	b9 2f       	mov	r27, r25
 3c8:	99 27       	eor	r25, r25
 3ca:	b7 51       	subi	r27, 0x17	; 23
 3cc:	b0 f0       	brcs	.+44     	; 0x3fa <__fixunssfsi+0x3e>
 3ce:	e1 f0       	breq	.+56     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	88 1f       	adc	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	1a f0       	brmi	.+6      	; 0x3e0 <__fixunssfsi+0x24>
 3da:	ba 95       	dec	r27
 3dc:	c9 f7       	brne	.-14     	; 0x3d0 <__fixunssfsi+0x14>
 3de:	14 c0       	rjmp	.+40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e0:	b1 30       	cpi	r27, 0x01	; 1
 3e2:	91 f0       	breq	.+36     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e4:	0e 94 94 02 	call	0x528	; 0x528 <__fp_zero>
 3e8:	b1 e0       	ldi	r27, 0x01	; 1
 3ea:	08 95       	ret
 3ec:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_zero>
 3f0:	67 2f       	mov	r22, r23
 3f2:	78 2f       	mov	r23, r24
 3f4:	88 27       	eor	r24, r24
 3f6:	b8 5f       	subi	r27, 0xF8	; 248
 3f8:	39 f0       	breq	.+14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fa:	b9 3f       	cpi	r27, 0xF9	; 249
 3fc:	cc f3       	brlt	.-14     	; 0x3f0 <__fixunssfsi+0x34>
 3fe:	86 95       	lsr	r24
 400:	77 95       	ror	r23
 402:	67 95       	ror	r22
 404:	b3 95       	inc	r27
 406:	d9 f7       	brne	.-10     	; 0x3fe <__fixunssfsi+0x42>
 408:	3e f4       	brtc	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40a:	90 95       	com	r25
 40c:	80 95       	com	r24
 40e:	70 95       	com	r23
 410:	61 95       	neg	r22
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	8f 4f       	sbci	r24, 0xFF	; 255
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	08 95       	ret

0000041a <__floatunsisf>:
 41a:	e8 94       	clt
 41c:	09 c0       	rjmp	.+18     	; 0x430 <__floatsisf+0x12>

0000041e <__floatsisf>:
 41e:	97 fb       	bst	r25, 7
 420:	3e f4       	brtc	.+14     	; 0x430 <__floatsisf+0x12>
 422:	90 95       	com	r25
 424:	80 95       	com	r24
 426:	70 95       	com	r23
 428:	61 95       	neg	r22
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	8f 4f       	sbci	r24, 0xFF	; 255
 42e:	9f 4f       	sbci	r25, 0xFF	; 255
 430:	99 23       	and	r25, r25
 432:	a9 f0       	breq	.+42     	; 0x45e <__floatsisf+0x40>
 434:	f9 2f       	mov	r31, r25
 436:	96 e9       	ldi	r25, 0x96	; 150
 438:	bb 27       	eor	r27, r27
 43a:	93 95       	inc	r25
 43c:	f6 95       	lsr	r31
 43e:	87 95       	ror	r24
 440:	77 95       	ror	r23
 442:	67 95       	ror	r22
 444:	b7 95       	ror	r27
 446:	f1 11       	cpse	r31, r1
 448:	f8 cf       	rjmp	.-16     	; 0x43a <__floatsisf+0x1c>
 44a:	fa f4       	brpl	.+62     	; 0x48a <__floatsisf+0x6c>
 44c:	bb 0f       	add	r27, r27
 44e:	11 f4       	brne	.+4      	; 0x454 <__floatsisf+0x36>
 450:	60 ff       	sbrs	r22, 0
 452:	1b c0       	rjmp	.+54     	; 0x48a <__floatsisf+0x6c>
 454:	6f 5f       	subi	r22, 0xFF	; 255
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	8f 4f       	sbci	r24, 0xFF	; 255
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	16 c0       	rjmp	.+44     	; 0x48a <__floatsisf+0x6c>
 45e:	88 23       	and	r24, r24
 460:	11 f0       	breq	.+4      	; 0x466 <__floatsisf+0x48>
 462:	96 e9       	ldi	r25, 0x96	; 150
 464:	11 c0       	rjmp	.+34     	; 0x488 <__floatsisf+0x6a>
 466:	77 23       	and	r23, r23
 468:	21 f0       	breq	.+8      	; 0x472 <__floatsisf+0x54>
 46a:	9e e8       	ldi	r25, 0x8E	; 142
 46c:	87 2f       	mov	r24, r23
 46e:	76 2f       	mov	r23, r22
 470:	05 c0       	rjmp	.+10     	; 0x47c <__floatsisf+0x5e>
 472:	66 23       	and	r22, r22
 474:	71 f0       	breq	.+28     	; 0x492 <__floatsisf+0x74>
 476:	96 e8       	ldi	r25, 0x86	; 134
 478:	86 2f       	mov	r24, r22
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	2a f0       	brmi	.+10     	; 0x48a <__floatsisf+0x6c>
 480:	9a 95       	dec	r25
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	88 1f       	adc	r24, r24
 488:	da f7       	brpl	.-10     	; 0x480 <__floatsisf+0x62>
 48a:	88 0f       	add	r24, r24
 48c:	96 95       	lsr	r25
 48e:	87 95       	ror	r24
 490:	97 f9       	bld	r25, 7
 492:	08 95       	ret

00000494 <__fp_inf>:
 494:	97 f9       	bld	r25, 7
 496:	9f 67       	ori	r25, 0x7F	; 127
 498:	80 e8       	ldi	r24, 0x80	; 128
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	08 95       	ret

000004a0 <__fp_nan>:
 4a0:	9f ef       	ldi	r25, 0xFF	; 255
 4a2:	80 ec       	ldi	r24, 0xC0	; 192
 4a4:	08 95       	ret

000004a6 <__fp_pscA>:
 4a6:	00 24       	eor	r0, r0
 4a8:	0a 94       	dec	r0
 4aa:	16 16       	cp	r1, r22
 4ac:	17 06       	cpc	r1, r23
 4ae:	18 06       	cpc	r1, r24
 4b0:	09 06       	cpc	r0, r25
 4b2:	08 95       	ret

000004b4 <__fp_pscB>:
 4b4:	00 24       	eor	r0, r0
 4b6:	0a 94       	dec	r0
 4b8:	12 16       	cp	r1, r18
 4ba:	13 06       	cpc	r1, r19
 4bc:	14 06       	cpc	r1, r20
 4be:	05 06       	cpc	r0, r21
 4c0:	08 95       	ret

000004c2 <__fp_round>:
 4c2:	09 2e       	mov	r0, r25
 4c4:	03 94       	inc	r0
 4c6:	00 0c       	add	r0, r0
 4c8:	11 f4       	brne	.+4      	; 0x4ce <__fp_round+0xc>
 4ca:	88 23       	and	r24, r24
 4cc:	52 f0       	brmi	.+20     	; 0x4e2 <__fp_round+0x20>
 4ce:	bb 0f       	add	r27, r27
 4d0:	40 f4       	brcc	.+16     	; 0x4e2 <__fp_round+0x20>
 4d2:	bf 2b       	or	r27, r31
 4d4:	11 f4       	brne	.+4      	; 0x4da <__fp_round+0x18>
 4d6:	60 ff       	sbrs	r22, 0
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__fp_round+0x20>
 4da:	6f 5f       	subi	r22, 0xFF	; 255
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
 4de:	8f 4f       	sbci	r24, 0xFF	; 255
 4e0:	9f 4f       	sbci	r25, 0xFF	; 255
 4e2:	08 95       	ret

000004e4 <__fp_split3>:
 4e4:	57 fd       	sbrc	r21, 7
 4e6:	90 58       	subi	r25, 0x80	; 128
 4e8:	44 0f       	add	r20, r20
 4ea:	55 1f       	adc	r21, r21
 4ec:	59 f0       	breq	.+22     	; 0x504 <__fp_splitA+0x10>
 4ee:	5f 3f       	cpi	r21, 0xFF	; 255
 4f0:	71 f0       	breq	.+28     	; 0x50e <__fp_splitA+0x1a>
 4f2:	47 95       	ror	r20

000004f4 <__fp_splitA>:
 4f4:	88 0f       	add	r24, r24
 4f6:	97 fb       	bst	r25, 7
 4f8:	99 1f       	adc	r25, r25
 4fa:	61 f0       	breq	.+24     	; 0x514 <__fp_splitA+0x20>
 4fc:	9f 3f       	cpi	r25, 0xFF	; 255
 4fe:	79 f0       	breq	.+30     	; 0x51e <__fp_splitA+0x2a>
 500:	87 95       	ror	r24
 502:	08 95       	ret
 504:	12 16       	cp	r1, r18
 506:	13 06       	cpc	r1, r19
 508:	14 06       	cpc	r1, r20
 50a:	55 1f       	adc	r21, r21
 50c:	f2 cf       	rjmp	.-28     	; 0x4f2 <__fp_split3+0xe>
 50e:	46 95       	lsr	r20
 510:	f1 df       	rcall	.-30     	; 0x4f4 <__fp_splitA>
 512:	08 c0       	rjmp	.+16     	; 0x524 <__fp_splitA+0x30>
 514:	16 16       	cp	r1, r22
 516:	17 06       	cpc	r1, r23
 518:	18 06       	cpc	r1, r24
 51a:	99 1f       	adc	r25, r25
 51c:	f1 cf       	rjmp	.-30     	; 0x500 <__fp_splitA+0xc>
 51e:	86 95       	lsr	r24
 520:	71 05       	cpc	r23, r1
 522:	61 05       	cpc	r22, r1
 524:	08 94       	sec
 526:	08 95       	ret

00000528 <__fp_zero>:
 528:	e8 94       	clt

0000052a <__fp_szero>:
 52a:	bb 27       	eor	r27, r27
 52c:	66 27       	eor	r22, r22
 52e:	77 27       	eor	r23, r23
 530:	cb 01       	movw	r24, r22
 532:	97 f9       	bld	r25, 7
 534:	08 95       	ret

00000536 <__itoa_ncheck>:
 536:	bb 27       	eor	r27, r27
 538:	4a 30       	cpi	r20, 0x0A	; 10
 53a:	31 f4       	brne	.+12     	; 0x548 <__itoa_ncheck+0x12>
 53c:	99 23       	and	r25, r25
 53e:	22 f4       	brpl	.+8      	; 0x548 <__itoa_ncheck+0x12>
 540:	bd e2       	ldi	r27, 0x2D	; 45
 542:	90 95       	com	r25
 544:	81 95       	neg	r24
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__utoa_common>

0000054c <__utoa_ncheck>:
 54c:	bb 27       	eor	r27, r27

0000054e <__utoa_common>:
 54e:	fb 01       	movw	r30, r22
 550:	55 27       	eor	r21, r21
 552:	aa 27       	eor	r26, r26
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	aa 1f       	adc	r26, r26
 55a:	a4 17       	cp	r26, r20
 55c:	10 f0       	brcs	.+4      	; 0x562 <__utoa_common+0x14>
 55e:	a4 1b       	sub	r26, r20
 560:	83 95       	inc	r24
 562:	50 51       	subi	r21, 0x10	; 16
 564:	b9 f7       	brne	.-18     	; 0x554 <__utoa_common+0x6>
 566:	a0 5d       	subi	r26, 0xD0	; 208
 568:	aa 33       	cpi	r26, 0x3A	; 58
 56a:	08 f0       	brcs	.+2      	; 0x56e <__utoa_common+0x20>
 56c:	a9 5d       	subi	r26, 0xD9	; 217
 56e:	a1 93       	st	Z+, r26
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	79 f7       	brne	.-34     	; 0x552 <__utoa_common+0x4>
 574:	b1 11       	cpse	r27, r1
 576:	b1 93       	st	Z+, r27
 578:	11 92       	st	Z+, r1
 57a:	cb 01       	movw	r24, r22
 57c:	0c 94 c0 02 	jmp	0x580	; 0x580 <strrev>

00000580 <strrev>:
 580:	dc 01       	movw	r26, r24
 582:	fc 01       	movw	r30, r24
 584:	67 2f       	mov	r22, r23
 586:	71 91       	ld	r23, Z+
 588:	77 23       	and	r23, r23
 58a:	e1 f7       	brne	.-8      	; 0x584 <strrev+0x4>
 58c:	32 97       	sbiw	r30, 0x02	; 2
 58e:	04 c0       	rjmp	.+8      	; 0x598 <strrev+0x18>
 590:	7c 91       	ld	r23, X
 592:	6d 93       	st	X+, r22
 594:	70 83       	st	Z, r23
 596:	62 91       	ld	r22, -Z
 598:	ae 17       	cp	r26, r30
 59a:	bf 07       	cpc	r27, r31
 59c:	c8 f3       	brcs	.-14     	; 0x590 <strrev+0x10>
 59e:	08 95       	ret

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
