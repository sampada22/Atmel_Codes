
stopwatchnew.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000040e  000004a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006e  0080006e  000004b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a8  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000611  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fc  00000000  00000000  00001525  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a8  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041f  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000022c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e7 01 	call	0x3ce	; 0x3ce <main>
  8a:	0c 94 05 02 	jmp	0x40a	; 0x40a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	if(select)
  9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  a2:	88 23       	and	r24, r24
  a4:	39 f0       	breq	.+14     	; 0xb4 <__vector_1+0x22>
	{
		select = 0;
  a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
		sw_min = 0;
  aa:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <sw_min>
		sw_sec = 0;
  ae:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <sw_sec>
  b2:	03 c0       	rjmp	.+6      	; 0xba <__vector_1+0x28>
	}
	else
	select = 1;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	
}
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <update_time>:

void update_time()
{
	count++;
  c6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <count>
  ca:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <count+0x1>
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <count+0x1>
  d4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <count>
	if(count >= count_speed)
  d8:	05 97       	sbiw	r24, 0x05	; 5
  da:	28 f1       	brcs	.+74     	; 0x126 <update_time+0x60>
	{
		sec++;
  dc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <sec>
  e0:	8f 5f       	subi	r24, 0xFF	; 255
		if (sec >= 60)  {sec = 0; min++;}
  e2:	8c 33       	cpi	r24, 0x3C	; 60
  e4:	18 f4       	brcc	.+6      	; 0xec <update_time+0x26>
void update_time()
{
	count++;
	if(count >= count_speed)
	{
		sec++;
  e6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sec>
  ea:	07 c0       	rjmp	.+14     	; 0xfa <update_time+0x34>
		if (sec >= 60)  {sec = 0; min++;}
  ec:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <sec>
  f0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <min>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <min>
		if (min >= 60)  {min = 0; hr++;}
  fa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <min>
  fe:	8c 33       	cpi	r24, 0x3C	; 60
 100:	38 f0       	brcs	.+14     	; 0x110 <update_time+0x4a>
 102:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <min>
 106:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <hr>
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <hr>
		if (hr > 12)  hr = 1;
 110:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <hr>
 114:	8d 30       	cpi	r24, 0x0D	; 13
 116:	18 f0       	brcs	.+6      	; 0x11e <update_time+0x58>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <hr>
		count = 0;
 11e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <count+0x1>
 122:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <count>
 126:	08 95       	ret

00000128 <update_sw>:
	}
}

void update_sw()
{
	sw_count++;
 128:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 12c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x1>
 136:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
	if(sw_count >= count_speed)
 13a:	05 97       	sbiw	r24, 0x05	; 5
 13c:	c8 f0       	brcs	.+50     	; 0x170 <update_sw+0x48>
	{
		sw_sec++;
 13e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <sw_sec>
 142:	8f 5f       	subi	r24, 0xFF	; 255
		if (sw_sec >= 60)  {sw_sec = 0; sw_min++;}
 144:	8c 33       	cpi	r24, 0x3C	; 60
 146:	18 f4       	brcc	.+6      	; 0x14e <update_sw+0x26>
void update_sw()
{
	sw_count++;
	if(sw_count >= count_speed)
	{
		sw_sec++;
 148:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <sw_sec>
 14c:	07 c0       	rjmp	.+14     	; 0x15c <update_sw+0x34>
		if (sw_sec >= 60)  {sw_sec = 0; sw_min++;}
 14e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <sw_sec>
 152:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <sw_min>
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <sw_min>
		if (sw_min >= 60)  sw_min = 0;
 15c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <sw_min>
 160:	8c 33       	cpi	r24, 0x3C	; 60
 162:	10 f0       	brcs	.+4      	; 0x168 <update_sw+0x40>
 164:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <sw_min>
		sw_count = 0;
 168:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__data_end+0x1>
 16c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
 170:	08 95       	ret

00000172 <__vector_10>:
		
	}
}

ISR(TIMER0_COMP_vect)
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	if(select)
 194:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 198:	88 23       	and	r24, r24
 19a:	19 f0       	breq	.+6      	; 0x1a2 <__vector_10+0x30>
	update_time();
 19c:	0e 94 63 00 	call	0xc6	; 0xc6 <update_time>
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <__vector_10+0x38>
	
	else
	{
		update_time();
 1a2:	0e 94 63 00 	call	0xc6	; 0xc6 <update_time>
		update_sw();
 1a6:	0e 94 94 00 	call	0x128	; 0x128 <update_sw>
	}
	
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <display_time>:
		sw_count = 0;
	}
}
void display_time()
{
	if( hr < 10)
 1cc:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <hr>
 1d0:	ea 30       	cpi	r30, 0x0A	; 10
 1d2:	88 f4       	brcc	.+34     	; 0x1f6 <display_time+0x2a>
	{
		disp = segCode[hr];
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ef 59       	subi	r30, 0x9F	; 159
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	80 81       	ld	r24, Z
 1dc:	85 bb       	out	0x15, r24	; 21
		other &= ~(1<<GB);
 1de:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	8f e1       	ldi	r24, 0x1F	; 31
 1e2:	9e e4       	ldi	r25, 0x4E	; 78
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <display_time+0x18>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <display_time+0x1e>
 1ea:	00 00       	nop
		_delay_ms(5);
		other |= (1<<GB);
 1ec:	d9 9a       	sbi	0x1b, 1	; 27
	}
	
	if(hr >= 10)
 1ee:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <hr>
 1f2:	ea 30       	cpi	r30, 0x0A	; 10
 1f4:	78 f1       	brcs	.+94     	; 0x254 <display_time+0x88>
	{
		disp = segCode[hr/10];
 1f6:	8d ec       	ldi	r24, 0xCD	; 205
 1f8:	e8 9f       	mul	r30, r24
 1fa:	e1 2d       	mov	r30, r1
 1fc:	11 24       	eor	r1, r1
 1fe:	e6 95       	lsr	r30
 200:	e6 95       	lsr	r30
 202:	e6 95       	lsr	r30
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ef 59       	subi	r30, 0x9F	; 159
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	90 81       	ld	r25, Z
 20c:	95 bb       	out	0x15, r25	; 21
		other &= ~(1<<GA);
 20e:	d8 98       	cbi	0x1b, 0	; 27
 210:	ef e1       	ldi	r30, 0x1F	; 31
 212:	fe e4       	ldi	r31, 0x4E	; 78
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <display_time+0x48>
 218:	00 c0       	rjmp	.+0      	; 0x21a <display_time+0x4e>
 21a:	00 00       	nop
		_delay_ms(5);
		other |= (1<<GA);
 21c:	d8 9a       	sbi	0x1b, 0	; 27
		
		disp = segCode[hr%10];
 21e:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <hr>
 222:	e8 9f       	mul	r30, r24
 224:	81 2d       	mov	r24, r1
 226:	11 24       	eor	r1, r1
 228:	86 95       	lsr	r24
 22a:	86 95       	lsr	r24
 22c:	86 95       	lsr	r24
 22e:	88 0f       	add	r24, r24
 230:	98 2f       	mov	r25, r24
 232:	99 0f       	add	r25, r25
 234:	99 0f       	add	r25, r25
 236:	89 0f       	add	r24, r25
 238:	e8 1b       	sub	r30, r24
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	ef 59       	subi	r30, 0x9F	; 159
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	80 81       	ld	r24, Z
 242:	85 bb       	out	0x15, r24	; 21
		other &= ~(1<<GB);
 244:	d9 98       	cbi	0x1b, 1	; 27
 246:	8f e1       	ldi	r24, 0x1F	; 31
 248:	9e e4       	ldi	r25, 0x4E	; 78
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <display_time+0x7e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <display_time+0x84>
 250:	00 00       	nop
		_delay_ms(5);
		other |= (1<<GB);
 252:	d9 9a       	sbi	0x1b, 1	; 27
		
	}
	
	if( min < 10)
 254:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <min>
 258:	ea 30       	cpi	r30, 0x0A	; 10
 25a:	38 f5       	brcc	.+78     	; 0x2aa <display_time+0xde>
	{
		disp = segCode[min/10];
 25c:	8d ec       	ldi	r24, 0xCD	; 205
 25e:	e8 9f       	mul	r30, r24
 260:	e1 2d       	mov	r30, r1
 262:	11 24       	eor	r1, r1
 264:	e6 95       	lsr	r30
 266:	e6 95       	lsr	r30
 268:	e6 95       	lsr	r30
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	ef 59       	subi	r30, 0x9F	; 159
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	80 81       	ld	r24, Z
 272:	85 bb       	out	0x15, r24	; 21
		other &= ~(1<<GC);
 274:	da 98       	cbi	0x1b, 2	; 27
 276:	ef e1       	ldi	r30, 0x1F	; 31
 278:	fe e4       	ldi	r31, 0x4E	; 78
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <display_time+0xae>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <display_time+0xb4>
 280:	00 00       	nop
		_delay_ms(5);
		other |= (1<<GC);
 282:	da 9a       	sbi	0x1b, 2	; 27
		
		disp = segCode[min];
 284:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <min>
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	ef 59       	subi	r30, 0x9F	; 159
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	80 81       	ld	r24, Z
 290:	85 bb       	out	0x15, r24	; 21
		other &= ~(1<<GD);
 292:	db 98       	cbi	0x1b, 3	; 27
 294:	8f e1       	ldi	r24, 0x1F	; 31
 296:	9e e4       	ldi	r25, 0x4E	; 78
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <display_time+0xcc>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <display_time+0xd2>
 29e:	00 00       	nop
		_delay_ms(5);
		other |= (1<<GD);
 2a0:	db 9a       	sbi	0x1b, 3	; 27
	}
	
	if(min >= 10)
 2a2:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <min>
 2a6:	ea 30       	cpi	r30, 0x0A	; 10
 2a8:	78 f1       	brcs	.+94     	; 0x308 <display_time+0x13c>
	{
		disp = segCode[min/10];
 2aa:	8d ec       	ldi	r24, 0xCD	; 205
 2ac:	e8 9f       	mul	r30, r24
 2ae:	e1 2d       	mov	r30, r1
 2b0:	11 24       	eor	r1, r1
 2b2:	e6 95       	lsr	r30
 2b4:	e6 95       	lsr	r30
 2b6:	e6 95       	lsr	r30
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ef 59       	subi	r30, 0x9F	; 159
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	90 81       	ld	r25, Z
 2c0:	95 bb       	out	0x15, r25	; 21
		other &= ~(1<<GC);
 2c2:	da 98       	cbi	0x1b, 2	; 27
 2c4:	ef e1       	ldi	r30, 0x1F	; 31
 2c6:	fe e4       	ldi	r31, 0x4E	; 78
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <display_time+0xfc>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <display_time+0x102>
 2ce:	00 00       	nop
		_delay_ms(5);
		other |= (1<<GC);
 2d0:	da 9a       	sbi	0x1b, 2	; 27
		
		disp = segCode[min%10];
 2d2:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <min>
 2d6:	e8 9f       	mul	r30, r24
 2d8:	81 2d       	mov	r24, r1
 2da:	11 24       	eor	r1, r1
 2dc:	86 95       	lsr	r24
 2de:	86 95       	lsr	r24
 2e0:	86 95       	lsr	r24
 2e2:	88 0f       	add	r24, r24
 2e4:	98 2f       	mov	r25, r24
 2e6:	99 0f       	add	r25, r25
 2e8:	99 0f       	add	r25, r25
 2ea:	89 0f       	add	r24, r25
 2ec:	e8 1b       	sub	r30, r24
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	ef 59       	subi	r30, 0x9F	; 159
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	80 81       	ld	r24, Z
 2f6:	85 bb       	out	0x15, r24	; 21
		other &= ~(1<<GD);
 2f8:	db 98       	cbi	0x1b, 3	; 27
 2fa:	8f e1       	ldi	r24, 0x1F	; 31
 2fc:	9e e4       	ldi	r25, 0x4E	; 78
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <display_time+0x132>
 302:	00 c0       	rjmp	.+0      	; 0x304 <display_time+0x138>
 304:	00 00       	nop
		_delay_ms(5);
		other |= (1<<GD);
 306:	db 9a       	sbi	0x1b, 3	; 27
 308:	08 95       	ret

0000030a <display_sw>:
	}
}

void display_sw()
{
	disp = segCode[sw_min/10];
 30a:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <sw_min>
 30e:	8d ec       	ldi	r24, 0xCD	; 205
 310:	e8 9f       	mul	r30, r24
 312:	e1 2d       	mov	r30, r1
 314:	11 24       	eor	r1, r1
 316:	e6 95       	lsr	r30
 318:	e6 95       	lsr	r30
 31a:	e6 95       	lsr	r30
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ef 59       	subi	r30, 0x9F	; 159
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	90 81       	ld	r25, Z
 324:	95 bb       	out	0x15, r25	; 21
	other &= ~(1<<GA);
 326:	d8 98       	cbi	0x1b, 0	; 27
 328:	ef e1       	ldi	r30, 0x1F	; 31
 32a:	fe e4       	ldi	r31, 0x4E	; 78
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <display_sw+0x22>
 330:	00 c0       	rjmp	.+0      	; 0x332 <display_sw+0x28>
 332:	00 00       	nop
	_delay_ms(5);
	other |= (1<<GA);
 334:	d8 9a       	sbi	0x1b, 0	; 27
	
	disp = segCode[sw_min%10];
 336:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <sw_min>
 33a:	e8 9f       	mul	r30, r24
 33c:	91 2d       	mov	r25, r1
 33e:	11 24       	eor	r1, r1
 340:	96 95       	lsr	r25
 342:	96 95       	lsr	r25
 344:	96 95       	lsr	r25
 346:	99 0f       	add	r25, r25
 348:	29 2f       	mov	r18, r25
 34a:	22 0f       	add	r18, r18
 34c:	22 0f       	add	r18, r18
 34e:	92 0f       	add	r25, r18
 350:	e9 1b       	sub	r30, r25
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	ef 59       	subi	r30, 0x9F	; 159
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	90 81       	ld	r25, Z
 35a:	95 bb       	out	0x15, r25	; 21
	other &= ~(1<<GB);
 35c:	d9 98       	cbi	0x1b, 1	; 27
 35e:	ef e1       	ldi	r30, 0x1F	; 31
 360:	fe e4       	ldi	r31, 0x4E	; 78
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <display_sw+0x58>
 366:	00 c0       	rjmp	.+0      	; 0x368 <display_sw+0x5e>
 368:	00 00       	nop
	_delay_ms(5);
	other |= (1<<GB);
 36a:	d9 9a       	sbi	0x1b, 1	; 27
	
	
	disp = segCode[sw_sec/10];
 36c:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <sw_sec>
 370:	e8 9f       	mul	r30, r24
 372:	e1 2d       	mov	r30, r1
 374:	11 24       	eor	r1, r1
 376:	e6 95       	lsr	r30
 378:	e6 95       	lsr	r30
 37a:	e6 95       	lsr	r30
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	ef 59       	subi	r30, 0x9F	; 159
 380:	ff 4f       	sbci	r31, 0xFF	; 255
 382:	90 81       	ld	r25, Z
 384:	95 bb       	out	0x15, r25	; 21
	other &= ~(1<<GC);
 386:	da 98       	cbi	0x1b, 2	; 27
 388:	ef e1       	ldi	r30, 0x1F	; 31
 38a:	fe e4       	ldi	r31, 0x4E	; 78
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <display_sw+0x82>
 390:	00 c0       	rjmp	.+0      	; 0x392 <display_sw+0x88>
 392:	00 00       	nop
	_delay_ms(5);
	other |= (1<<GC);
 394:	da 9a       	sbi	0x1b, 2	; 27
	
	disp = segCode[sw_sec%10];
 396:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <sw_sec>
 39a:	e8 9f       	mul	r30, r24
 39c:	81 2d       	mov	r24, r1
 39e:	11 24       	eor	r1, r1
 3a0:	86 95       	lsr	r24
 3a2:	86 95       	lsr	r24
 3a4:	86 95       	lsr	r24
 3a6:	88 0f       	add	r24, r24
 3a8:	98 2f       	mov	r25, r24
 3aa:	99 0f       	add	r25, r25
 3ac:	99 0f       	add	r25, r25
 3ae:	89 0f       	add	r24, r25
 3b0:	e8 1b       	sub	r30, r24
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	ef 59       	subi	r30, 0x9F	; 159
 3b6:	ff 4f       	sbci	r31, 0xFF	; 255
 3b8:	80 81       	ld	r24, Z
 3ba:	85 bb       	out	0x15, r24	; 21
	other &= ~(1<<GD);
 3bc:	db 98       	cbi	0x1b, 3	; 27
 3be:	8f e1       	ldi	r24, 0x1F	; 31
 3c0:	9e e4       	ldi	r25, 0x4E	; 78
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <display_sw+0xb8>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <display_sw+0xbe>
 3c8:	00 00       	nop
	_delay_ms(5);
	other |= (1<<GD);
 3ca:	db 9a       	sbi	0x1b, 3	; 27
 3cc:	08 95       	ret

000003ce <main>:


int main(void)
{
	//Direction Initialization
	DDRA = 0xFF;
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 3d2:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
 3d4:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 3d6:	84 bb       	out	0x14, r24	; 20
	
	//Pin Initialization
	disp = 0;
 3d8:	15 ba       	out	0x15, r1	; 21
	other = 0b0001111;
 3da:	8f e0       	ldi	r24, 0x0F	; 15
 3dc:	8b bb       	out	0x1b, r24	; 27
	PORTD |= 1<<PIND2;
 3de:	92 9a       	sbi	0x12, 2	; 18
	
	
	TCCR0 = 1<<WGM01;		//set CTC mode
 3e0:	88 e0       	ldi	r24, 0x08	; 8
 3e2:	83 bf       	out	0x33, r24	; 51
	OCR0 = 125;				//sets the compare value
 3e4:	8d e7       	ldi	r24, 0x7D	; 125
 3e6:	8c bf       	out	0x3c, r24	; 60
	TIMSK = 1<<OCIE0;		//enables the counter compare match flag
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	89 bf       	out	0x39, r24	; 57
	
	GICR = 1<<INT0;			//Set PIND2 as external interrupt pin
 3ec:	80 e4       	ldi	r24, 0x40	; 64
 3ee:	8b bf       	out	0x3b, r24	; 59
	sei();					//enables the interrupt function
 3f0:	78 94       	sei
	
	TCCR0 = 1<<CS02;		//Set the pre-scalar and start the counter
 3f2:	84 e0       	ldi	r24, 0x04	; 4
 3f4:	83 bf       	out	0x33, r24	; 51
	
	while (1)
	{
		if(select)
 3f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 3fa:	88 23       	and	r24, r24
 3fc:	19 f0       	breq	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		display_time();
 3fe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <display_time>
 402:	f9 cf       	rjmp	.-14     	; 0x3f6 <main+0x28>
		
		else
		display_sw();
 404:	0e 94 85 01 	call	0x30a	; 0x30a <display_sw>
 408:	f6 cf       	rjmp	.-20     	; 0x3f6 <main+0x28>

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
