
rpm_for_pov.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000060c  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000566  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000306  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035d  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e7  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	77 c0       	rjmp	.+238    	; 0xf4 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	95 c0       	rjmp	.+298    	; 0x13c <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	91 c0       	rjmp	.+290    	; 0x168 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#define LED8 PINC1


int main(void)
{
	DDRB |=0xFF;
  48:	87 b3       	in	r24, 0x17	; 23
  4a:	8f ef       	ldi	r24, 0xFF	; 255
  4c:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0xFF;
  4e:	94 b3       	in	r25, 0x14	; 20
  50:	84 bb       	out	0x14, r24	; 20
	DDRD |= 0x20;
  52:	8d 9a       	sbi	0x11, 5	; 17
	PORTD |= 0x20;
  54:	95 9a       	sbi	0x12, 5	; 18
    sei();
  56:	78 94       	sei
	TCCR1B |= (1<<CS12)|(1<<CS10);
  58:	8e b5       	in	r24, 0x2e	; 46
  5a:	85 60       	ori	r24, 0x05	; 5
  5c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<WGM12);
  5e:	8e b5       	in	r24, 0x2e	; 46
  60:	88 60       	ori	r24, 0x08	; 8
  62:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<TOIE1);
  64:	89 b7       	in	r24, 0x39	; 57
  66:	84 60       	ori	r24, 0x04	; 4
  68:	89 bf       	out	0x39, r24	; 57
	OCR1A = 15625;
  6a:	89 e0       	ldi	r24, 0x09	; 9
  6c:	9d e3       	ldi	r25, 0x3D	; 61
  6e:	9b bd       	out	0x2b, r25	; 43
  70:	8a bd       	out	0x2a, r24	; 42
	MCUCR |= (1<<ISC10)|(1<<ISC11);
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8c 60       	ori	r24, 0x0C	; 12
  76:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT1);
  78:	8b b7       	in	r24, 0x3b	; 59
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	8b bf       	out	0x3b, r24	; 59
	
    while (1) 
    {
		PORTC |= (0<<PINC1);
  7e:	85 b3       	in	r24, 0x15	; 21
  80:	85 bb       	out	0x15, r24	; 21
		if (rps == 1){
  82:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  86:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	09 f4       	brne	.+2      	; 0x90 <main+0x48>
			PORTB |= (1<<PINB1);
  8e:	c1 9a       	sbi	0x18, 1	; 24
		}
		if (rps == 2){
  90:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  94:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  98:	02 97       	sbiw	r24, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <main+0x56>
			PORTB |= (1<<PINB2);
  9c:	c2 9a       	sbi	0x18, 2	; 24
		}
		if (rps == 3){
  9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  a6:	03 97       	sbiw	r24, 0x03	; 3
  a8:	09 f4       	brne	.+2      	; 0xac <main+0x64>
			PORTB |= (1<<PINB3);
  aa:	c3 9a       	sbi	0x18, 3	; 24
		}
		if (rps == 4){
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  b0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  b4:	04 97       	sbiw	r24, 0x04	; 4
  b6:	09 f4       	brne	.+2      	; 0xba <main+0x72>
			PORTB |= (1<<PINB4);
  b8:	c4 9a       	sbi	0x18, 4	; 24
		}
		if (rps == 5){
  ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  be:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  c2:	05 97       	sbiw	r24, 0x05	; 5
  c4:	09 f4       	brne	.+2      	; 0xc8 <main+0x80>
			PORTC |=(1<<PINC4);
  c6:	ac 9a       	sbi	0x15, 4	; 21
		}
		if (rps == 6){
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  cc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  d0:	06 97       	sbiw	r24, 0x06	; 6
  d2:	09 f4       	brne	.+2      	; 0xd6 <main+0x8e>
			PORTC |= (1<<PINC3);
  d4:	ab 9a       	sbi	0x15, 3	; 21
		}
		if (rps == 7){
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  da:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  de:	07 97       	sbiw	r24, 0x07	; 7
  e0:	09 f4       	brne	.+2      	; 0xe4 <main+0x9c>
			PORTC |= (1<<PINC2);
  e2:	aa 9a       	sbi	0x15, 2	; 21
		}
		if (rps ==8){
  e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  ec:	08 97       	sbiw	r24, 0x08	; 8
  ee:	39 f6       	brne	.-114    	; 0x7e <main+0x36>
			PORTC |=(1<<PINC1);
  f0:	a9 9a       	sbi	0x15, 1	; 21
  f2:	c5 cf       	rjmp	.-118    	; 0x7e <main+0x36>

000000f4 <__vector_2>:
		}
    }
}
ISR (INT1_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
	PORTC|= (1<<PINC2);
 104:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	81 ee       	ldi	r24, 0xE1	; 225
 10a:	94 e0       	ldi	r25, 0x04	; 4
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <__vector_2+0x18>
 114:	00 c0       	rjmp	.+0      	; 0x116 <__vector_2+0x22>
 116:	00 00       	nop
	_delay_ms (100);
	PORTC &= ~(1<<PINC2);
 118:	aa 98       	cbi	0x15, 2	; 21
 		count ++;
 11a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count>
 11e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <count+0x1>
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <count+0x1>
 128:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count>
//}
	
	// if (rps == 9){
		// PORTB 
	 //}
}
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_8>:
//}
ISR (TIMER1_OVF_vect){
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
	rps = count;
 14a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count>
 14e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <count+0x1>
 152:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 156:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
