
PWM generation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b3  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052a  00000000  00000000  00000777  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001df  00000000  00000000  00000ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000313  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000011b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
{
	uint16_t duty_cycle = 50; 
	int P_Scale;
	int required_frequency;
	
    DDRD|=(1<<PIND5); 
  7c:	8d 9a       	sbi	0x11, 5	; 17
    
	TCCR1A|= (1<<COM1A1)|(1<<WGM11);
  7e:	8f b5       	in	r24, 0x2f	; 47
  80:	82 68       	ori	r24, 0x82	; 130
  82:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);//setting the prescalar to 64
  84:	8e b5       	in	r24, 0x2e	; 46
  86:	8b 61       	ori	r24, 0x1B	; 27
  88:	8e bd       	out	0x2e, r24	; 46
	
	P_Scale = 64;
	required_frequency=4000;
	
	ICR1= (F_CPU/P_Scale*required_frequency)-1;  //{This value can go upto 65535(as 16 bit register) and the count is given by {(F_CPU/P_Scale*required frequency)-1}}
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	99 ec       	ldi	r25, 0xC9	; 201
  8e:	97 bd       	out	0x27, r25	; 39
  90:	86 bd       	out	0x26, r24	; 38
	OCR1A =0;
  92:	1b bc       	out	0x2b, r1	; 43
  94:	1a bc       	out	0x2a, r1	; 42
    while (1) 
    {
	
	OCR1A = (ICR1/100)*duty_cycle;
  96:	42 e3       	ldi	r20, 0x32	; 50
  98:	26 b5       	in	r18, 0x26	; 38
  9a:	37 b5       	in	r19, 0x27	; 39
  9c:	36 95       	lsr	r19
  9e:	27 95       	ror	r18
  a0:	36 95       	lsr	r19
  a2:	27 95       	ror	r18
  a4:	ab e7       	ldi	r26, 0x7B	; 123
  a6:	b4 e1       	ldi	r27, 0x14	; 20
  a8:	0e 94 60 00 	call	0xc0	; 0xc0 <__umulhisi3>
  ac:	96 95       	lsr	r25
  ae:	87 95       	ror	r24
  b0:	48 9f       	mul	r20, r24
  b2:	90 01       	movw	r18, r0
  b4:	49 9f       	mul	r20, r25
  b6:	30 0d       	add	r19, r0
  b8:	11 24       	eor	r1, r1
  ba:	3b bd       	out	0x2b, r19	; 43
  bc:	2a bd       	out	0x2a, r18	; 42
  be:	ec cf       	rjmp	.-40     	; 0x98 <main+0x1c>

000000c0 <__umulhisi3>:
  c0:	a2 9f       	mul	r26, r18
  c2:	b0 01       	movw	r22, r0
  c4:	b3 9f       	mul	r27, r19
  c6:	c0 01       	movw	r24, r0
  c8:	a3 9f       	mul	r26, r19
  ca:	70 0d       	add	r23, r0
  cc:	81 1d       	adc	r24, r1
  ce:	11 24       	eor	r1, r1
  d0:	91 1d       	adc	r25, r1
  d2:	b2 9f       	mul	r27, r18
  d4:	70 0d       	add	r23, r0
  d6:	81 1d       	adc	r24, r1
  d8:	11 24       	eor	r1, r1
  da:	91 1d       	adc	r25, r1
  dc:	08 95       	ret

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
