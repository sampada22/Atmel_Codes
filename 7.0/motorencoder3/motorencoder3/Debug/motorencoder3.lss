
motorencoder3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001b0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  0080006e  0080006e  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a24  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000782  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ff  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000018f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f2  00000000  00000000  00001f36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_13>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3b       	cpi	r26, 0xB3	; 179
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define F_CPU 16000000UL
#define BAUD_RATE 9600

int main(void)
{
	uart_init(UART_BAUD_SELECT(BAUD_RATE,F_CPU));
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 a0 00 	call	0x140	; 0x140 <_Z9uart_initj>
	uart_puts("MOTORENCODER");
  9a:	80 e6       	ldi	r24, 0x60	; 96
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z9uart_putsPKc>
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x10>

000000a4 <__vector_13>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	2c b1       	in	r18, 0x0c	; 12
  bc:	88 71       	andi	r24, 0x18	; 24
  be:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <_ZL11UART_RxHead>
  c2:	ef 5f       	subi	r30, 0xFF	; 255
  c4:	ef 71       	andi	r30, 0x1F	; 31
  c6:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <_ZL11UART_RxTail>
  ca:	e9 17       	cp	r30, r25
  cc:	39 f0       	breq	.+14     	; 0xdc <__vector_13+0x38>
  ce:	e0 93 70 00 	sts	0x0070, r30	; 0x800070 <_ZL11UART_RxHead>
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	ed 58       	subi	r30, 0x8D	; 141
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	20 83       	st	Z, r18
  da:	01 c0       	rjmp	.+2      	; 0xde <__vector_13+0x3a>
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <__vector_14>:
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
 108:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <_ZL11UART_TxHead>
 10c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <_ZL11UART_TxTail>
 110:	98 17       	cp	r25, r24
 112:	61 f0       	breq	.+24     	; 0x12c <__vector_14+0x36>
 114:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <_ZL11UART_TxTail>
 118:	ef 5f       	subi	r30, 0xFF	; 255
 11a:	ef 71       	andi	r30, 0x1F	; 31
 11c:	e0 93 71 00 	sts	0x0071, r30	; 0x800071 <_ZL11UART_TxTail>
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ed 56       	subi	r30, 0x6D	; 109
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	80 81       	ld	r24, Z
 128:	8c b9       	out	0x0c, r24	; 12
 12a:	01 c0       	rjmp	.+2      	; 0x12e <__vector_14+0x38>
 12c:	55 98       	cbi	0x0a, 5	; 10
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <_Z9uart_initj>:
 140:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <_ZL11UART_TxHead>
 144:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <_ZL11UART_TxTail>
 148:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <_ZL11UART_RxHead>
 14c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <_ZL11UART_RxTail>
 150:	99 23       	and	r25, r25
 152:	1c f4       	brge	.+6      	; 0x15a <_Z9uart_initj+0x1a>
 154:	22 e0       	ldi	r18, 0x02	; 2
 156:	2b b9       	out	0x0b, r18	; 11
 158:	9f 77       	andi	r25, 0x7F	; 127
 15a:	90 bd       	out	0x20, r25	; 32
 15c:	89 b9       	out	0x09, r24	; 9
 15e:	88 e9       	ldi	r24, 0x98	; 152
 160:	8a b9       	out	0x0a, r24	; 10
 162:	86 e8       	ldi	r24, 0x86	; 134
 164:	80 bd       	out	0x20, r24	; 32
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	80 bd       	out	0x20, r24	; 32
 16a:	08 95       	ret

0000016c <_Z9uart_putch>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 16c:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <_ZL11UART_TxHead>
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 174:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <_ZL11UART_TxTail>
 178:	29 17       	cp	r18, r25
 17a:	e1 f3       	breq	.-8      	; 0x174 <_Z9uart_putch+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 17c:	e2 2f       	mov	r30, r18
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ed 56       	subi	r30, 0x6D	; 109
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 186:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <_ZL11UART_TxHead>

    /* enable UDRE interrupt */
    UART_CONTROL    |= _BV(UART_UDRIE);
 18a:	55 9a       	sbi	0x0a, 5	; 10
 18c:	08 95       	ret

0000018e <_Z9uart_putsPKc>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	ec 01       	movw	r28, r24
    while (*s) 
 194:	88 81       	ld	r24, Y
 196:	88 23       	and	r24, r24
 198:	31 f0       	breq	.+12     	; 0x1a6 <_Z9uart_putsPKc+0x18>
 19a:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 19c:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z9uart_putch>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 1a0:	89 91       	ld	r24, Y+
 1a2:	81 11       	cpse	r24, r1
 1a4:	fb cf       	rjmp	.-10     	; 0x19c <_Z9uart_putsPKc+0xe>
      uart_putc(*s++);

}/* uart_puts */
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
