
PWM and motor control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000593  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000515  00000000  00000000  00000747  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e1  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
	
   uint16_t duty_cycle =50;
   int P_Scale;
   int required_frequency;
   DDRD|= (1<<PIND5);                 //OC1Ai.e. PWM OUTPUT
  6c:	8d 9a       	sbi	0x11, 5	; 17
   
   TCCR1A |=(1<<COM1A1)|(1<<WGM11);   //non-inverting mode
  6e:	8f b5       	in	r24, 0x2f	; 47
  70:	82 68       	ori	r24, 0x82	; 130
  72:	8f bd       	out	0x2f, r24	; 47
   TCCR1B |=(1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11); //prescalar of 64 and fast PWM mode
  74:	8e b5       	in	r24, 0x2e	; 46
  76:	8b 61       	ori	r24, 0x1B	; 27
  78:	8e bd       	out	0x2e, r24	; 46
 
    P_Scale = 64;
	required_frequency = 4000;
	ICR1 = (F_CPU/P_Scale*required_frequency)-1;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	99 ec       	ldi	r25, 0xC9	; 201
  7e:	97 bd       	out	0x27, r25	; 39
  80:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;
  82:	1b bc       	out	0x2b, r1	; 43
  84:	1a bc       	out	0x2a, r1	; 42
	
    while (1) 
    {
		OCR1A = (ICR1/100)*duty_cycle;
  86:	42 e3       	ldi	r20, 0x32	; 50
  88:	26 b5       	in	r18, 0x26	; 38
  8a:	37 b5       	in	r19, 0x27	; 39
  8c:	36 95       	lsr	r19
  8e:	27 95       	ror	r18
  90:	36 95       	lsr	r19
  92:	27 95       	ror	r18
  94:	ab e7       	ldi	r26, 0x7B	; 123
  96:	b4 e1       	ldi	r27, 0x14	; 20
  98:	0e 94 58 00 	call	0xb0	; 0xb0 <__umulhisi3>
  9c:	96 95       	lsr	r25
  9e:	87 95       	ror	r24
  a0:	48 9f       	mul	r20, r24
  a2:	90 01       	movw	r18, r0
  a4:	49 9f       	mul	r20, r25
  a6:	30 0d       	add	r19, r0
  a8:	11 24       	eor	r1, r1
  aa:	3b bd       	out	0x2b, r19	; 43
  ac:	2a bd       	out	0x2a, r18	; 42
  ae:	ec cf       	rjmp	.-40     	; 0x88 <main+0x1c>

000000b0 <__umulhisi3>:
  b0:	a2 9f       	mul	r26, r18
  b2:	b0 01       	movw	r22, r0
  b4:	b3 9f       	mul	r27, r19
  b6:	c0 01       	movw	r24, r0
  b8:	a3 9f       	mul	r26, r19
  ba:	70 0d       	add	r23, r0
  bc:	81 1d       	adc	r24, r1
  be:	11 24       	eor	r1, r1
  c0:	91 1d       	adc	r25, r1
  c2:	b2 9f       	mul	r27, r18
  c4:	70 0d       	add	r23, r0
  c6:	81 1d       	adc	r24, r1
  c8:	11 24       	eor	r1, r1
  ca:	91 1d       	adc	r25, r1
  cc:	08 95       	ret

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
