
pov_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000018e  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006e  0080006e  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000696  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000595  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ea  00000000  00000000  00000eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000389  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018f  00000000  00000000  000015fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e8       	ldi	r30, 0x8E	; 142
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ae e6       	ldi	r26, 0x6E	; 110
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 37       	cpi	r26, 0x70	; 112
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	7c d0       	rcall	.+248    	; 0x152 <main>
  5a:	97 c0       	rjmp	.+302    	; 0x18a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_6>:
		
		
		
    }
}
ISR(TIMER1_COMPA_vect){
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
	flag = 1;
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x1>
  74:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
	cli();
  78:	f8 94       	cli
}
  7a:	9f 91       	pop	r25
  7c:	8f 91       	pop	r24
  7e:	0f 90       	pop	r0
  80:	0f be       	out	0x3f, r0	; 63
  82:	0f 90       	pop	r0
  84:	1f 90       	pop	r1
  86:	18 95       	reti

00000088 <_Z13display_firstv>:

void display_first(){
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	2e 97       	sbiw	r28, 0x0e	; 14
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	f8 94       	cli
  96:	de bf       	out	0x3e, r29	; 62
  98:	0f be       	out	0x3f, r0	; 63
  9a:	cd bf       	out	0x3d, r28	; 61
	int i;
	int af[]={0x02,0x02,0x02,0x02,0x02,0x02,0x1E};
  9c:	8e e0       	ldi	r24, 0x0E	; 14
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	de 01       	movw	r26, r28
  a4:	11 96       	adiw	r26, 0x01	; 1
  a6:	01 90       	ld	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	8a 95       	dec	r24
  ac:	e1 f7       	brne	.-8      	; 0xa6 <_Z13display_firstv+0x1e>
  ae:	fe 01       	movw	r30, r28
  b0:	31 96       	adiw	r30, 0x01	; 1
  b2:	9e 01       	movw	r18, r28
  b4:	2f 5e       	subi	r18, 0xEF	; 239
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
		for (i=0;i<8;i++){
			PORTB|= af[i];
  b8:	98 b3       	in	r25, 0x18	; 24
  ba:	80 81       	ld	r24, Z
  bc:	32 96       	adiw	r30, 0x02	; 2
  be:	89 2b       	or	r24, r25
  c0:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	8f e3       	ldi	r24, 0x3F	; 63
  c4:	9c e9       	ldi	r25, 0x9C	; 156
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <_Z13display_firstv+0x3e>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_Z13display_firstv+0x44>
  cc:	00 00       	nop
}

void display_first(){
	int i;
	int af[]={0x02,0x02,0x02,0x02,0x02,0x02,0x1E};
		for (i=0;i<8;i++){
  ce:	e2 17       	cp	r30, r18
  d0:	f3 07       	cpc	r31, r19
  d2:	91 f7       	brne	.-28     	; 0xb8 <_Z13display_firstv+0x30>
			PORTB|= af[i];
			_delay_ms(10);
		}
	}
  d4:	2e 96       	adiw	r28, 0x0e	; 14
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <_Z14display_secondv>:
	void display_second(){
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	2e 97       	sbiw	r28, 0x0e	; 14
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	f8 94       	cli
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	cd bf       	out	0x3d, r28	; 61
		int j;
		int al[]={0x00,0x00,0x00,0x00,0x00,0x00,0x1E};
  fa:	1a 82       	std	Y+2, r1	; 0x02
  fc:	19 82       	std	Y+1, r1	; 0x01
  fe:	1c 82       	std	Y+4, r1	; 0x04
 100:	1b 82       	std	Y+3, r1	; 0x03
 102:	1e 82       	std	Y+6, r1	; 0x06
 104:	1d 82       	std	Y+5, r1	; 0x05
 106:	18 86       	std	Y+8, r1	; 0x08
 108:	1f 82       	std	Y+7, r1	; 0x07
 10a:	1a 86       	std	Y+10, r1	; 0x0a
 10c:	19 86       	std	Y+9, r1	; 0x09
 10e:	1c 86       	std	Y+12, r1	; 0x0c
 110:	1b 86       	std	Y+11, r1	; 0x0b
 112:	8e e1       	ldi	r24, 0x1E	; 30
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	9e 87       	std	Y+14, r25	; 0x0e
 118:	8d 87       	std	Y+13, r24	; 0x0d
 11a:	fe 01       	movw	r30, r28
 11c:	31 96       	adiw	r30, 0x01	; 1
 11e:	9e 01       	movw	r18, r28
 120:	2f 5e       	subi	r18, 0xEF	; 239
 122:	3f 4f       	sbci	r19, 0xFF	; 255
			for (j=0;j<8;j++){
				PORTC|=al[j];
 124:	95 b3       	in	r25, 0x15	; 21
 126:	80 81       	ld	r24, Z
 128:	32 96       	adiw	r30, 0x02	; 2
 12a:	89 2b       	or	r24, r25
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	8f e3       	ldi	r24, 0x3F	; 63
 130:	9c e9       	ldi	r25, 0x9C	; 156
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <_Z14display_secondv+0x4c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <_Z14display_secondv+0x52>
 138:	00 00       	nop
		}
	}
	void display_second(){
		int j;
		int al[]={0x00,0x00,0x00,0x00,0x00,0x00,0x1E};
			for (j=0;j<8;j++){
 13a:	e2 17       	cp	r30, r18
 13c:	f3 07       	cpc	r31, r19
 13e:	91 f7       	brne	.-28     	; 0x124 <_Z14display_secondv+0x3e>
				PORTC|=al[j];
				_delay_ms(10);
			}
 140:	2e 96       	adiw	r28, 0x0e	; 14
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	de bf       	out	0x3e, r29	; 62
 148:	0f be       	out	0x3f, r0	; 63
 14a:	cd bf       	out	0x3d, r28	; 61
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <main>:

void display_first();
void display_second();
int main(void)
{
    DDRB |= 0xFF;
 152:	87 b3       	in	r24, 0x17	; 23
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0xFF;
 158:	94 b3       	in	r25, 0x14	; 20
 15a:	84 bb       	out	0x14, r24	; 20
	sei();
 15c:	78 94       	sei
	TCCR1B |=(1<<CS12)|(1<<CS10);
 15e:	8e b5       	in	r24, 0x2e	; 46
 160:	85 60       	ori	r24, 0x05	; 5
 162:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |=(1<<WGM12);
 164:	8e b5       	in	r24, 0x2e	; 46
 166:	88 60       	ori	r24, 0x08	; 8
 168:	8e bd       	out	0x2e, r24	; 46
	TIMSK|= (1<<OCIE1A);
 16a:	89 b7       	in	r24, 0x39	; 57
 16c:	80 61       	ori	r24, 0x10	; 16
 16e:	89 bf       	out	0x39, r24	; 57
	OCR1A = 15625*0.1;
 170:	8a e1       	ldi	r24, 0x1A	; 26
 172:	96 e0       	ldi	r25, 0x06	; 6
 174:	9b bd       	out	0x2b, r25	; 43
 176:	8a bd       	out	0x2a, r24	; 42
    while (1) 
    {
		display_first();
 178:	87 df       	rcall	.-242    	; 0x88 <_Z13display_firstv>
		if (flag == 1){
 17a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 17e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	c9 f7       	brne	.-14     	; 0x178 <main+0x26>
			display_second();
 186:	af df       	rcall	.-162    	; 0xe6 <_Z14display_secondv>
 188:	f7 cf       	rjmp	.-18     	; 0x178 <main+0x26>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
