
ledblinkwithtimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000587  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000508  00000000  00000000  00000703  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001de  00000000  00000000  00000c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f3  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  00001103  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001153  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 * Created: 6/1/2017 2:55:50 PM
 * Author : Sampada Dhakal
 */ 
#include<avr/io.h>
int main(void){
	DDRB|=(1<<0);
  6c:	b8 9a       	sbi	0x17, 0	; 23
	TCCR1B|=((1<<CS10)|(1<<CS11));
  6e:	8e b5       	in	r24, 0x2e	; 46
  70:	83 60       	ori	r24, 0x03	; 3
  72:	8e bd       	out	0x2e, r24	; 46
		if (TCNT1>=15624){
			TCNT1=0;
			i++;
			if (i==60){
				i=0;
			PORTB^=(1<<0);	
  74:	41 e0       	ldi	r20, 0x01	; 1
 *
 * Created: 6/1/2017 2:55:50 PM
 * Author : Sampada Dhakal
 */ 
#include<avr/io.h>
int main(void){
  76:	2c e3       	ldi	r18, 0x3C	; 60
  78:	30 e0       	ldi	r19, 0x00	; 0
	DDRB|=(1<<0);
	TCCR1B|=((1<<CS10)|(1<<CS11));
	unsigned int i;
	i=0;
	while(1){
		if (TCNT1>=15624){
  7a:	8c b5       	in	r24, 0x2c	; 44
  7c:	9d b5       	in	r25, 0x2d	; 45
  7e:	88 30       	cpi	r24, 0x08	; 8
  80:	9d 43       	sbci	r25, 0x3D	; 61
  82:	d8 f3       	brcs	.-10     	; 0x7a <main+0xe>
			TCNT1=0;
  84:	1d bc       	out	0x2d, r1	; 45
  86:	1c bc       	out	0x2c, r1	; 44
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	31 09       	sbc	r19, r1
			i++;
			if (i==60){
  8c:	b1 f7       	brne	.-20     	; 0x7a <main+0xe>
				i=0;
			PORTB^=(1<<0);	
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	84 27       	eor	r24, r20
  92:	88 bb       	out	0x18, r24	; 24
  94:	f0 cf       	rjmp	.-32     	; 0x76 <main+0xa>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
