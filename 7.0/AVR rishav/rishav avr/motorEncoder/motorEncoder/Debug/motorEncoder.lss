
motorEncoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000334  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  00800064  00800064  000003cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b29  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f1  00000000  00000000  00000ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ef  00000000  00000000  000017ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00001cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052e  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000506  00000000  00000000  000023d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000028dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_13>
  38:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3a       	cpi	r26, 0xAC	; 172
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  8a:	0c 94 98 01 	jmp	0x330	; 0x330 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:
uint16_t counter    = 0;
uint8_t  count      = 0;
uint8_t  revperMin  = 0;
float  countperSec= 0;

ISR(TIMER1_OVF_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	count       = counter;
  b4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <counter>
  b8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
	//countperSec = count/(0.004096);
// 	revperMin   = ((countperSec/PPR)*60) ;
	uart_putint((count/24)*60);
  bc:	9b ea       	ldi	r25, 0xAB	; 171
  be:	89 9f       	mul	r24, r25
  c0:	81 2d       	mov	r24, r1
  c2:	11 24       	eor	r1, r1
  c4:	82 95       	swap	r24
  c6:	8f 70       	andi	r24, 0x0F	; 15
  c8:	2c e3       	ldi	r18, 0x3C	; 60
  ca:	82 9f       	mul	r24, r18
  cc:	c0 01       	movw	r24, r0
  ce:	11 24       	eor	r1, r1
  d0:	0e 94 39 01 	call	0x272	; 0x272 <_Z11uart_putinti>
	uart_puts("\n\r");
  d4:	80 e6       	ldi	r24, 0x60	; 96
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 2a 01 	call	0x254	; 0x254 <_Z9uart_putsPKc>
	counter     = 0;
  dc:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <counter+0x1>
  e0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <counter>
	}
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	bf 91       	pop	r27
  ea:	af 91       	pop	r26
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	7f 91       	pop	r23
  f2:	6f 91       	pop	r22
  f4:	5f 91       	pop	r21
  f6:	4f 91       	pop	r20
  f8:	3f 91       	pop	r19
  fa:	2f 91       	pop	r18
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_1>:

ISR(INT0_vect){
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
	counter++;
 114:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <counter>
 118:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <counter+0x1>
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <counter+0x1>
 122:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <counter>
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <main>:
  
int main(void)
{   
	
	uart_init(UART_BAUD_SELECT(BAUD_RATE,F_CPU));
 134:	87 e6       	ldi	r24, 0x67	; 103
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 03 01 	call	0x206	; 0x206 <_Z9uart_initj>
	
    MCUCR  |= (1<<ISC00)|(1<<ISC01); //Triggering state for Timer0 interrupt 
 13c:	85 b7       	in	r24, 0x35	; 53
 13e:	83 60       	ori	r24, 0x03	; 3
 140:	85 bf       	out	0x35, r24	; 53
	MCUCR  |= (0<<ISC10)|(0<<ISC11); //Triggering state for Timer1 interrupt
 142:	85 b7       	in	r24, 0x35	; 53
 144:	85 bf       	out	0x35, r24	; 53
	MCUCSR |= (0<<ISC2);             //Triggering state for TImer2 interrupt 
 146:	84 b7       	in	r24, 0x34	; 52
 148:	84 bf       	out	0x34, r24	; 52
	sei();
 14a:	78 94       	sei
	GICR |= (1<<INT0);                
 14c:	8b b7       	in	r24, 0x3b	; 59
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	8b bf       	out	0x3b, r24	; 59
	GICR |= (0<<INT1);
 152:	8b b7       	in	r24, 0x3b	; 59
 154:	8b bf       	out	0x3b, r24	; 59
	GICR |= (0<<INT2);
 156:	8b b7       	in	r24, 0x3b	; 59
 158:	8b bf       	out	0x3b, r24	; 59

    TCCR1B |= (1<<CS12)|(0<<CS11)|(0<<CS10); 
 15a:	8e b5       	in	r24, 0x2e	; 46
 15c:	84 60       	ori	r24, 0x04	; 4
 15e:	8e bd       	out	0x2e, r24	; 46
    TIMSK  |= (1<<TOIE1);
 160:	89 b7       	in	r24, 0x39	; 57
 162:	84 60       	ori	r24, 0x04	; 4
 164:	89 bf       	out	0x39, r24	; 57
    sei();
 166:	78 94       	sei

ISR(INT0_vect){
	counter++;
}
  
int main(void)
 168:	ff cf       	rjmp	.-2      	; 0x168 <main+0x34>

0000016a <__vector_13>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	2c b1       	in	r18, 0x0c	; 12
 182:	88 71       	andi	r24, 0x18	; 24
 184:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <_ZL11UART_RxHead>
 188:	ef 5f       	subi	r30, 0xFF	; 255
 18a:	ef 71       	andi	r30, 0x1F	; 31
 18c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <_ZL11UART_RxTail>
 190:	e9 17       	cp	r30, r25
 192:	39 f0       	breq	.+14     	; 0x1a2 <__vector_13+0x38>
 194:	e0 93 69 00 	sts	0x0069, r30	; 0x800069 <_ZL11UART_RxHead>
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e4 59       	subi	r30, 0x94	; 148
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	20 83       	st	Z, r18
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <__vector_13+0x3a>
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <_ZL16UART_LastRxError>
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <__vector_14>:
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
 1ce:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <_ZL11UART_TxHead>
 1d2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <_ZL11UART_TxTail>
 1d6:	98 17       	cp	r25, r24
 1d8:	61 f0       	breq	.+24     	; 0x1f2 <__vector_14+0x36>
 1da:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <_ZL11UART_TxTail>
 1de:	ef 5f       	subi	r30, 0xFF	; 255
 1e0:	ef 71       	andi	r30, 0x1F	; 31
 1e2:	e0 93 6a 00 	sts	0x006A, r30	; 0x80006a <_ZL11UART_TxTail>
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	e4 57       	subi	r30, 0x74	; 116
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	80 81       	ld	r24, Z
 1ee:	8c b9       	out	0x0c, r24	; 12
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <__vector_14+0x38>
 1f2:	55 98       	cbi	0x0a, 5	; 10
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <_Z9uart_initj>:
 206:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <_ZL11UART_TxHead>
 20a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <_ZL11UART_TxTail>
 20e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <_ZL11UART_RxHead>
 212:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <_ZL11UART_RxTail>
 216:	99 23       	and	r25, r25
 218:	1c f4       	brge	.+6      	; 0x220 <_Z9uart_initj+0x1a>
 21a:	22 e0       	ldi	r18, 0x02	; 2
 21c:	2b b9       	out	0x0b, r18	; 11
 21e:	9f 77       	andi	r25, 0x7F	; 127
 220:	90 bd       	out	0x20, r25	; 32
 222:	89 b9       	out	0x09, r24	; 9
 224:	88 e9       	ldi	r24, 0x98	; 152
 226:	8a b9       	out	0x0a, r24	; 10
 228:	86 e8       	ldi	r24, 0x86	; 134
 22a:	80 bd       	out	0x20, r24	; 32
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	80 bd       	out	0x20, r24	; 32
 230:	08 95       	ret

00000232 <_Z9uart_putch>:
 232:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <_ZL11UART_TxHead>
 236:	2f 5f       	subi	r18, 0xFF	; 255
 238:	2f 71       	andi	r18, 0x1F	; 31
 23a:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <_ZL11UART_TxTail>
 23e:	29 17       	cp	r18, r25
 240:	e1 f3       	breq	.-8      	; 0x23a <_Z9uart_putch+0x8>
 242:	e2 2f       	mov	r30, r18
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	e4 57       	subi	r30, 0x74	; 116
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	80 83       	st	Z, r24
 24c:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <_ZL11UART_TxHead>
 250:	55 9a       	sbi	0x0a, 5	; 10
 252:	08 95       	ret

00000254 <_Z9uart_putsPKc>:
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	ec 01       	movw	r28, r24
 25a:	88 81       	ld	r24, Y
 25c:	88 23       	and	r24, r24
 25e:	31 f0       	breq	.+12     	; 0x26c <_Z9uart_putsPKc+0x18>
 260:	21 96       	adiw	r28, 0x01	; 1
 262:	0e 94 19 01 	call	0x232	; 0x232 <_Z9uart_putch>
 266:	89 91       	ld	r24, Y+
 268:	81 11       	cpse	r24, r1
 26a:	fb cf       	rjmp	.-10     	; 0x262 <_Z9uart_putsPKc+0xe>
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <_Z11uart_putinti>:
 Purpose:  transmit integer to UART0
 Input:    integer to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putint(int input)
{
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	2f 97       	sbiw	r28, 0x0f	; 15
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 28a:	4a e0       	ldi	r20, 0x0A	; 10
 28c:	be 01       	movw	r22, r28
 28e:	6f 5f       	subi	r22, 0xFF	; 255
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__itoa_ncheck>
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	88 23       	and	r24, r24
 29a:	51 f0       	breq	.+20     	; 0x2b0 <_Z11uart_putinti+0x3e>
 29c:	8e 01       	movw	r16, r28
 29e:	0e 5f       	subi	r16, 0xFE	; 254
 2a0:	1f 4f       	sbci	r17, 0xFF	; 255
	uart_putc(*s++);
 2a2:	0e 94 19 01 	call	0x232	; 0x232 <_Z9uart_putch>
void uart_putint(int input)
{
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 2a6:	f8 01       	movw	r30, r16
 2a8:	81 91       	ld	r24, Z+
 2aa:	8f 01       	movw	r16, r30
 2ac:	81 11       	cpse	r24, r1
 2ae:	f9 cf       	rjmp	.-14     	; 0x2a2 <_Z11uart_putinti+0x30>
	uart_putc(*s++);

	}
 2b0:	2f 96       	adiw	r28, 0x0f	; 15
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	08 95       	ret

000002c6 <__itoa_ncheck>:
 2c6:	bb 27       	eor	r27, r27
 2c8:	4a 30       	cpi	r20, 0x0A	; 10
 2ca:	31 f4       	brne	.+12     	; 0x2d8 <__itoa_ncheck+0x12>
 2cc:	99 23       	and	r25, r25
 2ce:	22 f4       	brpl	.+8      	; 0x2d8 <__itoa_ncheck+0x12>
 2d0:	bd e2       	ldi	r27, 0x2D	; 45
 2d2:	90 95       	com	r25
 2d4:	81 95       	neg	r24
 2d6:	9f 4f       	sbci	r25, 0xFF	; 255
 2d8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__utoa_common>

000002dc <__utoa_ncheck>:
 2dc:	bb 27       	eor	r27, r27

000002de <__utoa_common>:
 2de:	fb 01       	movw	r30, r22
 2e0:	55 27       	eor	r21, r21
 2e2:	aa 27       	eor	r26, r26
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	aa 1f       	adc	r26, r26
 2ea:	a4 17       	cp	r26, r20
 2ec:	10 f0       	brcs	.+4      	; 0x2f2 <__utoa_common+0x14>
 2ee:	a4 1b       	sub	r26, r20
 2f0:	83 95       	inc	r24
 2f2:	50 51       	subi	r21, 0x10	; 16
 2f4:	b9 f7       	brne	.-18     	; 0x2e4 <__utoa_common+0x6>
 2f6:	a0 5d       	subi	r26, 0xD0	; 208
 2f8:	aa 33       	cpi	r26, 0x3A	; 58
 2fa:	08 f0       	brcs	.+2      	; 0x2fe <__utoa_common+0x20>
 2fc:	a9 5d       	subi	r26, 0xD9	; 217
 2fe:	a1 93       	st	Z+, r26
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	79 f7       	brne	.-34     	; 0x2e2 <__utoa_common+0x4>
 304:	b1 11       	cpse	r27, r1
 306:	b1 93       	st	Z+, r27
 308:	11 92       	st	Z+, r1
 30a:	cb 01       	movw	r24, r22
 30c:	0c 94 88 01 	jmp	0x310	; 0x310 <strrev>

00000310 <strrev>:
 310:	dc 01       	movw	r26, r24
 312:	fc 01       	movw	r30, r24
 314:	67 2f       	mov	r22, r23
 316:	71 91       	ld	r23, Z+
 318:	77 23       	and	r23, r23
 31a:	e1 f7       	brne	.-8      	; 0x314 <strrev+0x4>
 31c:	32 97       	sbiw	r30, 0x02	; 2
 31e:	04 c0       	rjmp	.+8      	; 0x328 <strrev+0x18>
 320:	7c 91       	ld	r23, X
 322:	6d 93       	st	X+, r22
 324:	70 83       	st	Z, r23
 326:	62 91       	ld	r22, -Z
 328:	ae 17       	cp	r26, r30
 32a:	bf 07       	cpc	r27, r31
 32c:	c8 f3       	brcs	.-14     	; 0x320 <strrev+0x10>
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
