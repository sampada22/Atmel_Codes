
Base_Omni.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800200  00000f62  00000ff6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000114  0080024c  0080024c  00001042  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001042  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002808  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001125  00000000  00000000  00003abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001124  00000000  00000000  00004be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000630  00000000  00000000  00005d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000db3  00000000  00000000  00006338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001792  00000000  00000000  000070eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000887d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	d6 c1       	rjmp	.+940    	; 0x412 <__vector_25>
  66:	00 00       	nop
  68:	03 c2       	rjmp	.+1030   	; 0x470 <__vector_26>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	a8 c2       	rjmp	.+1360   	; 0x5e2 <__vector_36>
  92:	00 00       	nop
  94:	d5 c2       	rjmp	.+1450   	; 0x640 <__vector_37>
  96:	00 00       	nop
  98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	62 c0       	rjmp	.+196    	; 0x172 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	60 c0       	rjmp	.+192    	; 0x172 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5e c0       	rjmp	.+188    	; 0x172 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5c c0       	rjmp	.+184    	; 0x172 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5a c0       	rjmp	.+180    	; 0x172 <__bad_interrupt>
  be:	00 00       	nop
  c0:	58 c0       	rjmp	.+176    	; 0x172 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	56 c0       	rjmp	.+172    	; 0x172 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	54 c0       	rjmp	.+168    	; 0x172 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	e7 c2       	rjmp	.+1486   	; 0x69c <__vector_51>
  ce:	00 00       	nop
  d0:	14 c3       	rjmp	.+1576   	; 0x6fa <__vector_52>
  d2:	00 00       	nop
  d4:	4e c0       	rjmp	.+156    	; 0x172 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	3e c3       	rjmp	.+1660   	; 0x756 <__vector_54>
  da:	00 00       	nop
  dc:	6b c3       	rjmp	.+1750   	; 0x7b4 <__vector_55>
  de:	00 00       	nop
  e0:	48 c0       	rjmp	.+144    	; 0x172 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	82 04       	cpc	r8, r2
  e6:	e1 04       	cpc	r14, r1
  e8:	e1 04       	cpc	r14, r1
  ea:	e1 04       	cpc	r14, r1
  ec:	74 04       	cpc	r7, r4
  ee:	b2 04       	cpc	r11, r2
  f0:	e1 04       	cpc	r14, r1
  f2:	c0 04       	cpc	r12, r0
  f4:	e1 04       	cpc	r14, r1
  f6:	e1 04       	cpc	r14, r1
  f8:	93 04       	cpc	r9, r3
  fa:	e1 04       	cpc	r14, r1
  fc:	e1 04       	cpc	r14, r1
  fe:	e1 04       	cpc	r14, r1
 100:	e1 04       	cpc	r14, r1
 102:	e1 04       	cpc	r14, r1
 104:	a1 04       	cpc	r10, r1
 106:	dd 04       	cpc	r13, r13
 108:	e1 04       	cpc	r14, r1
 10a:	e1 04       	cpc	r14, r1
 10c:	e1 04       	cpc	r14, r1
 10e:	e1 04       	cpc	r14, r1
 110:	e1 04       	cpc	r14, r1
 112:	e1 04       	cpc	r14, r1
 114:	e1 04       	cpc	r14, r1
 116:	e1 04       	cpc	r14, r1
 118:	e1 04       	cpc	r14, r1
 11a:	e1 04       	cpc	r14, r1
 11c:	e1 04       	cpc	r14, r1
 11e:	e1 04       	cpc	r14, r1
 120:	e1 04       	cpc	r14, r1
 122:	e1 04       	cpc	r14, r1
 124:	e1 04       	cpc	r14, r1
 126:	e1 04       	cpc	r14, r1
 128:	d7 04       	cpc	r13, r7
 12a:	e1 04       	cpc	r14, r1
 12c:	e1 04       	cpc	r14, r1
 12e:	e1 04       	cpc	r14, r1
 130:	e1 04       	cpc	r14, r1
 132:	d1 04       	cpc	r13, r1

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e2       	ldi	r29, 0x21	; 33
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	e2 e6       	ldi	r30, 0x62	; 98
 14c:	ff e0       	ldi	r31, 0x0F	; 15
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	ac 34       	cpi	r26, 0x4C	; 76
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
 15e:	23 e0       	ldi	r18, 0x03	; 3
 160:	ac e4       	ldi	r26, 0x4C	; 76
 162:	b2 e0       	ldi	r27, 0x02	; 2
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	a0 36       	cpi	r26, 0x60	; 96
 16a:	b2 07       	cpc	r27, r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	02 d0       	rcall	.+4      	; 0x174 <main>
 170:	f6 c6       	rjmp	.+3564   	; 0xf5e <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <main>:
#include <avr/interrupt.h>
#include "Wheel.h"
#include "headers.h"

int main(void)
{    
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	ae 97       	sbiw	r28, 0x2e	; 46
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	cd bf       	out	0x3d, r28	; 61
	sei();
 188:	78 94       	sei
	
	Wheel w;
	w.init();
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	40 d3       	rcall	.+1664   	; 0x810 <_ZN5Wheel4initEv>

	while(1)
	{
		
		w.get_joystick_data();
 190:	ce 01       	movw	r24, r28
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	94 d3       	rcall	.+1832   	; 0x8be <_ZN5Wheel17get_joystick_dataEv>
		w.calculate_wheel_velocity();
 196:	ce 01       	movw	r24, r28
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	1f d4       	rcall	.+2110   	; 0x9da <_ZN5Wheel24calculate_wheel_velocityEv>
		w.update_wheel_velocity();
 19c:	ce 01       	movw	r24, r28
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	dc d4       	rcall	.+2488   	; 0xb5a <_ZN5Wheel21update_wheel_velocityEv>
	}

	return 0;
 1a2:	f6 cf       	rjmp	.-20     	; 0x190 <main+0x1c>

000001a4 <_ZN5Motor7InitPWMEv>:

}

void Motor::InitPWM()
{
	if (num==1)
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	d1 f4       	brne	.+52     	; 0x1e0 <_ZN5Motor7InitPWMEv+0x3c>
	{
		OUTPUT(DD_F1);
 1ac:	e1 e0       	ldi	r30, 0x01	; 1
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	80 81       	ld	r24, Z
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
 1b6:	80 81       	ld	r24, Z
 1b8:	88 60       	ori	r24, 0x08	; 8
 1ba:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
 1bc:	6b 9a       	sbi	0x0d, 3	; 13

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
 1be:	e0 e9       	ldi	r30, 0x90	; 144
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	82 68       	ori	r24, 0x82	; 130
 1c6:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
 1c8:	e1 e9       	ldi	r30, 0x91	; 145
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	8a 61       	ori	r24, 0x1A	; 26
 1d0:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
 1d2:	89 ef       	ldi	r24, 0xF9	; 249
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 1da:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
 1de:	08 95       	ret
	}
	else if(num==2)
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	c1 f4       	brne	.+48     	; 0x214 <_ZN5Motor7InitPWMEv+0x70>
	{
		OUTPUT(DD_F2);
 1e4:	e1 e0       	ldi	r30, 0x01	; 1
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	80 81       	ld	r24, Z
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
 1ee:	24 9a       	sbi	0x04, 4	; 4

		OUTPUT(DD_PWM2);
 1f0:	25 9a       	sbi	0x04, 5	; 4

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
 1f2:	e0 e8       	ldi	r30, 0x80	; 128
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	82 68       	ori	r24, 0x82	; 130
 1fa:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
 1fc:	e1 e8       	ldi	r30, 0x81	; 129
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	8a 61       	ori	r24, 0x1A	; 26
 204:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
 206:	89 ef       	ldi	r24, 0xF9	; 249
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 20e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 212:	08 95       	ret
	}
	else if(num==3)
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	c1 f4       	brne	.+48     	; 0x248 <_ZN5Motor7InitPWMEv+0xa4>
	{
		OUTPUT(DD_F3);
 218:	9d 9a       	sbi	0x13, 5	; 19
		OUTPUT(DD_B3);
 21a:	e1 e0       	ldi	r30, 0x01	; 1
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	80 81       	ld	r24, Z
 220:	80 62       	ori	r24, 0x20	; 32
 222:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
 224:	26 9a       	sbi	0x04, 6	; 4

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
 226:	e0 e8       	ldi	r30, 0x80	; 128
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	82 62       	ori	r24, 0x22	; 34
 22e:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
 230:	e1 e8       	ldi	r30, 0x81	; 129
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	8a 61       	ori	r24, 0x1A	; 26
 238:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
 23a:	89 ef       	ldi	r24, 0xF9	; 249
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 242:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 246:	08 95       	ret
	} 
	else if(num==4)
 248:	84 30       	cpi	r24, 0x04	; 4
 24a:	99 f4       	brne	.+38     	; 0x272 <_ZN5Motor7InitPWMEv+0xce>
	{
		OUTPUT(DD_F4);
 24c:	6c 9a       	sbi	0x0d, 4	; 13
		OUTPUT(DD_B4);
 24e:	6d 9a       	sbi	0x0d, 5	; 13

		OUTPUT(DD_PWM4);
 250:	27 9a       	sbi	0x04, 7	; 4

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
 252:	e0 e8       	ldi	r30, 0x80	; 128
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	8a 60       	ori	r24, 0x0A	; 10
 25a:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
 25c:	e1 e8       	ldi	r30, 0x81	; 129
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	8a 61       	ori	r24, 0x1A	; 26
 264:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
 266:	89 ef       	ldi	r24, 0xF9	; 249
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 26e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 272:	08 95       	ret

00000274 <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
 274:	fc 01       	movw	r30, r24
 276:	80 81       	ld	r24, Z
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	91 f0       	breq	.+36     	; 0x2a0 <_ZN5Motor19SetForwardDirectionEv+0x2c>
 27c:	18 f4       	brcc	.+6      	; 0x284 <_ZN5Motor19SetForwardDirectionEv+0x10>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	31 f0       	breq	.+12     	; 0x28e <_ZN5Motor19SetForwardDirectionEv+0x1a>
 282:	08 95       	ret
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	99 f0       	breq	.+38     	; 0x2ae <_ZN5Motor19SetForwardDirectionEv+0x3a>
 288:	84 30       	cpi	r24, 0x04	; 4
 28a:	c1 f0       	breq	.+48     	; 0x2bc <_ZN5Motor19SetForwardDirectionEv+0x48>
 28c:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
 28e:	e2 e0       	ldi	r30, 0x02	; 2
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	80 81       	ld	r24, Z
 294:	80 61       	ori	r24, 0x10	; 16
 296:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
 298:	80 81       	ld	r24, Z
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	80 83       	st	Z, r24
			break;
 29e:	08 95       	ret
		case 2:
			SET		(DD_F2);
 2a0:	e2 e0       	ldi	r30, 0x02	; 2
 2a2:	f1 e0       	ldi	r31, 0x01	; 1
 2a4:	80 81       	ld	r24, Z
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
 2aa:	2c 98       	cbi	0x05, 4	; 5
			break;
 2ac:	08 95       	ret
		case 3:
			SET		(DD_F3);
 2ae:	a5 9a       	sbi	0x14, 5	; 20
			CLEAR	(DD_B3);
 2b0:	e2 e0       	ldi	r30, 0x02	; 2
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	80 81       	ld	r24, Z
 2b6:	8f 7d       	andi	r24, 0xDF	; 223
 2b8:	80 83       	st	Z, r24
			break;
 2ba:	08 95       	ret
		case 4:
			SET		(DD_F4);
 2bc:	74 9a       	sbi	0x0e, 4	; 14
			CLEAR	(DD_B4);
 2be:	75 98       	cbi	0x0e, 5	; 14
 2c0:	08 95       	ret

000002c2 <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
 2c2:	fc 01       	movw	r30, r24
 2c4:	80 81       	ld	r24, Z
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	91 f0       	breq	.+36     	; 0x2ee <_ZN5Motor19SetReverseDirectionEv+0x2c>
 2ca:	18 f4       	brcc	.+6      	; 0x2d2 <_ZN5Motor19SetReverseDirectionEv+0x10>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	31 f0       	breq	.+12     	; 0x2dc <_ZN5Motor19SetReverseDirectionEv+0x1a>
 2d0:	08 95       	ret
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	99 f0       	breq	.+38     	; 0x2fc <_ZN5Motor19SetReverseDirectionEv+0x3a>
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	c1 f0       	breq	.+48     	; 0x30a <_ZN5Motor19SetReverseDirectionEv+0x48>
 2da:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
 2dc:	e2 e0       	ldi	r30, 0x02	; 2
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	80 81       	ld	r24, Z
 2e2:	8f 7e       	andi	r24, 0xEF	; 239
 2e4:	80 83       	st	Z, r24
			SET		(DD_B1);
 2e6:	80 81       	ld	r24, Z
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	80 83       	st	Z, r24
			break;
 2ec:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
 2ee:	e2 e0       	ldi	r30, 0x02	; 2
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
 2f2:	80 81       	ld	r24, Z
 2f4:	8f 7b       	andi	r24, 0xBF	; 191
 2f6:	80 83       	st	Z, r24
			SET		(DD_B2);
 2f8:	2c 9a       	sbi	0x05, 4	; 5
			break;
 2fa:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
 2fc:	a5 98       	cbi	0x14, 5	; 20
			SET		(DD_B3);
 2fe:	e2 e0       	ldi	r30, 0x02	; 2
 300:	f1 e0       	ldi	r31, 0x01	; 1
 302:	80 81       	ld	r24, Z
 304:	80 62       	ori	r24, 0x20	; 32
 306:	80 83       	st	Z, r24
			break;
 308:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
 30a:	74 98       	cbi	0x0e, 4	; 14
			SET		(DD_B4);
 30c:	75 9a       	sbi	0x0e, 5	; 14
 30e:	08 95       	ret

00000310 <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
 310:	fc 01       	movw	r30, r24
 312:	80 81       	ld	r24, Z
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	b1 f0       	breq	.+44     	; 0x344 <_ZN5Motor9StopMotorEv+0x34>
 318:	18 f4       	brcc	.+6      	; 0x320 <_ZN5Motor9StopMotorEv+0x10>
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	31 f0       	breq	.+12     	; 0x32a <_ZN5Motor9StopMotorEv+0x1a>
 31e:	08 95       	ret
 320:	83 30       	cpi	r24, 0x03	; 3
 322:	d9 f0       	breq	.+54     	; 0x35a <_ZN5Motor9StopMotorEv+0x4a>
 324:	84 30       	cpi	r24, 0x04	; 4
 326:	21 f1       	breq	.+72     	; 0x370 <_ZN5Motor9StopMotorEv+0x60>
 328:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
 32a:	e2 e0       	ldi	r30, 0x02	; 2
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	80 81       	ld	r24, Z
 330:	8f 7e       	andi	r24, 0xEF	; 239
 332:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
 334:	80 81       	ld	r24, Z
 336:	87 7f       	andi	r24, 0xF7	; 247
 338:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
 33a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 33e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
 342:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
 344:	e2 e0       	ldi	r30, 0x02	; 2
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	80 81       	ld	r24, Z
 34a:	8f 7b       	andi	r24, 0xBF	; 191
 34c:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
 34e:	2c 98       	cbi	0x05, 4	; 5

			PWM_OCR2 = 0;
 350:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 354:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			break;
 358:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
 35a:	a5 98       	cbi	0x14, 5	; 20
			CLEAR	(DD_B3);
 35c:	e2 e0       	ldi	r30, 0x02	; 2
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	80 81       	ld	r24, Z
 362:	8f 7d       	andi	r24, 0xDF	; 223
 364:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
 366:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 36a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
			break;
 36e:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
 370:	74 98       	cbi	0x0e, 4	; 14
			CLEAR	(DD_B4);
 372:	75 98       	cbi	0x0e, 5	; 14

			PWM_OCR4 = 0;
 374:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
 378:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
 37c:	08 95       	ret

0000037e <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	8c 01       	movw	r16, r24
 388:	eb 01       	movw	r28, r22
    if (Ocr > 0)
 38a:	1c 16       	cp	r1, r28
 38c:	1d 06       	cpc	r1, r29
 38e:	0c f4       	brge	.+2      	; 0x392 <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
 390:	71 df       	rcall	.-286    	; 0x274 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
 392:	c9 3f       	cpi	r28, 0xF9	; 249
 394:	d1 05       	cpc	r29, r1
 396:	44 f4       	brge	.+16     	; 0x3a8 <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
	if( Ocr < 0)
 398:	dd 23       	and	r29, r29
 39a:	44 f4       	brge	.+16     	; 0x3ac <_ZN5Motor11SetOcrValueEi+0x2e>
	{
        Ocr = -Ocr;
 39c:	d1 95       	neg	r29
 39e:	c1 95       	neg	r28
 3a0:	d1 09       	sbc	r29, r1
        SetReverseDirection();
 3a2:	c8 01       	movw	r24, r16
 3a4:	8e df       	rcall	.-228    	; 0x2c2 <_ZN5Motor19SetReverseDirectionEv>
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <_ZN5Motor11SetOcrValueEi+0x2e>
void Motor::SetOcrValue(int Ocr)
{
    if (Ocr > 0)
        SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
 3a8:	c9 ef       	ldi	r28, 0xF9	; 249
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
	if( Ocr < 0)
	{
        Ocr = -Ocr;
        SetReverseDirection();
	}
	switch(num)
 3ac:	f8 01       	movw	r30, r16
 3ae:	80 81       	ld	r24, Z
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	71 f0       	breq	.+28     	; 0x3d0 <_ZN5Motor11SetOcrValueEi+0x52>
 3b4:	18 f4       	brcc	.+6      	; 0x3bc <_ZN5Motor11SetOcrValueEi+0x3e>
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	31 f0       	breq	.+12     	; 0x3c6 <_ZN5Motor11SetOcrValueEi+0x48>
 3ba:	18 c0       	rjmp	.+48     	; 0x3ec <_ZN5Motor11SetOcrValueEi+0x6e>
 3bc:	83 30       	cpi	r24, 0x03	; 3
 3be:	69 f0       	breq	.+26     	; 0x3da <_ZN5Motor11SetOcrValueEi+0x5c>
 3c0:	84 30       	cpi	r24, 0x04	; 4
 3c2:	81 f0       	breq	.+32     	; 0x3e4 <_ZN5Motor11SetOcrValueEi+0x66>
 3c4:	13 c0       	rjmp	.+38     	; 0x3ec <_ZN5Motor11SetOcrValueEi+0x6e>
	{
		case 1:
			PWM_OCR1	= Ocr;
 3c6:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 3ca:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
 3ce:	0e c0       	rjmp	.+28     	; 0x3ec <_ZN5Motor11SetOcrValueEi+0x6e>
		case 2:
			PWM_OCR2	= Ocr;
 3d0:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 3d4:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
			break;
 3d8:	09 c0       	rjmp	.+18     	; 0x3ec <_ZN5Motor11SetOcrValueEi+0x6e>
		case 3:
			PWM_OCR3	= Ocr;
 3da:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 3de:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
			break;
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <_ZN5Motor11SetOcrValueEi+0x6e>
		case 4:
			PWM_OCR4	= Ocr;
 3e4:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
 3e8:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
			break;
	}
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	08 95       	ret

000003f6 <_ZN5Motor10InitialiseEh>:
#include "Motor.h"



void Motor::Initialise(uint8_t no)
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	ec 01       	movw	r28, r24
	num = no;
 3fc:	68 83       	st	Y, r22
	InitPWM();
 3fe:	d2 de       	rcall	.-604    	; 0x1a4 <_ZN5Motor7InitPWMEv>

	StopMotor();
 400:	ce 01       	movw	r24, r28
 402:	86 df       	rcall	.-244    	; 0x310 <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	ce 01       	movw	r24, r28
 40a:	b9 df       	rcall	.-142    	; 0x37e <_ZN5Motor11SetOcrValueEi>

}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	0b b6       	in	r0, 0x3b	; 59
 41e:	0f 92       	push	r0
 420:	2f 93       	push	r18
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
 426:	ef 93       	push	r30
 428:	ff 93       	push	r31
 42a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 42e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 432:	88 71       	andi	r24, 0x18	; 24
 434:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <_ZL12UART0_RxHead>
 438:	ef 5f       	subi	r30, 0xFF	; 255
 43a:	ef 71       	andi	r30, 0x1F	; 31
 43c:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <_ZL12UART0_RxTail>
 440:	e9 17       	cp	r30, r25
 442:	39 f0       	breq	.+14     	; 0x452 <__vector_25+0x40>
 444:	e0 93 1d 03 	sts	0x031D, r30	; 0x80031d <_ZL12UART0_RxHead>
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	e0 5e       	subi	r30, 0xE0	; 224
 44c:	fc 4f       	sbci	r31, 0xFC	; 252
 44e:	20 83       	st	Z, r18
 450:	01 c0       	rjmp	.+2      	; 0x454 <__vector_25+0x42>
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <_ZL17UART0_LastRxError>
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	2f 91       	pop	r18
 462:	0f 90       	pop	r0
 464:	0b be       	out	0x3b, r0	; 59
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <__vector_26>:
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	0b b6       	in	r0, 0x3b	; 59
 47c:	0f 92       	push	r0
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
 486:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <_ZL12UART0_TxHead>
 48a:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <_ZL12UART0_TxTail>
 48e:	98 17       	cp	r25, r24
 490:	69 f0       	breq	.+26     	; 0x4ac <__vector_26+0x3c>
 492:	e0 91 1e 03 	lds	r30, 0x031E	; 0x80031e <_ZL12UART0_TxTail>
 496:	ef 5f       	subi	r30, 0xFF	; 255
 498:	ef 71       	andi	r30, 0x1F	; 31
 49a:	e0 93 1e 03 	sts	0x031E, r30	; 0x80031e <_ZL12UART0_TxTail>
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	e0 5c       	subi	r30, 0xC0	; 192
 4a2:	fc 4f       	sbci	r31, 0xFC	; 252
 4a4:	80 81       	ld	r24, Z
 4a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__vector_26+0x46>
 4ac:	e1 ec       	ldi	r30, 0xC1	; 193
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	8f 7d       	andi	r24, 0xDF	; 223
 4b4:	80 83       	st	Z, r24
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	0f 90       	pop	r0
 4c0:	0b be       	out	0x3b, r0	; 59
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <_Z10uart0_initj>:
 4cc:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <_ZL12UART0_TxHead>
 4d0:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <_ZL12UART0_TxTail>
 4d4:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <_ZL12UART0_RxHead>
 4d8:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <_ZL12UART0_RxTail>
 4dc:	99 23       	and	r25, r25
 4de:	24 f4       	brge	.+8      	; 0x4e8 <_Z10uart0_initj+0x1c>
 4e0:	22 e0       	ldi	r18, 0x02	; 2
 4e2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 4e6:	9f 77       	andi	r25, 0x7F	; 127
 4e8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 4ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 4f0:	88 e9       	ldi	r24, 0x98	; 152
 4f2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 4f6:	86 e0       	ldi	r24, 0x06	; 6
 4f8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 4fc:	08 95       	ret

000004fe <_Z10uart0_getcv>:
 4fe:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <_ZL12UART0_RxHead>
 502:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <_ZL12UART0_RxTail>
 506:	98 17       	cp	r25, r24
 508:	91 f0       	breq	.+36     	; 0x52e <_Z10uart0_getcv+0x30>
 50a:	e0 91 1c 03 	lds	r30, 0x031C	; 0x80031c <_ZL12UART0_RxTail>
 50e:	ef 5f       	subi	r30, 0xFF	; 255
 510:	ef 71       	andi	r30, 0x1F	; 31
 512:	e0 93 1c 03 	sts	0x031C, r30	; 0x80031c <_ZL12UART0_RxTail>
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	e0 5e       	subi	r30, 0xE0	; 224
 51a:	fc 4f       	sbci	r31, 0xFC	; 252
 51c:	20 81       	ld	r18, Z
 51e:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <_ZL17UART0_LastRxError>
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	98 2f       	mov	r25, r24
 526:	88 27       	eor	r24, r24
 528:	82 0f       	add	r24, r18
 52a:	91 1d       	adc	r25, r1
 52c:	08 95       	ret
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	08 95       	ret

00000534 <_Z10uart0_putch>:
 534:	20 91 1f 03 	lds	r18, 0x031F	; 0x80031f <_ZL12UART0_TxHead>
 538:	2f 5f       	subi	r18, 0xFF	; 255
 53a:	2f 71       	andi	r18, 0x1F	; 31
 53c:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <_ZL12UART0_TxTail>
 540:	29 17       	cp	r18, r25
 542:	e1 f3       	breq	.-8      	; 0x53c <_Z10uart0_putch+0x8>
 544:	e2 2f       	mov	r30, r18
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	e0 5c       	subi	r30, 0xC0	; 192
 54a:	fc 4f       	sbci	r31, 0xFC	; 252
 54c:	80 83       	st	Z, r24
 54e:	20 93 1f 03 	sts	0x031F, r18	; 0x80031f <_ZL12UART0_TxHead>
 552:	e1 ec       	ldi	r30, 0xC1	; 193
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
 558:	80 62       	ori	r24, 0x20	; 32
 55a:	80 83       	st	Z, r24
 55c:	08 95       	ret

0000055e <_Z12uart0_putinti>:
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	2f 97       	sbiw	r28, 0x0f	; 15
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	f8 94       	cli
 570:	de bf       	out	0x3e, r29	; 62
 572:	0f be       	out	0x3f, r0	; 63
 574:	cd bf       	out	0x3d, r28	; 61
 576:	4a e0       	ldi	r20, 0x0A	; 10
 578:	be 01       	movw	r22, r28
 57a:	6f 5f       	subi	r22, 0xFF	; 255
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	bc d4       	rcall	.+2424   	; 0xef8 <__itoa_ncheck>
 580:	89 81       	ldd	r24, Y+1	; 0x01
 582:	88 23       	and	r24, r24
 584:	49 f0       	breq	.+18     	; 0x598 <_Z12uart0_putinti+0x3a>
 586:	8e 01       	movw	r16, r28
 588:	0e 5f       	subi	r16, 0xFE	; 254
 58a:	1f 4f       	sbci	r17, 0xFF	; 255
 58c:	d3 df       	rcall	.-90     	; 0x534 <_Z10uart0_putch>
 58e:	f8 01       	movw	r30, r16
 590:	81 91       	ld	r24, Z+
 592:	8f 01       	movw	r16, r30
 594:	81 11       	cpse	r24, r1
 596:	fa cf       	rjmp	.-12     	; 0x58c <_Z12uart0_putinti+0x2e>
 598:	2f 96       	adiw	r28, 0x0f	; 15
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	08 95       	ret

000005ae <_Z10uart0_putsPKc>:
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	ec 01       	movw	r28, r24
 5b4:	88 81       	ld	r24, Y
 5b6:	88 23       	and	r24, r24
 5b8:	29 f0       	breq	.+10     	; 0x5c4 <_Z10uart0_putsPKc+0x16>
 5ba:	21 96       	adiw	r28, 0x01	; 1
 5bc:	bb df       	rcall	.-138    	; 0x534 <_Z10uart0_putch>
 5be:	89 91       	ld	r24, Y+
 5c0:	81 11       	cpse	r24, r1
 5c2:	fc cf       	rjmp	.-8      	; 0x5bc <_Z10uart0_putsPKc+0xe>
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

000005ca <_Z15uart0_availablev>:
 5ca:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <_ZL12UART0_RxHead>
 5ce:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <_ZL12UART0_RxTail>
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	4f 96       	adiw	r24, 0x1f	; 31
 5d6:	82 1b       	sub	r24, r18
 5d8:	91 09       	sbc	r25, r1
 5da:	6f e1       	ldi	r22, 0x1F	; 31
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	5d c4       	rjmp	.+2234   	; 0xe9a <__divmodhi4>
 5e0:	08 95       	ret

000005e2 <__vector_36>:
 5e2:	1f 92       	push	r1
 5e4:	0f 92       	push	r0
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	0f 92       	push	r0
 5ea:	11 24       	eor	r1, r1
 5ec:	0b b6       	in	r0, 0x3b	; 59
 5ee:	0f 92       	push	r0
 5f0:	2f 93       	push	r18
 5f2:	8f 93       	push	r24
 5f4:	9f 93       	push	r25
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
 5fa:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 5fe:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 602:	88 71       	andi	r24, 0x18	; 24
 604:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <_ZL12UART1_RxHead>
 608:	ef 5f       	subi	r30, 0xFF	; 255
 60a:	ef 71       	andi	r30, 0x1F	; 31
 60c:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <_ZL12UART1_RxTail>
 610:	e9 17       	cp	r30, r25
 612:	39 f0       	breq	.+14     	; 0x622 <__vector_36+0x40>
 614:	e0 93 d8 02 	sts	0x02D8, r30	; 0x8002d8 <_ZL12UART1_RxHead>
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	e5 52       	subi	r30, 0x25	; 37
 61c:	fd 4f       	sbci	r31, 0xFD	; 253
 61e:	20 83       	st	Z, r18
 620:	01 c0       	rjmp	.+2      	; 0x624 <__vector_36+0x42>
 622:	82 e0       	ldi	r24, 0x02	; 2
 624:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <_ZL17UART1_LastRxError>
 628:	ff 91       	pop	r31
 62a:	ef 91       	pop	r30
 62c:	9f 91       	pop	r25
 62e:	8f 91       	pop	r24
 630:	2f 91       	pop	r18
 632:	0f 90       	pop	r0
 634:	0b be       	out	0x3b, r0	; 59
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <__vector_37>:
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	11 24       	eor	r1, r1
 64a:	0b b6       	in	r0, 0x3b	; 59
 64c:	0f 92       	push	r0
 64e:	8f 93       	push	r24
 650:	9f 93       	push	r25
 652:	ef 93       	push	r30
 654:	ff 93       	push	r31
 656:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <_ZL12UART1_TxHead>
 65a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <_ZL12UART1_TxTail>
 65e:	98 17       	cp	r25, r24
 660:	69 f0       	breq	.+26     	; 0x67c <__vector_37+0x3c>
 662:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <_ZL12UART1_TxTail>
 666:	ef 5f       	subi	r30, 0xFF	; 255
 668:	ef 71       	andi	r30, 0x1F	; 31
 66a:	e0 93 d9 02 	sts	0x02D9, r30	; 0x8002d9 <_ZL12UART1_TxTail>
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	e5 50       	subi	r30, 0x05	; 5
 672:	fd 4f       	sbci	r31, 0xFD	; 253
 674:	80 81       	ld	r24, Z
 676:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 67a:	05 c0       	rjmp	.+10     	; 0x686 <__vector_37+0x46>
 67c:	e9 ec       	ldi	r30, 0xC9	; 201
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	8f 7d       	andi	r24, 0xDF	; 223
 684:	80 83       	st	Z, r24
 686:	ff 91       	pop	r31
 688:	ef 91       	pop	r30
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	0f 90       	pop	r0
 690:	0b be       	out	0x3b, r0	; 59
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <__vector_51>:
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
 6a6:	0b b6       	in	r0, 0x3b	; 59
 6a8:	0f 92       	push	r0
 6aa:	2f 93       	push	r18
 6ac:	8f 93       	push	r24
 6ae:	9f 93       	push	r25
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
 6b4:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 6b8:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 6bc:	88 71       	andi	r24, 0x18	; 24
 6be:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <_ZL12UART2_RxHead>
 6c2:	ef 5f       	subi	r30, 0xFF	; 255
 6c4:	ef 71       	andi	r30, 0x1F	; 31
 6c6:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <_ZL12UART2_RxTail>
 6ca:	e9 17       	cp	r30, r25
 6cc:	39 f0       	breq	.+14     	; 0x6dc <__vector_51+0x40>
 6ce:	e0 93 93 02 	sts	0x0293, r30	; 0x800293 <_ZL12UART2_RxHead>
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	ea 56       	subi	r30, 0x6A	; 106
 6d6:	fd 4f       	sbci	r31, 0xFD	; 253
 6d8:	20 83       	st	Z, r18
 6da:	01 c0       	rjmp	.+2      	; 0x6de <__vector_51+0x42>
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <_ZL17UART2_LastRxError>
 6e2:	ff 91       	pop	r31
 6e4:	ef 91       	pop	r30
 6e6:	9f 91       	pop	r25
 6e8:	8f 91       	pop	r24
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0b be       	out	0x3b, r0	; 59
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <__vector_52>:
 6fa:	1f 92       	push	r1
 6fc:	0f 92       	push	r0
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	0f 92       	push	r0
 702:	11 24       	eor	r1, r1
 704:	0b b6       	in	r0, 0x3b	; 59
 706:	0f 92       	push	r0
 708:	8f 93       	push	r24
 70a:	9f 93       	push	r25
 70c:	ef 93       	push	r30
 70e:	ff 93       	push	r31
 710:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <_ZL12UART2_TxHead>
 714:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <_ZL12UART2_TxTail>
 718:	98 17       	cp	r25, r24
 71a:	69 f0       	breq	.+26     	; 0x736 <__vector_52+0x3c>
 71c:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <_ZL12UART2_TxTail>
 720:	ef 5f       	subi	r30, 0xFF	; 255
 722:	ef 71       	andi	r30, 0x1F	; 31
 724:	e0 93 94 02 	sts	0x0294, r30	; 0x800294 <_ZL12UART2_TxTail>
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	ea 54       	subi	r30, 0x4A	; 74
 72c:	fd 4f       	sbci	r31, 0xFD	; 253
 72e:	80 81       	ld	r24, Z
 730:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 734:	05 c0       	rjmp	.+10     	; 0x740 <__vector_52+0x46>
 736:	e1 ed       	ldi	r30, 0xD1	; 209
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	8f 7d       	andi	r24, 0xDF	; 223
 73e:	80 83       	st	Z, r24
 740:	ff 91       	pop	r31
 742:	ef 91       	pop	r30
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	0f 90       	pop	r0
 74a:	0b be       	out	0x3b, r0	; 59
 74c:	0f 90       	pop	r0
 74e:	0f be       	out	0x3f, r0	; 63
 750:	0f 90       	pop	r0
 752:	1f 90       	pop	r1
 754:	18 95       	reti

00000756 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	0b b6       	in	r0, 0x3b	; 59
 762:	0f 92       	push	r0
 764:	2f 93       	push	r18
 766:	8f 93       	push	r24
 768:	9f 93       	push	r25
 76a:	ef 93       	push	r30
 76c:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
 76e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	data = UART3_DATA;
 772:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
 776:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
 778:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <_ZL12UART3_RxHead>
 77c:	ef 5f       	subi	r30, 0xFF	; 255
 77e:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
 780:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <_ZL12UART3_RxTail>
 784:	e9 17       	cp	r30, r25
 786:	39 f0       	breq	.+14     	; 0x796 <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
 788:	e0 93 4e 02 	sts	0x024E, r30	; 0x80024e <_ZL12UART3_RxHead>
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	ef 5a       	subi	r30, 0xAF	; 175
 790:	fd 4f       	sbci	r31, 0xFD	; 253
 792:	20 83       	st	Z, r18
 794:	01 c0       	rjmp	.+2      	; 0x798 <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
 796:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
 798:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <__data_end>
}
 79c:	ff 91       	pop	r31
 79e:	ef 91       	pop	r30
 7a0:	9f 91       	pop	r25
 7a2:	8f 91       	pop	r24
 7a4:	2f 91       	pop	r18
 7a6:	0f 90       	pop	r0
 7a8:	0b be       	out	0x3b, r0	; 59
 7aa:	0f 90       	pop	r0
 7ac:	0f be       	out	0x3f, r0	; 63
 7ae:	0f 90       	pop	r0
 7b0:	1f 90       	pop	r1
 7b2:	18 95       	reti

000007b4 <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
 7b4:	1f 92       	push	r1
 7b6:	0f 92       	push	r0
 7b8:	0f b6       	in	r0, 0x3f	; 63
 7ba:	0f 92       	push	r0
 7bc:	11 24       	eor	r1, r1
 7be:	0b b6       	in	r0, 0x3b	; 59
 7c0:	0f 92       	push	r0
 7c2:	8f 93       	push	r24
 7c4:	9f 93       	push	r25
 7c6:	ef 93       	push	r30
 7c8:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
 7ca:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <_ZL12UART3_TxHead>
 7ce:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <_ZL12UART3_TxTail>
 7d2:	98 17       	cp	r25, r24
 7d4:	69 f0       	breq	.+26     	; 0x7f0 <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
 7d6:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <_ZL12UART3_TxTail>
 7da:	ef 5f       	subi	r30, 0xFF	; 255
 7dc:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
 7de:	e0 93 4f 02 	sts	0x024F, r30	; 0x80024f <_ZL12UART3_TxTail>
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	ef 58       	subi	r30, 0x8F	; 143
 7e6:	fd 4f       	sbci	r31, 0xFD	; 253
 7e8:	80 81       	ld	r24, Z
 7ea:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 7ee:	05 c0       	rjmp	.+10     	; 0x7fa <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
 7f0:	e1 e3       	ldi	r30, 0x31	; 49
 7f2:	f1 e0       	ldi	r31, 0x01	; 1
 7f4:	80 81       	ld	r24, Z
 7f6:	8f 7d       	andi	r24, 0xDF	; 223
 7f8:	80 83       	st	Z, r24
	}
}
 7fa:	ff 91       	pop	r31
 7fc:	ef 91       	pop	r30
 7fe:	9f 91       	pop	r25
 800:	8f 91       	pop	r24
 802:	0f 90       	pop	r0
 804:	0b be       	out	0x3b, r0	; 59
 806:	0f 90       	pop	r0
 808:	0f be       	out	0x3f, r0	; 63
 80a:	0f 90       	pop	r0
 80c:	1f 90       	pop	r1
 80e:	18 95       	reti

00000810 <_ZN5Wheel4initEv>:
#include "uart.h"
#include "Wheel.h"


void Wheel::init()
{
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	ec 01       	movw	r28, r24
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
 816:	87 e6       	ldi	r24, 0x67	; 103
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	58 de       	rcall	.-848    	; 0x4cc <_Z10uart0_initj>
	uart0_puts("Uart is working..\r\n");
 81c:	80 e3       	ldi	r24, 0x30	; 48
 81e:	92 e0       	ldi	r25, 0x02	; 2
 820:	c6 de       	rcall	.-628    	; 0x5ae <_Z10uart0_putsPKc>
	robot_rpm = 700;
 822:	8c eb       	ldi	r24, 0xBC	; 188
 824:	92 e0       	ldi	r25, 0x02	; 2
 826:	99 8b       	std	Y+17, r25	; 0x11
 828:	88 8b       	std	Y+16, r24	; 0x10
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
 82a:	1a 8a       	std	Y+18, r1	; 0x12
 82c:	1b 8a       	std	Y+19, r1	; 0x13
 82e:	1c 8a       	std	Y+20, r1	; 0x14
 830:	1d 8a       	std	Y+21, r1	; 0x15
		velocity_robot[i] = 0;
 832:	18 82       	st	Y, r1
 834:	19 82       	std	Y+1, r1	; 0x01
 836:	1a 82       	std	Y+2, r1	; 0x02
 838:	1b 82       	std	Y+3, r1	; 0x03
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
	uart0_puts("Uart is working..\r\n");
	robot_rpm = 700;
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
 83a:	1e 8a       	std	Y+22, r1	; 0x16
 83c:	1f 8a       	std	Y+23, r1	; 0x17
 83e:	18 8e       	std	Y+24, r1	; 0x18
 840:	19 8e       	std	Y+25, r1	; 0x19
		velocity_robot[i] = 0;
 842:	1c 82       	std	Y+4, r1	; 0x04
 844:	1d 82       	std	Y+5, r1	; 0x05
 846:	1e 82       	std	Y+6, r1	; 0x06
 848:	1f 82       	std	Y+7, r1	; 0x07
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
	uart0_puts("Uart is working..\r\n");
	robot_rpm = 700;
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
 84a:	1a 8e       	std	Y+26, r1	; 0x1a
 84c:	1b 8e       	std	Y+27, r1	; 0x1b
 84e:	1c 8e       	std	Y+28, r1	; 0x1c
 850:	1d 8e       	std	Y+29, r1	; 0x1d
		velocity_robot[i] = 0;
 852:	18 86       	std	Y+8, r1	; 0x08
 854:	19 86       	std	Y+9, r1	; 0x09
 856:	1a 86       	std	Y+10, r1	; 0x0a
 858:	1b 86       	std	Y+11, r1	; 0x0b
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
	uart0_puts("Uart is working..\r\n");
	robot_rpm = 700;
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
 85a:	1e 8e       	std	Y+30, r1	; 0x1e
 85c:	1f 8e       	std	Y+31, r1	; 0x1f
 85e:	18 a2       	std	Y+32, r1	; 0x20
 860:	19 a2       	std	Y+33, r1	; 0x21
		velocity_robot[i] = 0;
 862:	1c 86       	std	Y+12, r1	; 0x0c
 864:	1d 86       	std	Y+13, r1	; 0x0d
 866:	1e 86       	std	Y+14, r1	; 0x0e
 868:	1f 86       	std	Y+15, r1	; 0x0f
	}
	m1.Initialise(1);
 86a:	61 e0       	ldi	r22, 0x01	; 1
 86c:	ce 01       	movw	r24, r28
 86e:	8a 96       	adiw	r24, 0x2a	; 42
 870:	c2 dd       	rcall	.-1148   	; 0x3f6 <_ZN5Motor10InitialiseEh>
	m2.Initialise(2);
 872:	62 e0       	ldi	r22, 0x02	; 2
 874:	ce 01       	movw	r24, r28
 876:	8b 96       	adiw	r24, 0x2b	; 43
 878:	be dd       	rcall	.-1156   	; 0x3f6 <_ZN5Motor10InitialiseEh>
	m3.Initialise(3);
 87a:	63 e0       	ldi	r22, 0x03	; 3
 87c:	ce 01       	movw	r24, r28
 87e:	8c 96       	adiw	r24, 0x2c	; 44
 880:	ba dd       	rcall	.-1164   	; 0x3f6 <_ZN5Motor10InitialiseEh>
	m4.Initialise(4);
 882:	64 e0       	ldi	r22, 0x04	; 4
 884:	ce 01       	movw	r24, r28
 886:	8d 96       	adiw	r24, 0x2d	; 45
 888:	b6 dd       	rcall	.-1172   	; 0x3f6 <_ZN5Motor10InitialiseEh>
}
 88a:	df 91       	pop	r29
 88c:	cf 91       	pop	r28
 88e:	08 95       	ret

00000890 <_ZN5Wheel11init_robvelEi>:

void Wheel::init_robvel(int vel)
{
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	ec 01       	movw	r28, r24
	for(int i=0;i<3;i++)
		velocity_robot[i] = vel;
 896:	07 2e       	mov	r0, r23
 898:	00 0c       	add	r0, r0
 89a:	88 0b       	sbc	r24, r24
 89c:	99 0b       	sbc	r25, r25
 89e:	0e d2       	rcall	.+1052   	; 0xcbc <__floatsisf>
 8a0:	68 83       	st	Y, r22
 8a2:	79 83       	std	Y+1, r23	; 0x01
 8a4:	8a 83       	std	Y+2, r24	; 0x02
 8a6:	9b 83       	std	Y+3, r25	; 0x03
 8a8:	6c 83       	std	Y+4, r22	; 0x04
 8aa:	7d 83       	std	Y+5, r23	; 0x05
 8ac:	8e 83       	std	Y+6, r24	; 0x06
 8ae:	9f 83       	std	Y+7, r25	; 0x07
 8b0:	68 87       	std	Y+8, r22	; 0x08
 8b2:	79 87       	std	Y+9, r23	; 0x09
 8b4:	8a 87       	std	Y+10, r24	; 0x0a
 8b6:	9b 87       	std	Y+11, r25	; 0x0b
}
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	08 95       	ret

000008be <_ZN5Wheel17get_joystick_dataEv>:

void Wheel::get_joystick_data()
{
 8be:	cf 93       	push	r28
 8c0:	df 93       	push	r29
 8c2:	ec 01       	movw	r28, r24
   char data = '0';
    
	
    if(uart0_available())
 8c4:	82 de       	rcall	.-764    	; 0x5ca <_Z15uart0_availablev>
 8c6:	89 2b       	or	r24, r25
 8c8:	09 f4       	brne	.+2      	; 0x8cc <_ZN5Wheel17get_joystick_dataEv+0xe>
 8ca:	7b c0       	rjmp	.+246    	; 0x9c2 <_ZN5Wheel17get_joystick_dataEv+0x104>
    {
        data =uart0_getc();
 8cc:	18 de       	rcall	.-976    	; 0x4fe <_Z10uart0_getcv>
	else
	{
		data ='0';
	}
	
    switch (data)
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	fc 01       	movw	r30, r24
 8d2:	e2 54       	subi	r30, 0x42	; 66
 8d4:	f1 09       	sbc	r31, r1
 8d6:	e8 32       	cpi	r30, 0x28	; 40
 8d8:	f1 05       	cpc	r31, r1
 8da:	08 f0       	brcs	.+2      	; 0x8de <_ZN5Wheel17get_joystick_dataEv+0x20>
 8dc:	72 c0       	rjmp	.+228    	; 0x9c2 <_ZN5Wheel17get_joystick_dataEv+0x104>
 8de:	88 27       	eor	r24, r24
 8e0:	ee 58       	subi	r30, 0x8E	; 142
 8e2:	ff 4f       	sbci	r31, 0xFF	; 255
 8e4:	8f 4f       	sbci	r24, 0xFF	; 255
 8e6:	ec c2       	rjmp	.+1496   	; 0xec0 <__tablejump2__>
    {
	    case 'F':
		init_robvel(0);
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	70 e0       	ldi	r23, 0x00	; 0
 8ec:	ce 01       	movw	r24, r28
 8ee:	d0 df       	rcall	.-96     	; 0x890 <_ZN5Wheel11init_robvelEi>
	    velocity_robot[0] = robot_rpm;
 8f0:	68 89       	ldd	r22, Y+16	; 0x10
 8f2:	79 89       	ldd	r23, Y+17	; 0x11
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	df d1       	rcall	.+958    	; 0xcb8 <__floatunsisf>
 8fa:	68 83       	st	Y, r22
 8fc:	79 83       	std	Y+1, r23	; 0x01
 8fe:	8a 83       	std	Y+2, r24	; 0x02
 900:	9b 83       	std	Y+3, r25	; 0x03
		break;
 902:	5f c0       	rjmp	.+190    	; 0x9c2 <_ZN5Wheel17get_joystick_dataEv+0x104>
	    case 'B':
		init_robvel(0);
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	70 e0       	ldi	r23, 0x00	; 0
 908:	ce 01       	movw	r24, r28
 90a:	c2 df       	rcall	.-124    	; 0x890 <_ZN5Wheel11init_robvelEi>
	    velocity_robot[0] = -robot_rpm;
 90c:	68 89       	ldd	r22, Y+16	; 0x10
 90e:	79 89       	ldd	r23, Y+17	; 0x11
 910:	71 95       	neg	r23
 912:	61 95       	neg	r22
 914:	71 09       	sbc	r23, r1
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	ce d1       	rcall	.+924    	; 0xcb8 <__floatunsisf>
 91c:	68 83       	st	Y, r22
 91e:	79 83       	std	Y+1, r23	; 0x01
 920:	8a 83       	std	Y+2, r24	; 0x02
 922:	9b 83       	std	Y+3, r25	; 0x03
		break;
 924:	4e c0       	rjmp	.+156    	; 0x9c2 <_ZN5Wheel17get_joystick_dataEv+0x104>
	    case 'L':
		init_robvel(0);
 926:	60 e0       	ldi	r22, 0x00	; 0
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	ce 01       	movw	r24, r28
 92c:	b1 df       	rcall	.-158    	; 0x890 <_ZN5Wheel11init_robvelEi>
	    velocity_robot[1] = robot_rpm;
 92e:	68 89       	ldd	r22, Y+16	; 0x10
 930:	79 89       	ldd	r23, Y+17	; 0x11
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	c0 d1       	rcall	.+896    	; 0xcb8 <__floatunsisf>
 938:	6c 83       	std	Y+4, r22	; 0x04
 93a:	7d 83       	std	Y+5, r23	; 0x05
 93c:	8e 83       	std	Y+6, r24	; 0x06
 93e:	9f 83       	std	Y+7, r25	; 0x07
		break;
 940:	40 c0       	rjmp	.+128    	; 0x9c2 <_ZN5Wheel17get_joystick_dataEv+0x104>
	    case 'R':
		init_robvel(0);
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	ce 01       	movw	r24, r28
 948:	a3 df       	rcall	.-186    	; 0x890 <_ZN5Wheel11init_robvelEi>
	    velocity_robot[1] = -robot_rpm;
 94a:	68 89       	ldd	r22, Y+16	; 0x10
 94c:	79 89       	ldd	r23, Y+17	; 0x11
 94e:	71 95       	neg	r23
 950:	61 95       	neg	r22
 952:	71 09       	sbc	r23, r1
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	af d1       	rcall	.+862    	; 0xcb8 <__floatunsisf>
 95a:	6c 83       	std	Y+4, r22	; 0x04
 95c:	7d 83       	std	Y+5, r23	; 0x05
 95e:	8e 83       	std	Y+6, r24	; 0x06
 960:	9f 83       	std	Y+7, r25	; 0x07
		break;
 962:	2f c0       	rjmp	.+94     	; 0x9c2 <_ZN5Wheel17get_joystick_dataEv+0x104>
	    case 'G':
		init_robvel(0);
 964:	60 e0       	ldi	r22, 0x00	; 0
 966:	70 e0       	ldi	r23, 0x00	; 0
 968:	ce 01       	movw	r24, r28
 96a:	92 df       	rcall	.-220    	; 0x890 <_ZN5Wheel11init_robvelEi>
	    velocity_robot[2] = robot_rpm;
 96c:	68 89       	ldd	r22, Y+16	; 0x10
 96e:	79 89       	ldd	r23, Y+17	; 0x11
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	a1 d1       	rcall	.+834    	; 0xcb8 <__floatunsisf>
 976:	68 87       	std	Y+8, r22	; 0x08
 978:	79 87       	std	Y+9, r23	; 0x09
 97a:	8a 87       	std	Y+10, r24	; 0x0a
 97c:	9b 87       	std	Y+11, r25	; 0x0b
		break;
 97e:	21 c0       	rjmp	.+66     	; 0x9c2 <_ZN5Wheel17get_joystick_dataEv+0x104>
	    case 'I':
		init_robvel(0);
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	70 e0       	ldi	r23, 0x00	; 0
 984:	ce 01       	movw	r24, r28
 986:	84 df       	rcall	.-248    	; 0x890 <_ZN5Wheel11init_robvelEi>
	    velocity_robot[2] = -robot_rpm;
 988:	68 89       	ldd	r22, Y+16	; 0x10
 98a:	79 89       	ldd	r23, Y+17	; 0x11
 98c:	71 95       	neg	r23
 98e:	61 95       	neg	r22
 990:	71 09       	sbc	r23, r1
 992:	80 e0       	ldi	r24, 0x00	; 0
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	90 d1       	rcall	.+800    	; 0xcb8 <__floatunsisf>
 998:	68 87       	std	Y+8, r22	; 0x08
 99a:	79 87       	std	Y+9, r23	; 0x09
 99c:	8a 87       	std	Y+10, r24	; 0x0a
 99e:	9b 87       	std	Y+11, r25	; 0x0b
		break;
 9a0:	10 c0       	rjmp	.+32     	; 0x9c2 <_ZN5Wheel17get_joystick_dataEv+0x104>
		case 'i':
		robot_rpm =robot_rpm+10;
 9a2:	88 89       	ldd	r24, Y+16	; 0x10
 9a4:	99 89       	ldd	r25, Y+17	; 0x11
 9a6:	0a 96       	adiw	r24, 0x0a	; 10
 9a8:	99 8b       	std	Y+17, r25	; 0x11
 9aa:	88 8b       	std	Y+16, r24	; 0x10
		break;
 9ac:	0a c0       	rjmp	.+20     	; 0x9c2 <_ZN5Wheel17get_joystick_dataEv+0x104>
		case 'd':
		robot_rpm =robot_rpm-10;
 9ae:	88 89       	ldd	r24, Y+16	; 0x10
 9b0:	99 89       	ldd	r25, Y+17	; 0x11
 9b2:	0a 97       	sbiw	r24, 0x0a	; 10
 9b4:	99 8b       	std	Y+17, r25	; 0x11
 9b6:	88 8b       	std	Y+16, r24	; 0x10
		break;
 9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <_ZN5Wheel17get_joystick_dataEv+0x104>
		case 'S':
		init_robvel(0);
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	ce 01       	movw	r24, r28
 9c0:	67 df       	rcall	.-306    	; 0x890 <_ZN5Wheel11init_robvelEi>
		break;
    }
	//uart0_putint(robot_rpm);
	if (robot_rpm>700) robot_rpm =700;
 9c2:	88 89       	ldd	r24, Y+16	; 0x10
 9c4:	99 89       	ldd	r25, Y+17	; 0x11
 9c6:	8d 3b       	cpi	r24, 0xBD	; 189
 9c8:	92 40       	sbci	r25, 0x02	; 2
 9ca:	20 f0       	brcs	.+8      	; 0x9d4 <_ZN5Wheel17get_joystick_dataEv+0x116>
 9cc:	8c eb       	ldi	r24, 0xBC	; 188
 9ce:	92 e0       	ldi	r25, 0x02	; 2
 9d0:	99 8b       	std	Y+17, r25	; 0x11
 9d2:	88 8b       	std	Y+16, r24	; 0x10
	if (robot_rpm<0) robot_rpm = 0;
}
 9d4:	df 91       	pop	r29
 9d6:	cf 91       	pop	r28
 9d8:	08 95       	ret

000009da <_ZN5Wheel24calculate_wheel_velocityEv>:

void Wheel::calculate_wheel_velocity()
{
 9da:	2f 92       	push	r2
 9dc:	3f 92       	push	r3
 9de:	4f 92       	push	r4
 9e0:	5f 92       	push	r5
 9e2:	6f 92       	push	r6
 9e4:	7f 92       	push	r7
 9e6:	8f 92       	push	r8
 9e8:	9f 92       	push	r9
 9ea:	af 92       	push	r10
 9ec:	bf 92       	push	r11
 9ee:	cf 92       	push	r12
 9f0:	df 92       	push	r13
 9f2:	ef 92       	push	r14
 9f4:	ff 92       	push	r15
 9f6:	0f 93       	push	r16
 9f8:	1f 93       	push	r17
 9fa:	cf 93       	push	r28
 9fc:	df 93       	push	r29
 9fe:	cd b7       	in	r28, 0x3d	; 61
 a00:	de b7       	in	r29, 0x3e	; 62
 a02:	e8 97       	sbiw	r28, 0x38	; 56
 a04:	0f b6       	in	r0, 0x3f	; 63
 a06:	f8 94       	cli
 a08:	de bf       	out	0x3e, r29	; 62
 a0a:	0f be       	out	0x3f, r0	; 63
 a0c:	cd bf       	out	0x3d, r28	; 61
 a0e:	9c ab       	std	Y+52, r25	; 0x34
 a10:	8b ab       	std	Y+51, r24	; 0x33
	float coupling_matrix[4][3] = {{-0.707,0.707,1},{-0.707,-0.707,1},{0.707,-0.707,1},{0.707,0.707,1}};
 a12:	80 e3       	ldi	r24, 0x30	; 48
 a14:	e0 e0       	ldi	r30, 0x00	; 0
 a16:	f2 e0       	ldi	r31, 0x02	; 2
 a18:	de 01       	movw	r26, r28
 a1a:	11 96       	adiw	r26, 0x01	; 1
 a1c:	01 90       	ld	r0, Z+
 a1e:	0d 92       	st	X+, r0
 a20:	8a 95       	dec	r24
 a22:	e1 f7       	brne	.-8      	; 0xa1c <_ZN5Wheel24calculate_wheel_velocityEv+0x42>
 a24:	8b a9       	ldd	r24, Y+51	; 0x33
 a26:	9c a9       	ldd	r25, Y+52	; 0x34
 a28:	42 96       	adiw	r24, 0x12	; 18
 a2a:	98 af       	std	Y+56, r25	; 0x38
 a2c:	8f ab       	std	Y+55, r24	; 0x37
 a2e:	fe 01       	movw	r30, r28
 a30:	31 96       	adiw	r30, 0x01	; 1
 a32:	6f 01       	movw	r12, r30
 a34:	4b a8       	ldd	r4, Y+51	; 0x33
 a36:	5c a8       	ldd	r5, Y+52	; 0x34
 a38:	f2 e2       	ldi	r31, 0x22	; 34
 a3a:	4f 0e       	add	r4, r31
 a3c:	51 1c       	adc	r5, r1
 a3e:	5c 01       	movw	r10, r24
 a40:	8b a9       	ldd	r24, Y+51	; 0x33
 a42:	8d ab       	std	Y+53, r24	; 0x35
 a44:	9c a9       	ldd	r25, Y+52	; 0x34
 a46:	9e ab       	std	Y+54, r25	; 0x36
 a48:	2b a8       	ldd	r2, Y+51	; 0x33
 a4a:	3c a8       	ldd	r3, Y+52	; 0x34
 a4c:	ec e0       	ldi	r30, 0x0C	; 12
 a4e:	2e 0e       	add	r2, r30
 a50:	31 1c       	adc	r3, r1
    for(int i=0;i<4;i++)
    {
        velocity_motor[i] = 0;
 a52:	36 01       	movw	r6, r12
 a54:	ba aa       	std	Y+50, r11	; 0x32
 a56:	a9 aa       	std	Y+49, r10	; 0x31
 a58:	f5 01       	movw	r30, r10
 a5a:	10 82       	st	Z, r1
 a5c:	11 82       	std	Z+1, r1	; 0x01
 a5e:	12 82       	std	Z+2, r1	; 0x02
 a60:	13 82       	std	Z+3, r1	; 0x03
 a62:	0d a9       	ldd	r16, Y+53	; 0x35
 a64:	1e a9       	ldd	r17, Y+54	; 0x36
 a66:	73 01       	movw	r14, r6
 a68:	81 2c       	mov	r8, r1
 a6a:	91 2c       	mov	r9, r1
 a6c:	c1 2c       	mov	r12, r1
 a6e:	d1 2c       	mov	r13, r1
        for(int j=0;j<3;j++)
        {
             velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
 a70:	f8 01       	movw	r30, r16
 a72:	61 91       	ld	r22, Z+
 a74:	71 91       	ld	r23, Z+
 a76:	81 91       	ld	r24, Z+
 a78:	91 91       	ld	r25, Z+
 a7a:	8f 01       	movw	r16, r30
 a7c:	f7 01       	movw	r30, r14
 a7e:	21 91       	ld	r18, Z+
 a80:	31 91       	ld	r19, Z+
 a82:	41 91       	ld	r20, Z+
 a84:	51 91       	ld	r21, Z+
 a86:	7f 01       	movw	r14, r30
 a88:	a5 d1       	rcall	.+842    	; 0xdd4 <__mulsf3>
 a8a:	9b 01       	movw	r18, r22
 a8c:	ac 01       	movw	r20, r24
 a8e:	68 2d       	mov	r22, r8
 a90:	79 2d       	mov	r23, r9
 a92:	8c 2d       	mov	r24, r12
 a94:	9d 2d       	mov	r25, r13
 a96:	7b d0       	rcall	.+246    	; 0xb8e <__addsf3>
 a98:	86 2e       	mov	r8, r22
 a9a:	97 2e       	mov	r9, r23
 a9c:	c8 2e       	mov	r12, r24
 a9e:	d9 2e       	mov	r13, r25
{
	float coupling_matrix[4][3] = {{-0.707,0.707,1},{-0.707,-0.707,1},{0.707,-0.707,1},{0.707,0.707,1}};
    for(int i=0;i<4;i++)
    {
        velocity_motor[i] = 0;
        for(int j=0;j<3;j++)
 aa0:	02 15       	cp	r16, r2
 aa2:	13 05       	cpc	r17, r3
 aa4:	29 f7       	brne	.-54     	; 0xa70 <_ZN5Wheel24calculate_wheel_velocityEv+0x96>
 aa6:	86 2f       	mov	r24, r22
 aa8:	99 2d       	mov	r25, r9
 aaa:	ac 2d       	mov	r26, r12
 aac:	bd 2d       	mov	r27, r13
 aae:	e9 a9       	ldd	r30, Y+49	; 0x31
 ab0:	fa a9       	ldd	r31, Y+50	; 0x32
 ab2:	80 83       	st	Z, r24
 ab4:	91 83       	std	Z+1, r25	; 0x01
 ab6:	a2 83       	std	Z+2, r26	; 0x02
 ab8:	b3 83       	std	Z+3, r27	; 0x03
 aba:	f4 e0       	ldi	r31, 0x04	; 4
 abc:	af 0e       	add	r10, r31
 abe:	b1 1c       	adc	r11, r1
 ac0:	8c e0       	ldi	r24, 0x0C	; 12
 ac2:	68 0e       	add	r6, r24
 ac4:	71 1c       	adc	r7, r1
}

void Wheel::calculate_wheel_velocity()
{
	float coupling_matrix[4][3] = {{-0.707,0.707,1},{-0.707,-0.707,1},{0.707,-0.707,1},{0.707,0.707,1}};
    for(int i=0;i<4;i++)
 ac6:	a4 14       	cp	r10, r4
 ac8:	b5 04       	cpc	r11, r5
 aca:	21 f6       	brne	.-120    	; 0xa54 <_ZN5Wheel24calculate_wheel_velocityEv+0x7a>
 acc:	cb a8       	ldd	r12, Y+51	; 0x33
 ace:	dc a8       	ldd	r13, Y+52	; 0x34
 ad0:	9a e2       	ldi	r25, 0x2A	; 42
 ad2:	c9 0e       	add	r12, r25
 ad4:	d1 1c       	adc	r13, r1
        }
    }
	
    for(int i=0;i<4;i++)
    {
        ocr_motor[i] = (int(249*velocity_motor[i])/(MAX_RPM));//multiply by icr_top value
 ad6:	0f 2e       	mov	r0, r31
 ad8:	fc eb       	ldi	r31, 0xBC	; 188
 ada:	ef 2e       	mov	r14, r31
 adc:	f2 e0       	ldi	r31, 0x02	; 2
 ade:	ff 2e       	mov	r15, r31
 ae0:	f0 2d       	mov	r31, r0
 ae2:	0f a9       	ldd	r16, Y+55	; 0x37
 ae4:	18 ad       	ldd	r17, Y+56	; 0x38
 ae6:	f8 01       	movw	r30, r16
 ae8:	61 91       	ld	r22, Z+
 aea:	71 91       	ld	r23, Z+
 aec:	81 91       	ld	r24, Z+
 aee:	91 91       	ld	r25, Z+
 af0:	8f 01       	movw	r16, r30
 af2:	52 01       	movw	r10, r4
 af4:	20 e0       	ldi	r18, 0x00	; 0
 af6:	30 e0       	ldi	r19, 0x00	; 0
 af8:	49 e7       	ldi	r20, 0x79	; 121
 afa:	53 e4       	ldi	r21, 0x43	; 67
 afc:	6b d1       	rcall	.+726    	; 0xdd4 <__mulsf3>
 afe:	ab d0       	rcall	.+342    	; 0xc56 <__fixsfsi>
 b00:	cb 01       	movw	r24, r22
 b02:	b7 01       	movw	r22, r14
 b04:	ca d1       	rcall	.+916    	; 0xe9a <__divmodhi4>
 b06:	f2 01       	movw	r30, r4
 b08:	61 93       	st	Z+, r22
 b0a:	71 93       	st	Z+, r23
 b0c:	2f 01       	movw	r4, r30
		uart0_puts(" OCR: ");
 b0e:	84 e4       	ldi	r24, 0x44	; 68
 b10:	92 e0       	ldi	r25, 0x02	; 2
 b12:	4d dd       	rcall	.-1382   	; 0x5ae <_Z10uart0_putsPKc>
		uart0_putint(ocr_motor[i]);
 b14:	f5 01       	movw	r30, r10
 b16:	80 81       	ld	r24, Z
 b18:	91 81       	ldd	r25, Z+1	; 0x01
 b1a:	21 dd       	rcall	.-1470   	; 0x55e <_Z12uart0_putinti>
        {
             velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
        }
    }
	
    for(int i=0;i<4;i++)
 b1c:	4c 14       	cp	r4, r12
 b1e:	5d 04       	cpc	r5, r13
 b20:	11 f7       	brne	.-60     	; 0xae6 <_ZN5Wheel24calculate_wheel_velocityEv+0x10c>
		uart0_puts(" OCR: ");
		uart0_putint(ocr_motor[i]);
		//velocity_robot[i] = 0;
	  
    }
	 uart0_puts("\r\n");
 b22:	81 e4       	ldi	r24, 0x41	; 65
 b24:	92 e0       	ldi	r25, 0x02	; 2
 b26:	43 dd       	rcall	.-1402   	; 0x5ae <_Z10uart0_putsPKc>
}
 b28:	e8 96       	adiw	r28, 0x38	; 56
 b2a:	0f b6       	in	r0, 0x3f	; 63
 b2c:	f8 94       	cli
 b2e:	de bf       	out	0x3e, r29	; 62
 b30:	0f be       	out	0x3f, r0	; 63
 b32:	cd bf       	out	0x3d, r28	; 61
 b34:	df 91       	pop	r29
 b36:	cf 91       	pop	r28
 b38:	1f 91       	pop	r17
 b3a:	0f 91       	pop	r16
 b3c:	ff 90       	pop	r15
 b3e:	ef 90       	pop	r14
 b40:	df 90       	pop	r13
 b42:	cf 90       	pop	r12
 b44:	bf 90       	pop	r11
 b46:	af 90       	pop	r10
 b48:	9f 90       	pop	r9
 b4a:	8f 90       	pop	r8
 b4c:	7f 90       	pop	r7
 b4e:	6f 90       	pop	r6
 b50:	5f 90       	pop	r5
 b52:	4f 90       	pop	r4
 b54:	3f 90       	pop	r3
 b56:	2f 90       	pop	r2
 b58:	08 95       	ret

00000b5a <_ZN5Wheel21update_wheel_velocityEv>:

void Wheel::update_wheel_velocity()
{
 b5a:	cf 93       	push	r28
 b5c:	df 93       	push	r29
 b5e:	ec 01       	movw	r28, r24
    m1.SetOcrValue(ocr_motor[0]);
 b60:	6a a1       	ldd	r22, Y+34	; 0x22
 b62:	7b a1       	ldd	r23, Y+35	; 0x23
 b64:	8a 96       	adiw	r24, 0x2a	; 42
 b66:	0b dc       	rcall	.-2026   	; 0x37e <_ZN5Motor11SetOcrValueEi>
    m2.SetOcrValue(ocr_motor[1]);
 b68:	6c a1       	ldd	r22, Y+36	; 0x24
 b6a:	7d a1       	ldd	r23, Y+37	; 0x25
 b6c:	ce 01       	movw	r24, r28
 b6e:	8b 96       	adiw	r24, 0x2b	; 43
 b70:	06 dc       	rcall	.-2036   	; 0x37e <_ZN5Motor11SetOcrValueEi>
    m3.SetOcrValue(ocr_motor[2]);
 b72:	6e a1       	ldd	r22, Y+38	; 0x26
 b74:	7f a1       	ldd	r23, Y+39	; 0x27
 b76:	ce 01       	movw	r24, r28
 b78:	8c 96       	adiw	r24, 0x2c	; 44
 b7a:	01 dc       	rcall	.-2046   	; 0x37e <_ZN5Motor11SetOcrValueEi>
    m4.SetOcrValue(ocr_motor[3]);
 b7c:	68 a5       	ldd	r22, Y+40	; 0x28
 b7e:	79 a5       	ldd	r23, Y+41	; 0x29
 b80:	ce 01       	movw	r24, r28
 b82:	8d 96       	adiw	r24, 0x2d	; 45
 b84:	fc db       	rcall	.-2056   	; 0x37e <_ZN5Motor11SetOcrValueEi>
}
 b86:	df 91       	pop	r29
 b88:	cf 91       	pop	r28
 b8a:	08 95       	ret

00000b8c <__subsf3>:
 b8c:	50 58       	subi	r21, 0x80	; 128

00000b8e <__addsf3>:
 b8e:	bb 27       	eor	r27, r27
 b90:	aa 27       	eor	r26, r26
 b92:	0e d0       	rcall	.+28     	; 0xbb0 <__addsf3x>
 b94:	e5 c0       	rjmp	.+458    	; 0xd60 <__fp_round>
 b96:	d6 d0       	rcall	.+428    	; 0xd44 <__fp_pscA>
 b98:	30 f0       	brcs	.+12     	; 0xba6 <__addsf3+0x18>
 b9a:	db d0       	rcall	.+438    	; 0xd52 <__fp_pscB>
 b9c:	20 f0       	brcs	.+8      	; 0xba6 <__addsf3+0x18>
 b9e:	31 f4       	brne	.+12     	; 0xbac <__addsf3+0x1e>
 ba0:	9f 3f       	cpi	r25, 0xFF	; 255
 ba2:	11 f4       	brne	.+4      	; 0xba8 <__addsf3+0x1a>
 ba4:	1e f4       	brtc	.+6      	; 0xbac <__addsf3+0x1e>
 ba6:	cb c0       	rjmp	.+406    	; 0xd3e <__fp_nan>
 ba8:	0e f4       	brtc	.+2      	; 0xbac <__addsf3+0x1e>
 baa:	e0 95       	com	r30
 bac:	e7 fb       	bst	r30, 7
 bae:	c1 c0       	rjmp	.+386    	; 0xd32 <__fp_inf>

00000bb0 <__addsf3x>:
 bb0:	e9 2f       	mov	r30, r25
 bb2:	e7 d0       	rcall	.+462    	; 0xd82 <__fp_split3>
 bb4:	80 f3       	brcs	.-32     	; 0xb96 <__addsf3+0x8>
 bb6:	ba 17       	cp	r27, r26
 bb8:	62 07       	cpc	r22, r18
 bba:	73 07       	cpc	r23, r19
 bbc:	84 07       	cpc	r24, r20
 bbe:	95 07       	cpc	r25, r21
 bc0:	18 f0       	brcs	.+6      	; 0xbc8 <__addsf3x+0x18>
 bc2:	71 f4       	brne	.+28     	; 0xbe0 <__addsf3x+0x30>
 bc4:	9e f5       	brtc	.+102    	; 0xc2c <__addsf3x+0x7c>
 bc6:	ff c0       	rjmp	.+510    	; 0xdc6 <__fp_zero>
 bc8:	0e f4       	brtc	.+2      	; 0xbcc <__addsf3x+0x1c>
 bca:	e0 95       	com	r30
 bcc:	0b 2e       	mov	r0, r27
 bce:	ba 2f       	mov	r27, r26
 bd0:	a0 2d       	mov	r26, r0
 bd2:	0b 01       	movw	r0, r22
 bd4:	b9 01       	movw	r22, r18
 bd6:	90 01       	movw	r18, r0
 bd8:	0c 01       	movw	r0, r24
 bda:	ca 01       	movw	r24, r20
 bdc:	a0 01       	movw	r20, r0
 bde:	11 24       	eor	r1, r1
 be0:	ff 27       	eor	r31, r31
 be2:	59 1b       	sub	r21, r25
 be4:	99 f0       	breq	.+38     	; 0xc0c <__addsf3x+0x5c>
 be6:	59 3f       	cpi	r21, 0xF9	; 249
 be8:	50 f4       	brcc	.+20     	; 0xbfe <__addsf3x+0x4e>
 bea:	50 3e       	cpi	r21, 0xE0	; 224
 bec:	68 f1       	brcs	.+90     	; 0xc48 <__addsf3x+0x98>
 bee:	1a 16       	cp	r1, r26
 bf0:	f0 40       	sbci	r31, 0x00	; 0
 bf2:	a2 2f       	mov	r26, r18
 bf4:	23 2f       	mov	r18, r19
 bf6:	34 2f       	mov	r19, r20
 bf8:	44 27       	eor	r20, r20
 bfa:	58 5f       	subi	r21, 0xF8	; 248
 bfc:	f3 cf       	rjmp	.-26     	; 0xbe4 <__addsf3x+0x34>
 bfe:	46 95       	lsr	r20
 c00:	37 95       	ror	r19
 c02:	27 95       	ror	r18
 c04:	a7 95       	ror	r26
 c06:	f0 40       	sbci	r31, 0x00	; 0
 c08:	53 95       	inc	r21
 c0a:	c9 f7       	brne	.-14     	; 0xbfe <__addsf3x+0x4e>
 c0c:	7e f4       	brtc	.+30     	; 0xc2c <__addsf3x+0x7c>
 c0e:	1f 16       	cp	r1, r31
 c10:	ba 0b       	sbc	r27, r26
 c12:	62 0b       	sbc	r22, r18
 c14:	73 0b       	sbc	r23, r19
 c16:	84 0b       	sbc	r24, r20
 c18:	ba f0       	brmi	.+46     	; 0xc48 <__addsf3x+0x98>
 c1a:	91 50       	subi	r25, 0x01	; 1
 c1c:	a1 f0       	breq	.+40     	; 0xc46 <__addsf3x+0x96>
 c1e:	ff 0f       	add	r31, r31
 c20:	bb 1f       	adc	r27, r27
 c22:	66 1f       	adc	r22, r22
 c24:	77 1f       	adc	r23, r23
 c26:	88 1f       	adc	r24, r24
 c28:	c2 f7       	brpl	.-16     	; 0xc1a <__addsf3x+0x6a>
 c2a:	0e c0       	rjmp	.+28     	; 0xc48 <__addsf3x+0x98>
 c2c:	ba 0f       	add	r27, r26
 c2e:	62 1f       	adc	r22, r18
 c30:	73 1f       	adc	r23, r19
 c32:	84 1f       	adc	r24, r20
 c34:	48 f4       	brcc	.+18     	; 0xc48 <__addsf3x+0x98>
 c36:	87 95       	ror	r24
 c38:	77 95       	ror	r23
 c3a:	67 95       	ror	r22
 c3c:	b7 95       	ror	r27
 c3e:	f7 95       	ror	r31
 c40:	9e 3f       	cpi	r25, 0xFE	; 254
 c42:	08 f0       	brcs	.+2      	; 0xc46 <__addsf3x+0x96>
 c44:	b3 cf       	rjmp	.-154    	; 0xbac <__addsf3+0x1e>
 c46:	93 95       	inc	r25
 c48:	88 0f       	add	r24, r24
 c4a:	08 f0       	brcs	.+2      	; 0xc4e <__addsf3x+0x9e>
 c4c:	99 27       	eor	r25, r25
 c4e:	ee 0f       	add	r30, r30
 c50:	97 95       	ror	r25
 c52:	87 95       	ror	r24
 c54:	08 95       	ret

00000c56 <__fixsfsi>:
 c56:	04 d0       	rcall	.+8      	; 0xc60 <__fixunssfsi>
 c58:	68 94       	set
 c5a:	b1 11       	cpse	r27, r1
 c5c:	b5 c0       	rjmp	.+362    	; 0xdc8 <__fp_szero>
 c5e:	08 95       	ret

00000c60 <__fixunssfsi>:
 c60:	98 d0       	rcall	.+304    	; 0xd92 <__fp_splitA>
 c62:	88 f0       	brcs	.+34     	; 0xc86 <__fixunssfsi+0x26>
 c64:	9f 57       	subi	r25, 0x7F	; 127
 c66:	90 f0       	brcs	.+36     	; 0xc8c <__fixunssfsi+0x2c>
 c68:	b9 2f       	mov	r27, r25
 c6a:	99 27       	eor	r25, r25
 c6c:	b7 51       	subi	r27, 0x17	; 23
 c6e:	a0 f0       	brcs	.+40     	; 0xc98 <__fixunssfsi+0x38>
 c70:	d1 f0       	breq	.+52     	; 0xca6 <__fixunssfsi+0x46>
 c72:	66 0f       	add	r22, r22
 c74:	77 1f       	adc	r23, r23
 c76:	88 1f       	adc	r24, r24
 c78:	99 1f       	adc	r25, r25
 c7a:	1a f0       	brmi	.+6      	; 0xc82 <__fixunssfsi+0x22>
 c7c:	ba 95       	dec	r27
 c7e:	c9 f7       	brne	.-14     	; 0xc72 <__fixunssfsi+0x12>
 c80:	12 c0       	rjmp	.+36     	; 0xca6 <__fixunssfsi+0x46>
 c82:	b1 30       	cpi	r27, 0x01	; 1
 c84:	81 f0       	breq	.+32     	; 0xca6 <__fixunssfsi+0x46>
 c86:	9f d0       	rcall	.+318    	; 0xdc6 <__fp_zero>
 c88:	b1 e0       	ldi	r27, 0x01	; 1
 c8a:	08 95       	ret
 c8c:	9c c0       	rjmp	.+312    	; 0xdc6 <__fp_zero>
 c8e:	67 2f       	mov	r22, r23
 c90:	78 2f       	mov	r23, r24
 c92:	88 27       	eor	r24, r24
 c94:	b8 5f       	subi	r27, 0xF8	; 248
 c96:	39 f0       	breq	.+14     	; 0xca6 <__fixunssfsi+0x46>
 c98:	b9 3f       	cpi	r27, 0xF9	; 249
 c9a:	cc f3       	brlt	.-14     	; 0xc8e <__fixunssfsi+0x2e>
 c9c:	86 95       	lsr	r24
 c9e:	77 95       	ror	r23
 ca0:	67 95       	ror	r22
 ca2:	b3 95       	inc	r27
 ca4:	d9 f7       	brne	.-10     	; 0xc9c <__fixunssfsi+0x3c>
 ca6:	3e f4       	brtc	.+14     	; 0xcb6 <__fixunssfsi+0x56>
 ca8:	90 95       	com	r25
 caa:	80 95       	com	r24
 cac:	70 95       	com	r23
 cae:	61 95       	neg	r22
 cb0:	7f 4f       	sbci	r23, 0xFF	; 255
 cb2:	8f 4f       	sbci	r24, 0xFF	; 255
 cb4:	9f 4f       	sbci	r25, 0xFF	; 255
 cb6:	08 95       	ret

00000cb8 <__floatunsisf>:
 cb8:	e8 94       	clt
 cba:	09 c0       	rjmp	.+18     	; 0xcce <__floatsisf+0x12>

00000cbc <__floatsisf>:
 cbc:	97 fb       	bst	r25, 7
 cbe:	3e f4       	brtc	.+14     	; 0xcce <__floatsisf+0x12>
 cc0:	90 95       	com	r25
 cc2:	80 95       	com	r24
 cc4:	70 95       	com	r23
 cc6:	61 95       	neg	r22
 cc8:	7f 4f       	sbci	r23, 0xFF	; 255
 cca:	8f 4f       	sbci	r24, 0xFF	; 255
 ccc:	9f 4f       	sbci	r25, 0xFF	; 255
 cce:	99 23       	and	r25, r25
 cd0:	a9 f0       	breq	.+42     	; 0xcfc <__floatsisf+0x40>
 cd2:	f9 2f       	mov	r31, r25
 cd4:	96 e9       	ldi	r25, 0x96	; 150
 cd6:	bb 27       	eor	r27, r27
 cd8:	93 95       	inc	r25
 cda:	f6 95       	lsr	r31
 cdc:	87 95       	ror	r24
 cde:	77 95       	ror	r23
 ce0:	67 95       	ror	r22
 ce2:	b7 95       	ror	r27
 ce4:	f1 11       	cpse	r31, r1
 ce6:	f8 cf       	rjmp	.-16     	; 0xcd8 <__floatsisf+0x1c>
 ce8:	fa f4       	brpl	.+62     	; 0xd28 <__floatsisf+0x6c>
 cea:	bb 0f       	add	r27, r27
 cec:	11 f4       	brne	.+4      	; 0xcf2 <__floatsisf+0x36>
 cee:	60 ff       	sbrs	r22, 0
 cf0:	1b c0       	rjmp	.+54     	; 0xd28 <__floatsisf+0x6c>
 cf2:	6f 5f       	subi	r22, 0xFF	; 255
 cf4:	7f 4f       	sbci	r23, 0xFF	; 255
 cf6:	8f 4f       	sbci	r24, 0xFF	; 255
 cf8:	9f 4f       	sbci	r25, 0xFF	; 255
 cfa:	16 c0       	rjmp	.+44     	; 0xd28 <__floatsisf+0x6c>
 cfc:	88 23       	and	r24, r24
 cfe:	11 f0       	breq	.+4      	; 0xd04 <__floatsisf+0x48>
 d00:	96 e9       	ldi	r25, 0x96	; 150
 d02:	11 c0       	rjmp	.+34     	; 0xd26 <__floatsisf+0x6a>
 d04:	77 23       	and	r23, r23
 d06:	21 f0       	breq	.+8      	; 0xd10 <__floatsisf+0x54>
 d08:	9e e8       	ldi	r25, 0x8E	; 142
 d0a:	87 2f       	mov	r24, r23
 d0c:	76 2f       	mov	r23, r22
 d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__floatsisf+0x5e>
 d10:	66 23       	and	r22, r22
 d12:	71 f0       	breq	.+28     	; 0xd30 <__floatsisf+0x74>
 d14:	96 e8       	ldi	r25, 0x86	; 134
 d16:	86 2f       	mov	r24, r22
 d18:	70 e0       	ldi	r23, 0x00	; 0
 d1a:	60 e0       	ldi	r22, 0x00	; 0
 d1c:	2a f0       	brmi	.+10     	; 0xd28 <__floatsisf+0x6c>
 d1e:	9a 95       	dec	r25
 d20:	66 0f       	add	r22, r22
 d22:	77 1f       	adc	r23, r23
 d24:	88 1f       	adc	r24, r24
 d26:	da f7       	brpl	.-10     	; 0xd1e <__floatsisf+0x62>
 d28:	88 0f       	add	r24, r24
 d2a:	96 95       	lsr	r25
 d2c:	87 95       	ror	r24
 d2e:	97 f9       	bld	r25, 7
 d30:	08 95       	ret

00000d32 <__fp_inf>:
 d32:	97 f9       	bld	r25, 7
 d34:	9f 67       	ori	r25, 0x7F	; 127
 d36:	80 e8       	ldi	r24, 0x80	; 128
 d38:	70 e0       	ldi	r23, 0x00	; 0
 d3a:	60 e0       	ldi	r22, 0x00	; 0
 d3c:	08 95       	ret

00000d3e <__fp_nan>:
 d3e:	9f ef       	ldi	r25, 0xFF	; 255
 d40:	80 ec       	ldi	r24, 0xC0	; 192
 d42:	08 95       	ret

00000d44 <__fp_pscA>:
 d44:	00 24       	eor	r0, r0
 d46:	0a 94       	dec	r0
 d48:	16 16       	cp	r1, r22
 d4a:	17 06       	cpc	r1, r23
 d4c:	18 06       	cpc	r1, r24
 d4e:	09 06       	cpc	r0, r25
 d50:	08 95       	ret

00000d52 <__fp_pscB>:
 d52:	00 24       	eor	r0, r0
 d54:	0a 94       	dec	r0
 d56:	12 16       	cp	r1, r18
 d58:	13 06       	cpc	r1, r19
 d5a:	14 06       	cpc	r1, r20
 d5c:	05 06       	cpc	r0, r21
 d5e:	08 95       	ret

00000d60 <__fp_round>:
 d60:	09 2e       	mov	r0, r25
 d62:	03 94       	inc	r0
 d64:	00 0c       	add	r0, r0
 d66:	11 f4       	brne	.+4      	; 0xd6c <__fp_round+0xc>
 d68:	88 23       	and	r24, r24
 d6a:	52 f0       	brmi	.+20     	; 0xd80 <__fp_round+0x20>
 d6c:	bb 0f       	add	r27, r27
 d6e:	40 f4       	brcc	.+16     	; 0xd80 <__fp_round+0x20>
 d70:	bf 2b       	or	r27, r31
 d72:	11 f4       	brne	.+4      	; 0xd78 <__fp_round+0x18>
 d74:	60 ff       	sbrs	r22, 0
 d76:	04 c0       	rjmp	.+8      	; 0xd80 <__fp_round+0x20>
 d78:	6f 5f       	subi	r22, 0xFF	; 255
 d7a:	7f 4f       	sbci	r23, 0xFF	; 255
 d7c:	8f 4f       	sbci	r24, 0xFF	; 255
 d7e:	9f 4f       	sbci	r25, 0xFF	; 255
 d80:	08 95       	ret

00000d82 <__fp_split3>:
 d82:	57 fd       	sbrc	r21, 7
 d84:	90 58       	subi	r25, 0x80	; 128
 d86:	44 0f       	add	r20, r20
 d88:	55 1f       	adc	r21, r21
 d8a:	59 f0       	breq	.+22     	; 0xda2 <__fp_splitA+0x10>
 d8c:	5f 3f       	cpi	r21, 0xFF	; 255
 d8e:	71 f0       	breq	.+28     	; 0xdac <__fp_splitA+0x1a>
 d90:	47 95       	ror	r20

00000d92 <__fp_splitA>:
 d92:	88 0f       	add	r24, r24
 d94:	97 fb       	bst	r25, 7
 d96:	99 1f       	adc	r25, r25
 d98:	61 f0       	breq	.+24     	; 0xdb2 <__fp_splitA+0x20>
 d9a:	9f 3f       	cpi	r25, 0xFF	; 255
 d9c:	79 f0       	breq	.+30     	; 0xdbc <__fp_splitA+0x2a>
 d9e:	87 95       	ror	r24
 da0:	08 95       	ret
 da2:	12 16       	cp	r1, r18
 da4:	13 06       	cpc	r1, r19
 da6:	14 06       	cpc	r1, r20
 da8:	55 1f       	adc	r21, r21
 daa:	f2 cf       	rjmp	.-28     	; 0xd90 <__fp_split3+0xe>
 dac:	46 95       	lsr	r20
 dae:	f1 df       	rcall	.-30     	; 0xd92 <__fp_splitA>
 db0:	08 c0       	rjmp	.+16     	; 0xdc2 <__fp_splitA+0x30>
 db2:	16 16       	cp	r1, r22
 db4:	17 06       	cpc	r1, r23
 db6:	18 06       	cpc	r1, r24
 db8:	99 1f       	adc	r25, r25
 dba:	f1 cf       	rjmp	.-30     	; 0xd9e <__fp_splitA+0xc>
 dbc:	86 95       	lsr	r24
 dbe:	71 05       	cpc	r23, r1
 dc0:	61 05       	cpc	r22, r1
 dc2:	08 94       	sec
 dc4:	08 95       	ret

00000dc6 <__fp_zero>:
 dc6:	e8 94       	clt

00000dc8 <__fp_szero>:
 dc8:	bb 27       	eor	r27, r27
 dca:	66 27       	eor	r22, r22
 dcc:	77 27       	eor	r23, r23
 dce:	cb 01       	movw	r24, r22
 dd0:	97 f9       	bld	r25, 7
 dd2:	08 95       	ret

00000dd4 <__mulsf3>:
 dd4:	0b d0       	rcall	.+22     	; 0xdec <__mulsf3x>
 dd6:	c4 cf       	rjmp	.-120    	; 0xd60 <__fp_round>
 dd8:	b5 df       	rcall	.-150    	; 0xd44 <__fp_pscA>
 dda:	28 f0       	brcs	.+10     	; 0xde6 <__mulsf3+0x12>
 ddc:	ba df       	rcall	.-140    	; 0xd52 <__fp_pscB>
 dde:	18 f0       	brcs	.+6      	; 0xde6 <__mulsf3+0x12>
 de0:	95 23       	and	r25, r21
 de2:	09 f0       	breq	.+2      	; 0xde6 <__mulsf3+0x12>
 de4:	a6 cf       	rjmp	.-180    	; 0xd32 <__fp_inf>
 de6:	ab cf       	rjmp	.-170    	; 0xd3e <__fp_nan>
 de8:	11 24       	eor	r1, r1
 dea:	ee cf       	rjmp	.-36     	; 0xdc8 <__fp_szero>

00000dec <__mulsf3x>:
 dec:	ca df       	rcall	.-108    	; 0xd82 <__fp_split3>
 dee:	a0 f3       	brcs	.-24     	; 0xdd8 <__mulsf3+0x4>

00000df0 <__mulsf3_pse>:
 df0:	95 9f       	mul	r25, r21
 df2:	d1 f3       	breq	.-12     	; 0xde8 <__mulsf3+0x14>
 df4:	95 0f       	add	r25, r21
 df6:	50 e0       	ldi	r21, 0x00	; 0
 df8:	55 1f       	adc	r21, r21
 dfa:	62 9f       	mul	r22, r18
 dfc:	f0 01       	movw	r30, r0
 dfe:	72 9f       	mul	r23, r18
 e00:	bb 27       	eor	r27, r27
 e02:	f0 0d       	add	r31, r0
 e04:	b1 1d       	adc	r27, r1
 e06:	63 9f       	mul	r22, r19
 e08:	aa 27       	eor	r26, r26
 e0a:	f0 0d       	add	r31, r0
 e0c:	b1 1d       	adc	r27, r1
 e0e:	aa 1f       	adc	r26, r26
 e10:	64 9f       	mul	r22, r20
 e12:	66 27       	eor	r22, r22
 e14:	b0 0d       	add	r27, r0
 e16:	a1 1d       	adc	r26, r1
 e18:	66 1f       	adc	r22, r22
 e1a:	82 9f       	mul	r24, r18
 e1c:	22 27       	eor	r18, r18
 e1e:	b0 0d       	add	r27, r0
 e20:	a1 1d       	adc	r26, r1
 e22:	62 1f       	adc	r22, r18
 e24:	73 9f       	mul	r23, r19
 e26:	b0 0d       	add	r27, r0
 e28:	a1 1d       	adc	r26, r1
 e2a:	62 1f       	adc	r22, r18
 e2c:	83 9f       	mul	r24, r19
 e2e:	a0 0d       	add	r26, r0
 e30:	61 1d       	adc	r22, r1
 e32:	22 1f       	adc	r18, r18
 e34:	74 9f       	mul	r23, r20
 e36:	33 27       	eor	r19, r19
 e38:	a0 0d       	add	r26, r0
 e3a:	61 1d       	adc	r22, r1
 e3c:	23 1f       	adc	r18, r19
 e3e:	84 9f       	mul	r24, r20
 e40:	60 0d       	add	r22, r0
 e42:	21 1d       	adc	r18, r1
 e44:	82 2f       	mov	r24, r18
 e46:	76 2f       	mov	r23, r22
 e48:	6a 2f       	mov	r22, r26
 e4a:	11 24       	eor	r1, r1
 e4c:	9f 57       	subi	r25, 0x7F	; 127
 e4e:	50 40       	sbci	r21, 0x00	; 0
 e50:	8a f0       	brmi	.+34     	; 0xe74 <__mulsf3_pse+0x84>
 e52:	e1 f0       	breq	.+56     	; 0xe8c <__mulsf3_pse+0x9c>
 e54:	88 23       	and	r24, r24
 e56:	4a f0       	brmi	.+18     	; 0xe6a <__mulsf3_pse+0x7a>
 e58:	ee 0f       	add	r30, r30
 e5a:	ff 1f       	adc	r31, r31
 e5c:	bb 1f       	adc	r27, r27
 e5e:	66 1f       	adc	r22, r22
 e60:	77 1f       	adc	r23, r23
 e62:	88 1f       	adc	r24, r24
 e64:	91 50       	subi	r25, 0x01	; 1
 e66:	50 40       	sbci	r21, 0x00	; 0
 e68:	a9 f7       	brne	.-22     	; 0xe54 <__mulsf3_pse+0x64>
 e6a:	9e 3f       	cpi	r25, 0xFE	; 254
 e6c:	51 05       	cpc	r21, r1
 e6e:	70 f0       	brcs	.+28     	; 0xe8c <__mulsf3_pse+0x9c>
 e70:	60 cf       	rjmp	.-320    	; 0xd32 <__fp_inf>
 e72:	aa cf       	rjmp	.-172    	; 0xdc8 <__fp_szero>
 e74:	5f 3f       	cpi	r21, 0xFF	; 255
 e76:	ec f3       	brlt	.-6      	; 0xe72 <__mulsf3_pse+0x82>
 e78:	98 3e       	cpi	r25, 0xE8	; 232
 e7a:	dc f3       	brlt	.-10     	; 0xe72 <__mulsf3_pse+0x82>
 e7c:	86 95       	lsr	r24
 e7e:	77 95       	ror	r23
 e80:	67 95       	ror	r22
 e82:	b7 95       	ror	r27
 e84:	f7 95       	ror	r31
 e86:	e7 95       	ror	r30
 e88:	9f 5f       	subi	r25, 0xFF	; 255
 e8a:	c1 f7       	brne	.-16     	; 0xe7c <__mulsf3_pse+0x8c>
 e8c:	fe 2b       	or	r31, r30
 e8e:	88 0f       	add	r24, r24
 e90:	91 1d       	adc	r25, r1
 e92:	96 95       	lsr	r25
 e94:	87 95       	ror	r24
 e96:	97 f9       	bld	r25, 7
 e98:	08 95       	ret

00000e9a <__divmodhi4>:
 e9a:	97 fb       	bst	r25, 7
 e9c:	07 2e       	mov	r0, r23
 e9e:	16 f4       	brtc	.+4      	; 0xea4 <__divmodhi4+0xa>
 ea0:	00 94       	com	r0
 ea2:	06 d0       	rcall	.+12     	; 0xeb0 <__divmodhi4_neg1>
 ea4:	77 fd       	sbrc	r23, 7
 ea6:	08 d0       	rcall	.+16     	; 0xeb8 <__divmodhi4_neg2>
 ea8:	13 d0       	rcall	.+38     	; 0xed0 <__udivmodhi4>
 eaa:	07 fc       	sbrc	r0, 7
 eac:	05 d0       	rcall	.+10     	; 0xeb8 <__divmodhi4_neg2>
 eae:	3e f4       	brtc	.+14     	; 0xebe <__divmodhi4_exit>

00000eb0 <__divmodhi4_neg1>:
 eb0:	90 95       	com	r25
 eb2:	81 95       	neg	r24
 eb4:	9f 4f       	sbci	r25, 0xFF	; 255
 eb6:	08 95       	ret

00000eb8 <__divmodhi4_neg2>:
 eb8:	70 95       	com	r23
 eba:	61 95       	neg	r22
 ebc:	7f 4f       	sbci	r23, 0xFF	; 255

00000ebe <__divmodhi4_exit>:
 ebe:	08 95       	ret

00000ec0 <__tablejump2__>:
 ec0:	ee 0f       	add	r30, r30
 ec2:	ff 1f       	adc	r31, r31
 ec4:	88 1f       	adc	r24, r24
 ec6:	8b bf       	out	0x3b, r24	; 59
 ec8:	07 90       	elpm	r0, Z+
 eca:	f6 91       	elpm	r31, Z
 ecc:	e0 2d       	mov	r30, r0
 ece:	19 94       	eijmp

00000ed0 <__udivmodhi4>:
 ed0:	aa 1b       	sub	r26, r26
 ed2:	bb 1b       	sub	r27, r27
 ed4:	51 e1       	ldi	r21, 0x11	; 17
 ed6:	07 c0       	rjmp	.+14     	; 0xee6 <__udivmodhi4_ep>

00000ed8 <__udivmodhi4_loop>:
 ed8:	aa 1f       	adc	r26, r26
 eda:	bb 1f       	adc	r27, r27
 edc:	a6 17       	cp	r26, r22
 ede:	b7 07       	cpc	r27, r23
 ee0:	10 f0       	brcs	.+4      	; 0xee6 <__udivmodhi4_ep>
 ee2:	a6 1b       	sub	r26, r22
 ee4:	b7 0b       	sbc	r27, r23

00000ee6 <__udivmodhi4_ep>:
 ee6:	88 1f       	adc	r24, r24
 ee8:	99 1f       	adc	r25, r25
 eea:	5a 95       	dec	r21
 eec:	a9 f7       	brne	.-22     	; 0xed8 <__udivmodhi4_loop>
 eee:	80 95       	com	r24
 ef0:	90 95       	com	r25
 ef2:	bc 01       	movw	r22, r24
 ef4:	cd 01       	movw	r24, r26
 ef6:	08 95       	ret

00000ef8 <__itoa_ncheck>:
 ef8:	bb 27       	eor	r27, r27
 efa:	4a 30       	cpi	r20, 0x0A	; 10
 efc:	31 f4       	brne	.+12     	; 0xf0a <__itoa_ncheck+0x12>
 efe:	99 23       	and	r25, r25
 f00:	22 f4       	brpl	.+8      	; 0xf0a <__itoa_ncheck+0x12>
 f02:	bd e2       	ldi	r27, 0x2D	; 45
 f04:	90 95       	com	r25
 f06:	81 95       	neg	r24
 f08:	9f 4f       	sbci	r25, 0xFF	; 255
 f0a:	01 c0       	rjmp	.+2      	; 0xf0e <__utoa_common>

00000f0c <__utoa_ncheck>:
 f0c:	bb 27       	eor	r27, r27

00000f0e <__utoa_common>:
 f0e:	fb 01       	movw	r30, r22
 f10:	55 27       	eor	r21, r21
 f12:	aa 27       	eor	r26, r26
 f14:	88 0f       	add	r24, r24
 f16:	99 1f       	adc	r25, r25
 f18:	aa 1f       	adc	r26, r26
 f1a:	a4 17       	cp	r26, r20
 f1c:	10 f0       	brcs	.+4      	; 0xf22 <__utoa_common+0x14>
 f1e:	a4 1b       	sub	r26, r20
 f20:	83 95       	inc	r24
 f22:	50 51       	subi	r21, 0x10	; 16
 f24:	b9 f7       	brne	.-18     	; 0xf14 <__utoa_common+0x6>
 f26:	a0 5d       	subi	r26, 0xD0	; 208
 f28:	aa 33       	cpi	r26, 0x3A	; 58
 f2a:	08 f0       	brcs	.+2      	; 0xf2e <__utoa_common+0x20>
 f2c:	a9 5d       	subi	r26, 0xD9	; 217
 f2e:	a1 93       	st	Z+, r26
 f30:	00 97       	sbiw	r24, 0x00	; 0
 f32:	79 f7       	brne	.-34     	; 0xf12 <__utoa_common+0x4>
 f34:	b1 11       	cpse	r27, r1
 f36:	b1 93       	st	Z+, r27
 f38:	11 92       	st	Z+, r1
 f3a:	cb 01       	movw	r24, r22
 f3c:	00 c0       	rjmp	.+0      	; 0xf3e <strrev>

00000f3e <strrev>:
 f3e:	dc 01       	movw	r26, r24
 f40:	fc 01       	movw	r30, r24
 f42:	67 2f       	mov	r22, r23
 f44:	71 91       	ld	r23, Z+
 f46:	77 23       	and	r23, r23
 f48:	e1 f7       	brne	.-8      	; 0xf42 <strrev+0x4>
 f4a:	32 97       	sbiw	r30, 0x02	; 2
 f4c:	04 c0       	rjmp	.+8      	; 0xf56 <strrev+0x18>
 f4e:	7c 91       	ld	r23, X
 f50:	6d 93       	st	X+, r22
 f52:	70 83       	st	Z, r23
 f54:	62 91       	ld	r22, -Z
 f56:	ae 17       	cp	r26, r30
 f58:	bf 07       	cpc	r27, r31
 f5a:	c8 f3       	brcs	.-14     	; 0xf4e <strrev+0x10>
 f5c:	08 95       	ret

00000f5e <_exit>:
 f5e:	f8 94       	cli

00000f60 <__stop_program>:
 f60:	ff cf       	rjmp	.-2      	; 0xf60 <__stop_program>
