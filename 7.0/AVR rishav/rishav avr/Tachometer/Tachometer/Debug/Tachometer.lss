
Tachometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000034e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004b  00800062  00800062  000003e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba4  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085b  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053a  00000000  00000000  00001907  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00001e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053f  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000506  00000000  00000000  00002573  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002a79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_13>
  38:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3a       	cpi	r26, 0xAD	; 173
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a5 01 	jmp	0x34a	; 0x34a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "tachometer.h"


int main(void)
{   
	init_tachometer();
  92:	0e 94 4c 00 	call	0x98	; 0x98 <_Z15init_tachometerv>

#include <avr/io.h>
#include "tachometer.h"


int main(void)
  96:	ff cf       	rjmp	.-2      	; 0x96 <main+0x4>

00000098 <_Z15init_tachometerv>:
volatile uint16_t rpm=0;   // Revolution per minute
volatile uint16_t rps=0;   // Revolution per seconds

void init_tachometer(void){
	
	 uart_init(UART_BAUD_SELECT(9600,F_CPU));
  98:	87 e6       	ldi	r24, 0x67	; 103
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 10 01 	call	0x220	; 0x220 <_Z9uart_initj>
	
	TCCR1B |= (1<<WGM12);          // CTC mode
  a0:	8e b5       	in	r24, 0x2e	; 46
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<CS12)|(1<<CS10); // Timer Clock = 1/1024 of sys 	
  a6:	8e b5       	in	r24, 0x2e	; 46
  a8:	85 60       	ori	r24, 0x05	; 5
  aa:	8e bd       	out	0x2e, r24	; 46
	
	// Initialize INT0
	MCUCR  |= (1<<ISC01);                    // Falling edge on INT0 triggers interrupt.
  ac:	85 b7       	in	r24, 0x35	; 53
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	85 bf       	out	0x35, r24	; 53
    GICR   |= (1<<INT0);                     // Enable INT0 interrupt
  b2:	8b b7       	in	r24, 0x3b	; 59
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	8b bf       	out	0x3b, r24	; 59
    TIMSK  |= (1<<OCIE1A);                   // Output compare 1A interrupt enable
  b8:	89 b7       	in	r24, 0x39	; 57
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	89 bf       	out	0x39, r24	; 57
	OCR1A   = (15624*SAMPLE_TIME);          // Compare value ~ 1 second	:(15624*SAMPLE_TIME)/1000
  be:	88 e0       	ldi	r24, 0x08	; 8
  c0:	9d e3       	ldi	r25, 0x3D	; 61
  c2:	9b bd       	out	0x2b, r25	; 43
  c4:	8a bd       	out	0x2a, r24	; 42
	
	sei();
  c6:	78 94       	sei
  c8:	08 95       	ret

000000ca <__vector_7>:
}

ISR(TIMER1_COMPA_vect){      // Every SAMPLE_TIME!
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	
	rps   = count/(PPR*SAMPLE_TIME); //count/(PPR*SAMPLE_TIME)
  ec:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count>
  f0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <count+0x1>
  f4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
  f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	rpm   = (rps*60);
  fc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 100:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__data_end+0x1>
 104:	4c e3       	ldi	r20, 0x3C	; 60
 106:	42 9f       	mul	r20, r18
 108:	c0 01       	movw	r24, r0
 10a:	43 9f       	mul	r20, r19
 10c:	90 0d       	add	r25, r0
 10e:	11 24       	eor	r1, r1
 110:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <rpm+0x1>
 114:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <rpm>
	
	uart_putint(rps);
 118:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 11c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 120:	0e 94 46 01 	call	0x28c	; 0x28c <_Z11uart_putinti>
	uart_puts("\r") ;
 124:	80 e6       	ldi	r24, 0x60	; 96
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 37 01 	call	0x26e	; 0x26e <_Z9uart_putsPKc>
	
	count = 0; 
 12c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <count+0x1>
 130:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <count>
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_1>:

ISR(INT0_vect){              // INT0 on falling edge
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
	count++;
 164:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count>
 168:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <count+0x1>
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <count+0x1>
 172:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <count>
}
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_13>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	2c b1       	in	r18, 0x0c	; 12
 19c:	88 71       	andi	r24, 0x18	; 24
 19e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <_ZL11UART_RxHead>
 1a2:	ef 5f       	subi	r30, 0xFF	; 255
 1a4:	ef 71       	andi	r30, 0x1F	; 31
 1a6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <_ZL11UART_RxTail>
 1aa:	e9 17       	cp	r30, r25
 1ac:	39 f0       	breq	.+14     	; 0x1bc <__vector_13+0x38>
 1ae:	e0 93 6a 00 	sts	0x006A, r30	; 0x80006a <_ZL11UART_RxHead>
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	e3 59       	subi	r30, 0x93	; 147
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	20 83       	st	Z, r18
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <__vector_13+0x3a>
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <_ZL16UART_LastRxError>
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_14>:
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
 1e8:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <_ZL11UART_TxHead>
 1ec:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <_ZL11UART_TxTail>
 1f0:	98 17       	cp	r25, r24
 1f2:	61 f0       	breq	.+24     	; 0x20c <__vector_14+0x36>
 1f4:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <_ZL11UART_TxTail>
 1f8:	ef 5f       	subi	r30, 0xFF	; 255
 1fa:	ef 71       	andi	r30, 0x1F	; 31
 1fc:	e0 93 6b 00 	sts	0x006B, r30	; 0x80006b <_ZL11UART_TxTail>
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	e3 57       	subi	r30, 0x73	; 115
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	80 81       	ld	r24, Z
 208:	8c b9       	out	0x0c, r24	; 12
 20a:	01 c0       	rjmp	.+2      	; 0x20e <__vector_14+0x38>
 20c:	55 98       	cbi	0x0a, 5	; 10
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <_Z9uart_initj>:
 220:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <_ZL11UART_TxHead>
 224:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <_ZL11UART_TxTail>
 228:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <_ZL11UART_RxHead>
 22c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <_ZL11UART_RxTail>
 230:	99 23       	and	r25, r25
 232:	1c f4       	brge	.+6      	; 0x23a <_Z9uart_initj+0x1a>
 234:	22 e0       	ldi	r18, 0x02	; 2
 236:	2b b9       	out	0x0b, r18	; 11
 238:	9f 77       	andi	r25, 0x7F	; 127
 23a:	90 bd       	out	0x20, r25	; 32
 23c:	89 b9       	out	0x09, r24	; 9
 23e:	88 e9       	ldi	r24, 0x98	; 152
 240:	8a b9       	out	0x0a, r24	; 10
 242:	86 e8       	ldi	r24, 0x86	; 134
 244:	80 bd       	out	0x20, r24	; 32
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	80 bd       	out	0x20, r24	; 32
 24a:	08 95       	ret

0000024c <_Z9uart_putch>:
 24c:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <_ZL11UART_TxHead>
 250:	2f 5f       	subi	r18, 0xFF	; 255
 252:	2f 71       	andi	r18, 0x1F	; 31
 254:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <_ZL11UART_TxTail>
 258:	29 17       	cp	r18, r25
 25a:	e1 f3       	breq	.-8      	; 0x254 <_Z9uart_putch+0x8>
 25c:	e2 2f       	mov	r30, r18
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	e3 57       	subi	r30, 0x73	; 115
 262:	ff 4f       	sbci	r31, 0xFF	; 255
 264:	80 83       	st	Z, r24
 266:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <_ZL11UART_TxHead>
 26a:	55 9a       	sbi	0x0a, 5	; 10
 26c:	08 95       	ret

0000026e <_Z9uart_putsPKc>:
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	ec 01       	movw	r28, r24
 274:	88 81       	ld	r24, Y
 276:	88 23       	and	r24, r24
 278:	31 f0       	breq	.+12     	; 0x286 <_Z9uart_putsPKc+0x18>
 27a:	21 96       	adiw	r28, 0x01	; 1
 27c:	0e 94 26 01 	call	0x24c	; 0x24c <_Z9uart_putch>
 280:	89 91       	ld	r24, Y+
 282:	81 11       	cpse	r24, r1
 284:	fb cf       	rjmp	.-10     	; 0x27c <_Z9uart_putsPKc+0xe>
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <_Z11uart_putinti>:
 Purpose:  transmit integer to UART0
 Input:    integer to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putint(int input)
{
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	2f 97       	sbiw	r28, 0x0f	; 15
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2a4:	4a e0       	ldi	r20, 0x0A	; 10
 2a6:	be 01       	movw	r22, r28
 2a8:	6f 5f       	subi	r22, 0xFF	; 255
 2aa:	7f 4f       	sbci	r23, 0xFF	; 255
 2ac:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__itoa_ncheck>
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	88 23       	and	r24, r24
 2b4:	51 f0       	breq	.+20     	; 0x2ca <_Z11uart_putinti+0x3e>
 2b6:	8e 01       	movw	r16, r28
 2b8:	0e 5f       	subi	r16, 0xFE	; 254
 2ba:	1f 4f       	sbci	r17, 0xFF	; 255
	uart_putc(*s++);
 2bc:	0e 94 26 01 	call	0x24c	; 0x24c <_Z9uart_putch>
void uart_putint(int input)
{
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 2c0:	f8 01       	movw	r30, r16
 2c2:	81 91       	ld	r24, Z+
 2c4:	8f 01       	movw	r16, r30
 2c6:	81 11       	cpse	r24, r1
 2c8:	f9 cf       	rjmp	.-14     	; 0x2bc <_Z11uart_putinti+0x30>
	uart_putc(*s++);

	}
 2ca:	2f 96       	adiw	r28, 0x0f	; 15
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	08 95       	ret

000002e0 <__itoa_ncheck>:
 2e0:	bb 27       	eor	r27, r27
 2e2:	4a 30       	cpi	r20, 0x0A	; 10
 2e4:	31 f4       	brne	.+12     	; 0x2f2 <__itoa_ncheck+0x12>
 2e6:	99 23       	and	r25, r25
 2e8:	22 f4       	brpl	.+8      	; 0x2f2 <__itoa_ncheck+0x12>
 2ea:	bd e2       	ldi	r27, 0x2D	; 45
 2ec:	90 95       	com	r25
 2ee:	81 95       	neg	r24
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__utoa_common>

000002f6 <__utoa_ncheck>:
 2f6:	bb 27       	eor	r27, r27

000002f8 <__utoa_common>:
 2f8:	fb 01       	movw	r30, r22
 2fa:	55 27       	eor	r21, r21
 2fc:	aa 27       	eor	r26, r26
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	aa 1f       	adc	r26, r26
 304:	a4 17       	cp	r26, r20
 306:	10 f0       	brcs	.+4      	; 0x30c <__utoa_common+0x14>
 308:	a4 1b       	sub	r26, r20
 30a:	83 95       	inc	r24
 30c:	50 51       	subi	r21, 0x10	; 16
 30e:	b9 f7       	brne	.-18     	; 0x2fe <__utoa_common+0x6>
 310:	a0 5d       	subi	r26, 0xD0	; 208
 312:	aa 33       	cpi	r26, 0x3A	; 58
 314:	08 f0       	brcs	.+2      	; 0x318 <__utoa_common+0x20>
 316:	a9 5d       	subi	r26, 0xD9	; 217
 318:	a1 93       	st	Z+, r26
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	79 f7       	brne	.-34     	; 0x2fc <__utoa_common+0x4>
 31e:	b1 11       	cpse	r27, r1
 320:	b1 93       	st	Z+, r27
 322:	11 92       	st	Z+, r1
 324:	cb 01       	movw	r24, r22
 326:	0c 94 95 01 	jmp	0x32a	; 0x32a <strrev>

0000032a <strrev>:
 32a:	dc 01       	movw	r26, r24
 32c:	fc 01       	movw	r30, r24
 32e:	67 2f       	mov	r22, r23
 330:	71 91       	ld	r23, Z+
 332:	77 23       	and	r23, r23
 334:	e1 f7       	brne	.-8      	; 0x32e <strrev+0x4>
 336:	32 97       	sbiw	r30, 0x02	; 2
 338:	04 c0       	rjmp	.+8      	; 0x342 <strrev+0x18>
 33a:	7c 91       	ld	r23, X
 33c:	6d 93       	st	X+, r22
 33e:	70 83       	st	Z, r23
 340:	62 91       	ld	r22, -Z
 342:	ae 17       	cp	r26, r30
 344:	bf 07       	cpc	r27, r31
 346:	c8 f3       	brcs	.-14     	; 0x33a <strrev+0x10>
 348:	08 95       	ret

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
