
Uart test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001b4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800066  00800066  0000024e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a91  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ad  00000000  00000000  00000dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000413  00000000  00000000  00001582  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e8  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f2  00000000  00000000  00001fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000023c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_13>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3a       	cpi	r26, 0xAB	; 171
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define F_CPU 16000000UL
#include "uart.h"

int main(void)

{  DDRD = 0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	81 bb       	out	0x11, r24	; 17
	 int a =45;
    uart_init(UART_BAUD_SELECT(9600,F_CPU));
  96:	87 e6       	ldi	r24, 0x67	; 103
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 a2 00 	call	0x144	; 0x144 <_Z9uart_initj>
	uart_puts("Hello");
  9e:	80 e6       	ldi	r24, 0x60	; 96
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 c9 00 	call	0x192	; 0x192 <_Z9uart_putsPKc>
	
    while (1) 
    {
    }
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main+0x14>

000000a8 <__vector_13>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	2c b1       	in	r18, 0x0c	; 12
  c0:	88 71       	andi	r24, 0x18	; 24
  c2:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <_ZL11UART_RxHead>
  c6:	ef 5f       	subi	r30, 0xFF	; 255
  c8:	ef 71       	andi	r30, 0x1F	; 31
  ca:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <_ZL11UART_RxTail>
  ce:	e9 17       	cp	r30, r25
  d0:	39 f0       	breq	.+14     	; 0xe0 <__vector_13+0x38>
  d2:	e0 93 68 00 	sts	0x0068, r30	; 0x800068 <_ZL11UART_RxHead>
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	e5 59       	subi	r30, 0x95	; 149
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	20 83       	st	Z, r18
  de:	01 c0       	rjmp	.+2      	; 0xe2 <__vector_13+0x3a>
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_14>:
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
 10c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <_ZL11UART_TxHead>
 110:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <_ZL11UART_TxTail>
 114:	98 17       	cp	r25, r24
 116:	61 f0       	breq	.+24     	; 0x130 <__vector_14+0x36>
 118:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <_ZL11UART_TxTail>
 11c:	ef 5f       	subi	r30, 0xFF	; 255
 11e:	ef 71       	andi	r30, 0x1F	; 31
 120:	e0 93 69 00 	sts	0x0069, r30	; 0x800069 <_ZL11UART_TxTail>
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	e5 57       	subi	r30, 0x75	; 117
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	80 81       	ld	r24, Z
 12c:	8c b9       	out	0x0c, r24	; 12
 12e:	01 c0       	rjmp	.+2      	; 0x132 <__vector_14+0x38>
 130:	55 98       	cbi	0x0a, 5	; 10
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <_Z9uart_initj>:
 144:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <_ZL11UART_TxHead>
 148:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <_ZL11UART_TxTail>
 14c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <_ZL11UART_RxHead>
 150:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <_ZL11UART_RxTail>
 154:	99 23       	and	r25, r25
 156:	1c f4       	brge	.+6      	; 0x15e <_Z9uart_initj+0x1a>
 158:	22 e0       	ldi	r18, 0x02	; 2
 15a:	2b b9       	out	0x0b, r18	; 11
 15c:	9f 77       	andi	r25, 0x7F	; 127
 15e:	90 bd       	out	0x20, r25	; 32
 160:	89 b9       	out	0x09, r24	; 9
 162:	88 e9       	ldi	r24, 0x98	; 152
 164:	8a b9       	out	0x0a, r24	; 10
 166:	86 e8       	ldi	r24, 0x86	; 134
 168:	80 bd       	out	0x20, r24	; 32
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	80 bd       	out	0x20, r24	; 32
 16e:	08 95       	ret

00000170 <_Z9uart_putch>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 170:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <_ZL11UART_TxHead>
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 178:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <_ZL11UART_TxTail>
 17c:	29 17       	cp	r18, r25
 17e:	e1 f3       	breq	.-8      	; 0x178 <_Z9uart_putch+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 180:	e2 2f       	mov	r30, r18
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e5 57       	subi	r30, 0x75	; 117
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 18a:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <_ZL11UART_TxHead>

    /* enable UDRE interrupt */
    UART_CONTROL    |= _BV(UART_UDRIE);
 18e:	55 9a       	sbi	0x0a, 5	; 10
 190:	08 95       	ret

00000192 <_Z9uart_putsPKc>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec 01       	movw	r28, r24
    while (*s) 
 198:	88 81       	ld	r24, Y
 19a:	88 23       	and	r24, r24
 19c:	31 f0       	breq	.+12     	; 0x1aa <_Z9uart_putsPKc+0x18>
 19e:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 1a0:	0e 94 b8 00 	call	0x170	; 0x170 <_Z9uart_putch>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 1a4:	89 91       	ld	r24, Y+
 1a6:	81 11       	cpse	r24, r1
 1a8:	fb cf       	rjmp	.-10     	; 0x1a0 <_Z9uart_putsPKc+0xe>
      uart_putc(*s++);

}/* uart_puts */
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
