
stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000474  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000474  00000508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006c  0080006c  00000514  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b68  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f7  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ca  00000000  00000000  0000172f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a9  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a6  00000000  00000000  000021b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000285f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f5 01 	call	0x3ea	; 0x3ea <main>
  8a:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <update_time>:
			 
	 	 		
	 	 	}
	  }
	void update_time(){
		count++;
  92:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <count>
  96:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <count+0x1>
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <count+0x1>
  a0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <count>
		if (count>=count_speed){
  a4:	89 2b       	or	r24, r25
  a6:	49 f0       	breq	.+18     	; 0xba <update_time+0x28>
			
		sec++;
  a8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sec>
  ac:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sec+0x1>
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <sec+0x1>
  b6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sec>
		}
		if (sec>59){
  ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sec>
  be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sec+0x1>
  c2:	cc 97       	sbiw	r24, 0x3c	; 60
  c4:	6c f0       	brlt	.+26     	; 0xe0 <update_time+0x4e>
			sec=0;
  c6:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <sec+0x1>
  ca:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <sec>
		min++;}
  ce:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <min>
  d2:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <min+0x1>
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <min+0x1>
  dc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <min>
		if (min>59){
  e0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <min>
  e4:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <min+0x1>
  e8:	cc 97       	sbiw	r24, 0x3c	; 60
  ea:	6c f0       	brlt	.+26     	; 0x106 <update_time+0x74>
			min=0;
  ec:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <min+0x1>
  f0:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <min>
		hr++;}
  f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <hr>
  f8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <hr+0x1>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <hr+0x1>
 102:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <hr>
		if (hr>12){
 106:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <hr>
 10a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <hr+0x1>
 10e:	0d 97       	sbiw	r24, 0x0d	; 13
 110:	34 f0       	brlt	.+12     	; 0x11e <update_time+0x8c>
		hr=1;}
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <hr+0x1>
 11a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <hr>
 11e:	08 95       	ret

00000120 <update_stwatch>:
		
	}
	void update_stwatch(){
		sw_count++;
 120:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 124:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 12e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		if (sw_count>=count_speed){
 132:	89 2b       	or	r24, r25
 134:	49 f0       	breq	.+18     	; 0x148 <update_stwatch+0x28>
			sw_sec++;
 136:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <sw_sec>
 13a:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <sw_sec+0x1>
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <sw_sec+0x1>
 144:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <sw_sec>
		}
		if (sw_sec>59){
 148:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <sw_sec>
 14c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <sw_sec+0x1>
 150:	cc 97       	sbiw	r24, 0x3c	; 60
 152:	6c f0       	brlt	.+26     	; 0x16e <update_stwatch+0x4e>
			sw_sec=0;
 154:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <sw_sec+0x1>
 158:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <sw_sec>
		min++;}
 15c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <min>
 160:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <min+0x1>
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <min+0x1>
 16a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <min>
		if (sw_min>59){
 16e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <sw_min>
 172:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <sw_min+0x1>
 176:	cc 97       	sbiw	r24, 0x3c	; 60
 178:	6c f0       	brlt	.+26     	; 0x194 <update_stwatch+0x74>
			sw_min=0;
 17a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <sw_min+0x1>
 17e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <sw_min>
		sw_hr++;}
 182:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <sw_hr>
 186:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <sw_hr+0x1>
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <sw_hr+0x1>
 190:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <sw_hr>
		if (sw_hr>12){
 194:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <sw_hr>
 198:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <sw_hr+0x1>
 19c:	0d 97       	sbiw	r24, 0x0d	; 13
 19e:	34 f0       	brlt	.+12     	; 0x1ac <update_stwatch+0x8c>
		sw_hr=1;}
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <sw_hr+0x1>
 1a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <sw_hr>
 1ac:	08 95       	ret

000001ae <__vector_4>:
		else{
		update_stwatch();	
	}
}
}
	ISR(TIMER2_COMP_vect){
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	if (select){
 1d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1d4:	88 23       	and	r24, r24
 1d6:	19 f0       	breq	.+6      	; 0x1de <__vector_4+0x30>
		update_time();
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <update_time>
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <__vector_4+0x38>
	}
	else {
		update_time();
 1de:	0e 94 49 00 	call	0x92	; 0x92 <update_time>
		update_stwatch();
 1e2:	0e 94 90 00 	call	0x120	; 0x120 <update_stwatch>
	}
	}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	bf 91       	pop	r27
 1ec:	af 91       	pop	r26
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	7f 91       	pop	r23
 1f4:	6f 91       	pop	r22
 1f6:	5f 91       	pop	r21
 1f8:	4f 91       	pop	r20
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_2>:
// 	min=0;
// 	sec=0;
// 	disp=num[sec];	
// 		
// 	}
  	ISR(INT1_vect){
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	2f 93       	push	r18
 214:	3f 93       	push	r19
 216:	4f 93       	push	r20
 218:	5f 93       	push	r21
 21a:	6f 93       	push	r22
 21c:	7f 93       	push	r23
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	af 93       	push	r26
 224:	bf 93       	push	r27
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
	 		if(select){
 22a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 22e:	88 23       	and	r24, r24
 230:	19 f0       	breq	.+6      	; 0x238 <__vector_2+0x30>
				 update_time();
 232:	0e 94 49 00 	call	0x92	; 0x92 <update_time>
 236:	04 c0       	rjmp	.+8      	; 0x240 <__vector_2+0x38>
				 
			 }
			else{
				update_time();
 238:	0e 94 49 00 	call	0x92	; 0x92 <update_time>
				update_stwatch();
 23c:	0e 94 90 00 	call	0x120	; 0x120 <update_stwatch>
			 
	 	 		
	 	 	}
	  }
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <display_time>:
		sw_hr++;}
		if (sw_hr>12){
		sw_hr=1;}
	}
	void display_time(){
		if (hr<10){
 262:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <hr>
 266:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <hr+0x1>
 26a:	8a 30       	cpi	r24, 0x0A	; 10
 26c:	91 05       	cpc	r25, r1
 26e:	a4 f4       	brge	.+40     	; 0x298 <display_time+0x36>
			disp = num[hr];
 270:	fc 01       	movw	r30, r24
 272:	ef 59       	subi	r30, 0x9F	; 159
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	80 81       	ld	r24, Z
 278:	88 bb       	out	0x18, r24	; 24
			gnd &=~(1<<h1);
 27a:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	8f e1       	ldi	r24, 0x1F	; 31
 27e:	9e e4       	ldi	r25, 0x4E	; 78
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <display_time+0x1e>
 284:	00 c0       	rjmp	.+0      	; 0x286 <display_time+0x24>
 286:	00 00       	nop
			_delay_ms(5);
			gnd|=(1<<h1);
 288:	d9 9a       	sbi	0x1b, 1	; 27
		}
		if (hr>=10){
 28a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <hr>
 28e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <hr+0x1>
 292:	8a 30       	cpi	r24, 0x0A	; 10
 294:	91 05       	cpc	r25, r1
 296:	34 f1       	brlt	.+76     	; 0x2e4 <display_time+0x82>
			disp =num[hr/10];
 298:	2a e0       	ldi	r18, 0x0A	; 10
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	b9 01       	movw	r22, r18
 29e:	0e 94 10 02 	call	0x420	; 0x420 <__divmodhi4>
 2a2:	fb 01       	movw	r30, r22
 2a4:	ef 59       	subi	r30, 0x9F	; 159
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	80 81       	ld	r24, Z
 2aa:	88 bb       	out	0x18, r24	; 24
			gnd &=~(1<<h2);
 2ac:	d8 98       	cbi	0x1b, 0	; 27
 2ae:	8f e1       	ldi	r24, 0x1F	; 31
 2b0:	9e e4       	ldi	r25, 0x4E	; 78
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <display_time+0x50>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <display_time+0x56>
 2b8:	00 00       	nop
			_delay_ms(5);
			gnd|=(1<<h2);
 2ba:	d8 9a       	sbi	0x1b, 0	; 27
			
			disp=num[hr%10];
 2bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <hr>
 2c0:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <hr+0x1>
 2c4:	b9 01       	movw	r22, r18
 2c6:	0e 94 10 02 	call	0x420	; 0x420 <__divmodhi4>
 2ca:	fc 01       	movw	r30, r24
 2cc:	ef 59       	subi	r30, 0x9F	; 159
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	80 81       	ld	r24, Z
 2d2:	88 bb       	out	0x18, r24	; 24
			gnd &=~(1<<h1);
 2d4:	d9 98       	cbi	0x1b, 1	; 27
 2d6:	8f e1       	ldi	r24, 0x1F	; 31
 2d8:	9e e4       	ldi	r25, 0x4E	; 78
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <display_time+0x78>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <display_time+0x7e>
 2e0:	00 00       	nop
			_delay_ms(5);
			gnd|=(1<<h1);
 2e2:	d9 9a       	sbi	0x1b, 1	; 27
		}
		if (min<10){
 2e4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <min>
 2e8:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <min+0x1>
 2ec:	8a 30       	cpi	r24, 0x0A	; 10
 2ee:	91 05       	cpc	r25, r1
 2f0:	a4 f4       	brge	.+40     	; 0x31a <display_time+0xb8>
			disp=num[min];
 2f2:	fc 01       	movw	r30, r24
 2f4:	ef 59       	subi	r30, 0x9F	; 159
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	80 81       	ld	r24, Z
 2fa:	88 bb       	out	0x18, r24	; 24
			gnd &=~(1<<m1);
 2fc:	db 98       	cbi	0x1b, 3	; 27
 2fe:	8f e1       	ldi	r24, 0x1F	; 31
 300:	9e e4       	ldi	r25, 0x4E	; 78
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <display_time+0xa0>
 306:	00 c0       	rjmp	.+0      	; 0x308 <display_time+0xa6>
 308:	00 00       	nop
			_delay_ms(5);
			gnd |=(1<<m1);
 30a:	db 9a       	sbi	0x1b, 3	; 27
		}
		if (min>=10){
 30c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <min>
 310:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <min+0x1>
 314:	8a 30       	cpi	r24, 0x0A	; 10
 316:	91 05       	cpc	r25, r1
 318:	34 f1       	brlt	.+76     	; 0x366 <display_time+0x104>
			disp=num[min/10];
 31a:	2a e0       	ldi	r18, 0x0A	; 10
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	b9 01       	movw	r22, r18
 320:	0e 94 10 02 	call	0x420	; 0x420 <__divmodhi4>
 324:	fb 01       	movw	r30, r22
 326:	ef 59       	subi	r30, 0x9F	; 159
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	80 81       	ld	r24, Z
 32c:	88 bb       	out	0x18, r24	; 24
			gnd  &=~(1<<m2);
 32e:	da 98       	cbi	0x1b, 2	; 27
 330:	8f e1       	ldi	r24, 0x1F	; 31
 332:	9e e4       	ldi	r25, 0x4E	; 78
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <display_time+0xd2>
 338:	00 c0       	rjmp	.+0      	; 0x33a <display_time+0xd8>
 33a:	00 00       	nop
			_delay_ms(5);
			gnd |=(1<<m2);
 33c:	da 9a       	sbi	0x1b, 2	; 27
			
			disp=num[min%10];
 33e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <min>
 342:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <min+0x1>
 346:	b9 01       	movw	r22, r18
 348:	0e 94 10 02 	call	0x420	; 0x420 <__divmodhi4>
 34c:	fc 01       	movw	r30, r24
 34e:	ef 59       	subi	r30, 0x9F	; 159
 350:	ff 4f       	sbci	r31, 0xFF	; 255
 352:	80 81       	ld	r24, Z
 354:	88 bb       	out	0x18, r24	; 24
			gnd &=~(1<<m1);
 356:	db 98       	cbi	0x1b, 3	; 27
 358:	8f e1       	ldi	r24, 0x1F	; 31
 35a:	9e e4       	ldi	r25, 0x4E	; 78
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <display_time+0xfa>
 360:	00 c0       	rjmp	.+0      	; 0x362 <display_time+0x100>
 362:	00 00       	nop
			_delay_ms(5);
			gnd |=(1<<m1);
 364:	db 9a       	sbi	0x1b, 3	; 27
		}
		if (sec<10){
 366:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sec>
 36a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sec+0x1>
 36e:	8a 30       	cpi	r24, 0x0A	; 10
 370:	91 05       	cpc	r25, r1
 372:	a4 f4       	brge	.+40     	; 0x39c <display_time+0x13a>
			disp=num[sec];
 374:	fc 01       	movw	r30, r24
 376:	ef 59       	subi	r30, 0x9F	; 159
 378:	ff 4f       	sbci	r31, 0xFF	; 255
 37a:	80 81       	ld	r24, Z
 37c:	88 bb       	out	0x18, r24	; 24
			gnd &=~(1<<s1);
 37e:	dd 98       	cbi	0x1b, 5	; 27
 380:	8f e1       	ldi	r24, 0x1F	; 31
 382:	9e e4       	ldi	r25, 0x4E	; 78
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <display_time+0x122>
 388:	00 c0       	rjmp	.+0      	; 0x38a <display_time+0x128>
 38a:	00 00       	nop
			_delay_ms(5);
			gnd|=(1<<s1);
 38c:	dd 9a       	sbi	0x1b, 5	; 27
		}
		if (sec>=10){
 38e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sec>
 392:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sec+0x1>
 396:	8a 30       	cpi	r24, 0x0A	; 10
 398:	91 05       	cpc	r25, r1
 39a:	34 f1       	brlt	.+76     	; 0x3e8 <display_time+0x186>
			disp=num[sec/10];
 39c:	2a e0       	ldi	r18, 0x0A	; 10
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	b9 01       	movw	r22, r18
 3a2:	0e 94 10 02 	call	0x420	; 0x420 <__divmodhi4>
 3a6:	fb 01       	movw	r30, r22
 3a8:	ef 59       	subi	r30, 0x9F	; 159
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	80 81       	ld	r24, Z
 3ae:	88 bb       	out	0x18, r24	; 24
			gnd&=~(1<<s2);
 3b0:	dc 98       	cbi	0x1b, 4	; 27
 3b2:	8f e1       	ldi	r24, 0x1F	; 31
 3b4:	9e e4       	ldi	r25, 0x4E	; 78
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <display_time+0x154>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <display_time+0x15a>
 3bc:	00 00       	nop
			_delay_ms(5);
			gnd|=(1<<s2);
 3be:	dc 9a       	sbi	0x1b, 4	; 27
			
			disp=num[sec%10];
 3c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sec>
 3c4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sec+0x1>
 3c8:	b9 01       	movw	r22, r18
 3ca:	0e 94 10 02 	call	0x420	; 0x420 <__divmodhi4>
 3ce:	fc 01       	movw	r30, r24
 3d0:	ef 59       	subi	r30, 0x9F	; 159
 3d2:	ff 4f       	sbci	r31, 0xFF	; 255
 3d4:	80 81       	ld	r24, Z
 3d6:	88 bb       	out	0x18, r24	; 24
			gnd &=~(1<<s1);
 3d8:	dd 98       	cbi	0x1b, 5	; 27
 3da:	8f e1       	ldi	r24, 0x1F	; 31
 3dc:	9e e4       	ldi	r25, 0x4E	; 78
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <display_time+0x17c>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <display_time+0x182>
 3e4:	00 00       	nop
			_delay_ms(5);
			gnd|=(1<<s1);
 3e6:	dd 9a       	sbi	0x1b, 5	; 27
 3e8:	08 95       	ret

000003ea <main>:
uint8_t num [10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
uint8_t select =1;
	
	
int main(){
	TCCR2=(1<<WGM21)|(1<<CS20)|(1<<CS21)|(1<<CS22);                 //set CTC mode and set the prescalar to 1024
 3ea:	8f e0       	ldi	r24, 0x0F	; 15
 3ec:	85 bd       	out	0x25, r24	; 37
	OCR2=156;
 3ee:	8c e9       	ldi	r24, 0x9C	; 156
 3f0:	83 bd       	out	0x23, r24	; 35
	TIMSK=(1<<OCIE2);                                               //enable interrupt on compare
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	89 bf       	out	0x39, r24	; 57
	sei();                                                          //set the global interrupt
 3f6:	78 94       	sei
	GICR |=(1<<INT0)|(1<<INT1);                                     //set the external interrupts
 3f8:	8b b7       	in	r24, 0x3b	; 59
 3fa:	80 6c       	ori	r24, 0xC0	; 192
 3fc:	8b bf       	out	0x3b, r24	; 59
	DDRD=0x00;    
 3fe:	11 ba       	out	0x11, r1	; 17
	DDRA=0xFF;
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xFF;
 404:	87 bb       	out	0x17, r24	; 23
	disp=0;
 406:	18 ba       	out	0x18, r1	; 24
	gnd=0b00111111;
 408:	8f e3       	ldi	r24, 0x3F	; 63
 40a:	8b bb       	out	0x1b, r24	; 27
	
	while(1){
		if (select){
 40c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 410:	88 23       	and	r24, r24
 412:	19 f0       	breq	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			display_time();
 414:	0e 94 31 01 	call	0x262	; 0x262 <display_time>
 418:	f9 cf       	rjmp	.-14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		}
		else{
		update_stwatch();	
 41a:	0e 94 90 00 	call	0x120	; 0x120 <update_stwatch>
 41e:	f6 cf       	rjmp	.-20     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

00000420 <__divmodhi4>:
 420:	97 fb       	bst	r25, 7
 422:	07 2e       	mov	r0, r23
 424:	16 f4       	brtc	.+4      	; 0x42a <__divmodhi4+0xa>
 426:	00 94       	com	r0
 428:	07 d0       	rcall	.+14     	; 0x438 <__divmodhi4_neg1>
 42a:	77 fd       	sbrc	r23, 7
 42c:	09 d0       	rcall	.+18     	; 0x440 <__divmodhi4_neg2>
 42e:	0e 94 24 02 	call	0x448	; 0x448 <__udivmodhi4>
 432:	07 fc       	sbrc	r0, 7
 434:	05 d0       	rcall	.+10     	; 0x440 <__divmodhi4_neg2>
 436:	3e f4       	brtc	.+14     	; 0x446 <__divmodhi4_exit>

00000438 <__divmodhi4_neg1>:
 438:	90 95       	com	r25
 43a:	81 95       	neg	r24
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
 43e:	08 95       	ret

00000440 <__divmodhi4_neg2>:
 440:	70 95       	com	r23
 442:	61 95       	neg	r22
 444:	7f 4f       	sbci	r23, 0xFF	; 255

00000446 <__divmodhi4_exit>:
 446:	08 95       	ret

00000448 <__udivmodhi4>:
 448:	aa 1b       	sub	r26, r26
 44a:	bb 1b       	sub	r27, r27
 44c:	51 e1       	ldi	r21, 0x11	; 17
 44e:	07 c0       	rjmp	.+14     	; 0x45e <__udivmodhi4_ep>

00000450 <__udivmodhi4_loop>:
 450:	aa 1f       	adc	r26, r26
 452:	bb 1f       	adc	r27, r27
 454:	a6 17       	cp	r26, r22
 456:	b7 07       	cpc	r27, r23
 458:	10 f0       	brcs	.+4      	; 0x45e <__udivmodhi4_ep>
 45a:	a6 1b       	sub	r26, r22
 45c:	b7 0b       	sbc	r27, r23

0000045e <__udivmodhi4_ep>:
 45e:	88 1f       	adc	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	5a 95       	dec	r21
 464:	a9 f7       	brne	.-22     	; 0x450 <__udivmodhi4_loop>
 466:	80 95       	com	r24
 468:	90 95       	com	r25
 46a:	bc 01       	movw	r22, r24
 46c:	cd 01       	movw	r24, r26
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
