
diffDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000688  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800060  00800060  000006fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb6  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095e  00000000  00000000  00001806  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a5  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  0000290c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000675  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000651  00000000  00000000  000031bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000380e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3b c0       	rjmp	.+118    	; 0x78 <__ctors_end>
   2:	00 00       	nop
   4:	49 c0       	rjmp	.+146    	; 0x98 <__bad_interrupt>
   6:	00 00       	nop
   8:	47 c0       	rjmp	.+142    	; 0x98 <__bad_interrupt>
   a:	00 00       	nop
   c:	45 c0       	rjmp	.+138    	; 0x98 <__bad_interrupt>
   e:	00 00       	nop
  10:	43 c0       	rjmp	.+134    	; 0x98 <__bad_interrupt>
  12:	00 00       	nop
  14:	41 c0       	rjmp	.+130    	; 0x98 <__bad_interrupt>
  16:	00 00       	nop
  18:	3f c0       	rjmp	.+126    	; 0x98 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3d c0       	rjmp	.+122    	; 0x98 <__bad_interrupt>
  1e:	00 00       	nop
  20:	3b c0       	rjmp	.+118    	; 0x98 <__bad_interrupt>
  22:	00 00       	nop
  24:	39 c0       	rjmp	.+114    	; 0x98 <__bad_interrupt>
  26:	00 00       	nop
  28:	37 c0       	rjmp	.+110    	; 0x98 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	35 c0       	rjmp	.+106    	; 0x98 <__bad_interrupt>
  2e:	00 00       	nop
  30:	33 c0       	rjmp	.+102    	; 0x98 <__bad_interrupt>
  32:	00 00       	nop
  34:	81 c1       	rjmp	.+770    	; 0x338 <__vector_13>
  36:	00 00       	nop
  38:	a8 c1       	rjmp	.+848    	; 0x38a <__vector_14>
  3a:	00 00       	nop
  3c:	2d c0       	rjmp	.+90     	; 0x98 <__bad_interrupt>
  3e:	00 00       	nop
  40:	2b c0       	rjmp	.+86     	; 0x98 <__bad_interrupt>
  42:	00 00       	nop
  44:	29 c0       	rjmp	.+82     	; 0x98 <__bad_interrupt>
  46:	00 00       	nop
  48:	27 c0       	rjmp	.+78     	; 0x98 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	25 c0       	rjmp	.+74     	; 0x98 <__bad_interrupt>
  4e:	00 00       	nop
  50:	23 c0       	rjmp	.+70     	; 0x98 <__bad_interrupt>
  52:	00 00       	nop
  54:	81 00       	.word	0x0081	; ????
  56:	ca 00       	.word	0x00ca	; ????
  58:	ca 00       	.word	0x00ca	; ????
  5a:	ca 00       	.word	0x00ca	; ????
  5c:	74 00       	.word	0x0074	; ????
  5e:	c1 00       	.word	0x00c1	; ????
  60:	ca 00       	.word	0x00ca	; ????
  62:	b7 00       	.word	0x00b7	; ????
  64:	ca 00       	.word	0x00ca	; ????
  66:	ca 00       	.word	0x00ca	; ????
  68:	91 00       	.word	0x0091	; ????
  6a:	ca 00       	.word	0x00ca	; ????
  6c:	ca 00       	.word	0x00ca	; ????
  6e:	ca 00       	.word	0x00ca	; ????
  70:	ca 00       	.word	0x00ca	; ????
  72:	ca 00       	.word	0x00ca	; ????
  74:	9e 00       	.word	0x009e	; ????
  76:	ae 00       	.word	0x00ae	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf e5       	ldi	r28, 0x5F	; 95
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a0 e6       	ldi	r26, 0x60	; 96
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a1 3b       	cpi	r26, 0xB1	; 177
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	ca d0       	rcall	.+404    	; 0x22a <main>
  96:	f6 c2       	rjmp	.+1516   	; 0x684 <_exit>

00000098 <__bad_interrupt>:
  98:	b3 cf       	rjmp	.-154    	; 0x0 <__vectors>

0000009a <_Z7initAllv>:
int Yaw;
int V1,V2;
Motor M1,M2;

void initAll(){
	 M1.Initialise(1);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e6       	ldi	r24, 0x61	; 97
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	3d d1       	rcall	.+634    	; 0x31c <_ZN5Motor10InitialiseEh>
	 M2.Initialise(2);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	80 e6       	ldi	r24, 0x60	; 96
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	39 d1       	rcall	.+626    	; 0x31c <_ZN5Motor10InitialiseEh>

	 robotVelocity = 100;
  aa:	84 e6       	ldi	r24, 0x64	; 100
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
  b2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
	 VelX = 0;
  b6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <VelX+0x1>
  ba:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <VelX>
	 Yaw = 0;
  be:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Yaw+0x1>
  c2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Yaw>

	 uart0_init(UART_BAUD_SELECT(38400,F_CPU));
  c6:	89 e1       	ldi	r24, 0x19	; 25
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	84 d1       	rcall	.+776    	; 0x3d4 <_Z10uart0_initj>
	 sei();
  cc:	78 94       	sei
  ce:	08 95       	ret

000000d0 <_Z23recieveControlCharacterv>:

}

void recieveControlCharacter(){
	char data = uart0_getc();
  d0:	96 d1       	rcall	.+812    	; 0x3fe <_Z10uart0_getcv>
  d2:	99 27       	eor	r25, r25

	switch(data){
  d4:	fc 01       	movw	r30, r24
  d6:	e2 54       	subi	r30, 0x42	; 66
  d8:	f1 09       	sbc	r31, r1
  da:	e2 31       	cpi	r30, 0x12	; 18
  dc:	f1 05       	cpc	r31, r1
  de:	08 f0       	brcs	.+2      	; 0xe2 <_Z23recieveControlCharacterv+0x12>
  e0:	59 c0       	rjmp	.+178    	; 0x194 <_Z23recieveControlCharacterv+0xc4>
  e2:	e6 5d       	subi	r30, 0xD6	; 214
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	c8 c2       	rjmp	.+1424   	; 0x678 <__tablejump2__>
		case 'F':{
			VelX = robotVelocity;
  e8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
  ec:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
  f0:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <VelX+0x1>
  f4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <VelX>
			Yaw = 0;
  f8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Yaw+0x1>
  fc:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Yaw>
			break;
 100:	08 95       	ret
		}

		case 'B':{
			VelX = -robotVelocity;
 102:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 106:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 10a:	91 95       	neg	r25
 10c:	81 95       	neg	r24
 10e:	91 09       	sbc	r25, r1
 110:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <VelX+0x1>
 114:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <VelX>
			Yaw = 0;
 118:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Yaw+0x1>
 11c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Yaw>
			break;
 120:	08 95       	ret
		}
		case 'L':{
			Yaw = robotVelocity;
 122:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 126:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 12a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Yaw+0x1>
 12e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Yaw>
			VelX = 0;
 132:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <VelX+0x1>
 136:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <VelX>
			break;
 13a:	08 95       	ret
		}
		case 'R':{
			 Yaw = -robotVelocity;
 13c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 140:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 144:	91 95       	neg	r25
 146:	81 95       	neg	r24
 148:	91 09       	sbc	r25, r1
 14a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Yaw+0x1>
 14e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Yaw>
			 VelX = 0;
 152:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <VelX+0x1>
 156:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <VelX>
			 break;
 15a:	08 95       	ret
		}
		case 'S':{
			Yaw = 0;
 15c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Yaw+0x1>
 160:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Yaw>
			VelX = 0;
 164:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <VelX+0x1>
 168:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <VelX>
			break;
 16c:	08 95       	ret
		}
		case 'I':{
			 robotVelocity += 10;
 16e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 172:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 176:	0a 96       	adiw	r24, 0x0a	; 10
 178:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 17c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			 
			 break;
 180:	08 95       	ret
		}
		case 'G':{
			 robotVelocity -= 10;
 182:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 186:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 18a:	0a 97       	sbiw	r24, 0x0a	; 10
 18c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 190:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
 194:	08 95       	ret

00000196 <_Z14updateVelocityv>:
	}
  

}

void updateVelocity(){
 196:	cf 92       	push	r12
 198:	df 92       	push	r13
 19a:	ef 92       	push	r14
 19c:	ff 92       	push	r15
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
	
	    V1 = 0.5*(VelX+Yaw);
 1a6:	c0 91 68 00 	lds	r28, 0x0068	; 0x800068 <VelX>
 1aa:	d0 91 69 00 	lds	r29, 0x0069	; 0x800069 <VelX+0x1>
 1ae:	00 91 66 00 	lds	r16, 0x0066	; 0x800066 <Yaw>
 1b2:	10 91 67 00 	lds	r17, 0x0067	; 0x800067 <Yaw+0x1>
 1b6:	be 01       	movw	r22, r28
 1b8:	60 0f       	add	r22, r16
 1ba:	71 1f       	adc	r23, r17
 1bc:	07 2e       	mov	r0, r23
 1be:	00 0c       	add	r0, r0
 1c0:	88 0b       	sbc	r24, r24
 1c2:	99 0b       	sbc	r25, r25
 1c4:	6a d1       	rcall	.+724    	; 0x49a <__floatsisf>
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	5f e3       	ldi	r21, 0x3F	; 63
 1ce:	c9 d1       	rcall	.+914    	; 0x562 <__mulsf3>
 1d0:	31 d1       	rcall	.+610    	; 0x434 <__fixsfsi>
 1d2:	6b 01       	movw	r12, r22
 1d4:	7c 01       	movw	r14, r24
 1d6:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <V1+0x1>
 1da:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <V1>
	    V2 = 0.5*(VelX-Yaw);
 1de:	ce 01       	movw	r24, r28
 1e0:	80 1b       	sub	r24, r16
 1e2:	91 0b       	sbc	r25, r17
 1e4:	bc 01       	movw	r22, r24
 1e6:	99 0f       	add	r25, r25
 1e8:	88 0b       	sbc	r24, r24
 1ea:	99 0b       	sbc	r25, r25
 1ec:	56 d1       	rcall	.+684    	; 0x49a <__floatsisf>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	5f e3       	ldi	r21, 0x3F	; 63
 1f6:	b5 d1       	rcall	.+874    	; 0x562 <__mulsf3>
 1f8:	1d d1       	rcall	.+570    	; 0x434 <__fixsfsi>
 1fa:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <V2+0x1>
 1fe:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <V2>

	    M1.SetOcrValue(V1);
 202:	b6 01       	movw	r22, r12
 204:	81 e6       	ldi	r24, 0x61	; 97
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	61 d0       	rcall	.+194    	; 0x2cc <_ZN5Motor11SetOcrValueEi>
	    M2.SetOcrValue(V2);
 20a:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <V2>
 20e:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <V2+0x1>
 212:	80 e6       	ldi	r24, 0x60	; 96
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	5a d0       	rcall	.+180    	; 0x2cc <_ZN5Motor11SetOcrValueEi>
	
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	df 90       	pop	r13
 226:	cf 90       	pop	r12
 228:	08 95       	ret

0000022a <main>:



int main(void)
{
      initAll();
 22a:	37 df       	rcall	.-402    	; 0x9a <_Z7initAllv>
      

    while (1)
    {

	 recieveControlCharacter();
 22c:	51 df       	rcall	.-350    	; 0xd0 <_Z23recieveControlCharacterv>
	 updateVelocity();
 22e:	b3 df       	rcall	.-154    	; 0x196 <_Z14updateVelocityv>
	
}



int main(void)
 230:	fd cf       	rjmp	.-6      	; 0x22c <main+0x2>

00000232 <_ZN5Motor7InitPWMEv>:

}

void Motor::InitPWM()
{
	if (num==1)
 232:	fc 01       	movw	r30, r24
 234:	80 81       	ld	r24, Z
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	71 f4       	brne	.+28     	; 0x256 <_ZN5Motor7InitPWMEv+0x24>
	{
		OUTPUT(PIN_F1);
 23a:	8f 9a       	sbi	0x11, 7	; 17
		OUTPUT(PIN_B1);
 23c:	8e 9a       	sbi	0x11, 6	; 17

		OUTPUT(PIN_PWM1);
 23e:	8c 9a       	sbi	0x11, 4	; 17

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
 240:	8f b5       	in	r24, 0x2f	; 47
 242:	82 68       	ori	r24, 0x82	; 130
 244:	8f bd       	out	0x2f, r24	; 47
		PWM_TCCRB1	|= (1<<PWM_1WGM2) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
 246:	8e b5       	in	r24, 0x2e	; 46
 248:	8a 61       	ori	r24, 0x1A	; 26
 24a:	8e bd       	out	0x2e, r24	; 46
		PWM_ICR1		 =         ICR_TOP;
 24c:	89 ef       	ldi	r24, 0xF9	; 249
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	97 bd       	out	0x27, r25	; 39
 252:	86 bd       	out	0x26, r24	; 38
 254:	08 95       	ret
	}
	else if(num == 2)
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	69 f4       	brne	.+26     	; 0x274 <_ZN5Motor7InitPWMEv+0x42>
	{
		OUTPUT(PIN_F2);
 25a:	d7 9a       	sbi	0x1a, 7	; 26
		OUTPUT(PIN_B2);
 25c:	d6 9a       	sbi	0x1a, 6	; 26

		OUTPUT(PIN_PWM2);
 25e:	8d 9a       	sbi	0x11, 5	; 17

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
 260:	8f b5       	in	r24, 0x2f	; 47
 262:	82 62       	ori	r24, 0x22	; 34
 264:	8f bd       	out	0x2f, r24	; 47
		PWM_TCCRB2	|=  (1<<PWM_2WGM2) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
 266:	8e b5       	in	r24, 0x2e	; 46
 268:	8a 61       	ori	r24, 0x1A	; 26
 26a:	8e bd       	out	0x2e, r24	; 46
		PWM_ICR2		 =         ICR_TOP;
 26c:	89 ef       	ldi	r24, 0xF9	; 249
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	97 bd       	out	0x27, r25	; 39
 272:	86 bd       	out	0x26, r24	; 38
 274:	08 95       	ret

00000276 <_ZN5Motor19setForwardDirectionEv>:

}

void Motor::setForwardDirection()
{
	switch(num)
 276:	fc 01       	movw	r30, r24
 278:	80 81       	ld	r24, Z
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	19 f0       	breq	.+6      	; 0x284 <_ZN5Motor19setForwardDirectionEv+0xe>
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	21 f0       	breq	.+8      	; 0x28a <_ZN5Motor19setForwardDirectionEv+0x14>
 282:	08 95       	ret
	{
		case 1:
			SET	(PIN_F1);
 284:	97 9a       	sbi	0x12, 7	; 18
			CLEAR	(PIN_B1);
 286:	96 98       	cbi	0x12, 6	; 18
			break;
 288:	08 95       	ret
		case 2:
			SET	(PIN_F2);
 28a:	df 9a       	sbi	0x1b, 7	; 27
			CLEAR	(PIN_B2);
 28c:	de 98       	cbi	0x1b, 6	; 27
 28e:	08 95       	ret

00000290 <_ZN5Motor19setReverseDirectionEv>:


}
void Motor::setReverseDirection()
{
	switch(num)
 290:	fc 01       	movw	r30, r24
 292:	80 81       	ld	r24, Z
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	19 f0       	breq	.+6      	; 0x29e <_ZN5Motor19setReverseDirectionEv+0xe>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	21 f0       	breq	.+8      	; 0x2a4 <_ZN5Motor19setReverseDirectionEv+0x14>
 29c:	08 95       	ret
	{
		case 1:
			CLEAR	(PIN_F1);
 29e:	97 98       	cbi	0x12, 7	; 18
			SET	(PIN_B1);
 2a0:	96 9a       	sbi	0x12, 6	; 18
			break;
 2a2:	08 95       	ret
		case 2:
			CLEAR	(PIN_F2);
 2a4:	df 98       	cbi	0x1b, 7	; 27
			SET	(PIN_B2);
 2a6:	de 9a       	sbi	0x1b, 6	; 27
 2a8:	08 95       	ret

000002aa <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
 2aa:	fc 01       	movw	r30, r24
 2ac:	80 81       	ld	r24, Z
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	19 f0       	breq	.+6      	; 0x2b8 <_ZN5Motor9StopMotorEv+0xe>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	31 f0       	breq	.+12     	; 0x2c2 <_ZN5Motor9StopMotorEv+0x18>
 2b6:	08 95       	ret
	{
		case 1:
			PWM_OCR1 = 0;
 2b8:	1b bc       	out	0x2b, r1	; 43
 2ba:	1a bc       	out	0x2a, r1	; 42
			SET	(PIN_F1);
 2bc:	97 9a       	sbi	0x12, 7	; 18
			SET	(PIN_B1);
 2be:	96 9a       	sbi	0x12, 6	; 18
			break;
 2c0:	08 95       	ret

		case 2:
			PWM_OCR2 = 0;
 2c2:	19 bc       	out	0x29, r1	; 41
 2c4:	18 bc       	out	0x28, r1	; 40
			SET	(PIN_F2);
 2c6:	df 9a       	sbi	0x1b, 7	; 27
			SET	(PIN_B2);
 2c8:	de 9a       	sbi	0x1b, 6	; 27
 2ca:	08 95       	ret

000002cc <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	8c 01       	movw	r16, r24
 2d6:	eb 01       	movw	r28, r22
    if (Ocr > 0)
 2d8:	1c 16       	cp	r1, r28
 2da:	1d 06       	cpc	r1, r29
 2dc:	0c f4       	brge	.+2      	; 0x2e0 <_ZN5Motor11SetOcrValueEi+0x14>
        setForwardDirection();
 2de:	cb df       	rcall	.-106    	; 0x276 <_ZN5Motor19setForwardDirectionEv>

	if( Ocr >= MAX_VALUE){
 2e0:	c9 3f       	cpi	r28, 0xF9	; 249
 2e2:	d1 05       	cpc	r29, r1
 2e4:	44 f4       	brge	.+16     	; 0x2f6 <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
	}

	if( Ocr < 0){
 2e6:	dd 23       	and	r29, r29
 2e8:	44 f4       	brge	.+16     	; 0x2fa <_ZN5Motor11SetOcrValueEi+0x2e>
		Ocr = -Ocr;
 2ea:	d1 95       	neg	r29
 2ec:	c1 95       	neg	r28
 2ee:	d1 09       	sbc	r29, r1
		setReverseDirection();
 2f0:	c8 01       	movw	r24, r16
 2f2:	ce df       	rcall	.-100    	; 0x290 <_ZN5Motor19setReverseDirectionEv>
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <_ZN5Motor11SetOcrValueEi+0x2e>
{
    if (Ocr > 0)
        setForwardDirection();

	if( Ocr >= MAX_VALUE){
		Ocr = MAX_VALUE;
 2f6:	c9 ef       	ldi	r28, 0xF9	; 249
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
	if( Ocr < 0){
		Ocr = -Ocr;
		setReverseDirection();
	}

	switch(num)
 2fa:	f8 01       	movw	r30, r16
 2fc:	80 81       	ld	r24, Z
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	19 f0       	breq	.+6      	; 0x308 <_ZN5Motor11SetOcrValueEi+0x3c>
 302:	82 30       	cpi	r24, 0x02	; 2
 304:	21 f0       	breq	.+8      	; 0x30e <_ZN5Motor11SetOcrValueEi+0x42>
 306:	05 c0       	rjmp	.+10     	; 0x312 <_ZN5Motor11SetOcrValueEi+0x46>
	{
		case 1:
			PWM_OCR1	= Ocr;
 308:	db bd       	out	0x2b, r29	; 43
 30a:	ca bd       	out	0x2a, r28	; 42
			break;
 30c:	02 c0       	rjmp	.+4      	; 0x312 <_ZN5Motor11SetOcrValueEi+0x46>
		case 2:
			PWM_OCR2	= Ocr;
 30e:	d9 bd       	out	0x29, r29	; 41
 310:	c8 bd       	out	0x28, r28	; 40
			break;

	}
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	08 95       	ret

0000031c <_ZN5Motor10InitialiseEh>:
#include "Motor.h"



void Motor::Initialise(uint8_t no)
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	ec 01       	movw	r28, r24
	num = no;
 322:	68 83       	st	Y, r22
	InitPWM();
 324:	86 df       	rcall	.-244    	; 0x232 <_ZN5Motor7InitPWMEv>

	StopMotor();
 326:	ce 01       	movw	r24, r28
 328:	c0 df       	rcall	.-128    	; 0x2aa <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	ce 01       	movw	r24, r28
 330:	cd df       	rcall	.-102    	; 0x2cc <_ZN5Motor11SetOcrValueEi>

}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART0_STATUS;
 34c:	8b b1       	in	r24, 0x0b	; 11
	data = UART0_DATA;
 34e:	2c b1       	in	r18, 0x0c	; 12

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
 350:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
#endif

	/* calculate buffer index */
	tmphead = (UART0_RxHead + 1) & UART_RX_BUFFER_MASK;
 352:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <_ZL12UART0_RxHead>
 356:	ef 5f       	subi	r30, 0xFF	; 255
 358:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART0_RxTail) {
 35a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <_ZL12UART0_RxTail>
 35e:	e9 17       	cp	r30, r25
 360:	39 f0       	breq	.+14     	; 0x370 <__vector_13+0x38>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART0_RxHead = tmphead;
 362:	e0 93 6e 00 	sts	0x006E, r30	; 0x80006e <_ZL12UART0_RxHead>
		/* store received data in buffer */
		UART0_RxBuf[tmphead] = data;
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	ef 58       	subi	r30, 0x8F	; 143
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	20 83       	st	Z, r18
 36e:	01 c0       	rjmp	.+2      	; 0x372 <__vector_13+0x3a>
	/* calculate buffer index */
	tmphead = (UART0_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART0_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
 370:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART0_RxHead = tmphead;
		/* store received data in buffer */
		UART0_RxBuf[tmphead] = data;
	}
	UART0_LastRxError = lastRxError;
 372:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <_ZL17UART0_LastRxError>
}
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART0_TxHead != UART0_TxTail) {
 39c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <_ZL12UART0_TxHead>
 3a0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <_ZL12UART0_TxTail>
 3a4:	98 17       	cp	r25, r24
 3a6:	61 f0       	breq	.+24     	; 0x3c0 <__vector_14+0x36>
		/* calculate and store new buffer index */
		tmptail = (UART0_TxTail + 1) & UART_TX_BUFFER_MASK;
 3a8:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <_ZL12UART0_TxTail>
 3ac:	ef 5f       	subi	r30, 0xFF	; 255
 3ae:	ef 71       	andi	r30, 0x1F	; 31
		UART0_TxTail = tmptail;
 3b0:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <_ZL12UART0_TxTail>
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART0_TxBuf[tmptail];  /* start transmission */
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	ef 56       	subi	r30, 0x6F	; 111
 3b8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ba:	80 81       	ld	r24, Z
 3bc:	8c b9       	out	0x0c, r24	; 12
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <__vector_14+0x38>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
 3c0:	55 98       	cbi	0x0a, 5	; 10
	}
}
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <_Z10uart0_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart0_init(unsigned int baudrate)
{
	sei();
 3d4:	78 94       	sei
	
	UART0_TxHead = 0;
 3d6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <_ZL12UART0_TxHead>
	UART0_TxTail = 0;
 3da:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <_ZL12UART0_TxTail>
	UART0_RxHead = 0;
 3de:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <_ZL12UART0_RxHead>
	UART0_RxTail = 0;
 3e2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <_ZL12UART0_RxTail>
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000)
 3e6:	99 23       	and	r25, r25
 3e8:	1c f4       	brge	.+6      	; 0x3f0 <_Z10uart0_initj+0x1c>
	{
		UART0_STATUS = (1 << U2X);  //Enable 2x speed 
 3ea:	22 e0       	ldi	r18, 0x02	; 2
 3ec:	2b b9       	out	0x0b, r18	; 11
		baudrate &= ~0x8000;
 3ee:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRRH = (unsigned char)(baudrate >> 8);
 3f0:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baudrate;
 3f2:	89 b9       	out	0x09, r24	; 9

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
 3f4:	88 e9       	ldi	r24, 0x98	; 152
 3f6:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | ( 1 << UCSZ1);
 3f8:	86 e8       	ldi	r24, 0x86	; 134
 3fa:	80 bd       	out	0x20, r24	; 32
 3fc:	08 95       	ret

000003fe <_Z10uart0_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART0_RxHead == UART0_RxTail) {
 3fe:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <_ZL12UART0_RxHead>
 402:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <_ZL12UART0_RxTail>
 406:	98 17       	cp	r25, r24
 408:	91 f0       	breq	.+36     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART0_RxTail + 1) & UART_RX_BUFFER_MASK;
 40a:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <_ZL12UART0_RxTail>
 40e:	ef 5f       	subi	r30, 0xFF	; 255
 410:	ef 71       	andi	r30, 0x1F	; 31
	UART0_RxTail = tmptail;
 412:	e0 93 6d 00 	sts	0x006D, r30	; 0x80006d <_ZL12UART0_RxTail>

	/* get data from receive buffer */
	data = UART0_RxBuf[tmptail];
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	ef 58       	subi	r30, 0x8F	; 143
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	20 81       	ld	r18, Z

	return (UART0_LastRxError << 8) + data;
 41e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <_ZL17UART0_LastRxError>
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	98 2f       	mov	r25, r24
 426:	88 27       	eor	r24, r24
 428:	82 0f       	add	r24, r18
 42a:	91 1d       	adc	r25, r1
 42c:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART0_RxHead == UART0_RxTail) {
		return UART_NO_DATA;   /* no data available */
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART0_RxBuf[tmptail];

	return (UART0_LastRxError << 8) + data;

}/* uart_getc */
 432:	08 95       	ret

00000434 <__fixsfsi>:
 434:	04 d0       	rcall	.+8      	; 0x43e <__fixunssfsi>
 436:	68 94       	set
 438:	b1 11       	cpse	r27, r1
 43a:	8d c0       	rjmp	.+282    	; 0x556 <__fp_szero>
 43c:	08 95       	ret

0000043e <__fixunssfsi>:
 43e:	70 d0       	rcall	.+224    	; 0x520 <__fp_splitA>
 440:	88 f0       	brcs	.+34     	; 0x464 <__fixunssfsi+0x26>
 442:	9f 57       	subi	r25, 0x7F	; 127
 444:	90 f0       	brcs	.+36     	; 0x46a <__fixunssfsi+0x2c>
 446:	b9 2f       	mov	r27, r25
 448:	99 27       	eor	r25, r25
 44a:	b7 51       	subi	r27, 0x17	; 23
 44c:	a0 f0       	brcs	.+40     	; 0x476 <__fixunssfsi+0x38>
 44e:	d1 f0       	breq	.+52     	; 0x484 <__fixunssfsi+0x46>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	88 1f       	adc	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	1a f0       	brmi	.+6      	; 0x460 <__fixunssfsi+0x22>
 45a:	ba 95       	dec	r27
 45c:	c9 f7       	brne	.-14     	; 0x450 <__fixunssfsi+0x12>
 45e:	12 c0       	rjmp	.+36     	; 0x484 <__fixunssfsi+0x46>
 460:	b1 30       	cpi	r27, 0x01	; 1
 462:	81 f0       	breq	.+32     	; 0x484 <__fixunssfsi+0x46>
 464:	77 d0       	rcall	.+238    	; 0x554 <__fp_zero>
 466:	b1 e0       	ldi	r27, 0x01	; 1
 468:	08 95       	ret
 46a:	74 c0       	rjmp	.+232    	; 0x554 <__fp_zero>
 46c:	67 2f       	mov	r22, r23
 46e:	78 2f       	mov	r23, r24
 470:	88 27       	eor	r24, r24
 472:	b8 5f       	subi	r27, 0xF8	; 248
 474:	39 f0       	breq	.+14     	; 0x484 <__fixunssfsi+0x46>
 476:	b9 3f       	cpi	r27, 0xF9	; 249
 478:	cc f3       	brlt	.-14     	; 0x46c <__fixunssfsi+0x2e>
 47a:	86 95       	lsr	r24
 47c:	77 95       	ror	r23
 47e:	67 95       	ror	r22
 480:	b3 95       	inc	r27
 482:	d9 f7       	brne	.-10     	; 0x47a <__fixunssfsi+0x3c>
 484:	3e f4       	brtc	.+14     	; 0x494 <__fixunssfsi+0x56>
 486:	90 95       	com	r25
 488:	80 95       	com	r24
 48a:	70 95       	com	r23
 48c:	61 95       	neg	r22
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	08 95       	ret

00000496 <__floatunsisf>:
 496:	e8 94       	clt
 498:	09 c0       	rjmp	.+18     	; 0x4ac <__floatsisf+0x12>

0000049a <__floatsisf>:
 49a:	97 fb       	bst	r25, 7
 49c:	3e f4       	brtc	.+14     	; 0x4ac <__floatsisf+0x12>
 49e:	90 95       	com	r25
 4a0:	80 95       	com	r24
 4a2:	70 95       	com	r23
 4a4:	61 95       	neg	r22
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	8f 4f       	sbci	r24, 0xFF	; 255
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	99 23       	and	r25, r25
 4ae:	a9 f0       	breq	.+42     	; 0x4da <__floatsisf+0x40>
 4b0:	f9 2f       	mov	r31, r25
 4b2:	96 e9       	ldi	r25, 0x96	; 150
 4b4:	bb 27       	eor	r27, r27
 4b6:	93 95       	inc	r25
 4b8:	f6 95       	lsr	r31
 4ba:	87 95       	ror	r24
 4bc:	77 95       	ror	r23
 4be:	67 95       	ror	r22
 4c0:	b7 95       	ror	r27
 4c2:	f1 11       	cpse	r31, r1
 4c4:	f8 cf       	rjmp	.-16     	; 0x4b6 <__floatsisf+0x1c>
 4c6:	fa f4       	brpl	.+62     	; 0x506 <__floatsisf+0x6c>
 4c8:	bb 0f       	add	r27, r27
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <__floatsisf+0x36>
 4cc:	60 ff       	sbrs	r22, 0
 4ce:	1b c0       	rjmp	.+54     	; 0x506 <__floatsisf+0x6c>
 4d0:	6f 5f       	subi	r22, 0xFF	; 255
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	8f 4f       	sbci	r24, 0xFF	; 255
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	16 c0       	rjmp	.+44     	; 0x506 <__floatsisf+0x6c>
 4da:	88 23       	and	r24, r24
 4dc:	11 f0       	breq	.+4      	; 0x4e2 <__floatsisf+0x48>
 4de:	96 e9       	ldi	r25, 0x96	; 150
 4e0:	11 c0       	rjmp	.+34     	; 0x504 <__floatsisf+0x6a>
 4e2:	77 23       	and	r23, r23
 4e4:	21 f0       	breq	.+8      	; 0x4ee <__floatsisf+0x54>
 4e6:	9e e8       	ldi	r25, 0x8E	; 142
 4e8:	87 2f       	mov	r24, r23
 4ea:	76 2f       	mov	r23, r22
 4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <__floatsisf+0x5e>
 4ee:	66 23       	and	r22, r22
 4f0:	71 f0       	breq	.+28     	; 0x50e <__floatsisf+0x74>
 4f2:	96 e8       	ldi	r25, 0x86	; 134
 4f4:	86 2f       	mov	r24, r22
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	2a f0       	brmi	.+10     	; 0x506 <__floatsisf+0x6c>
 4fc:	9a 95       	dec	r25
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	da f7       	brpl	.-10     	; 0x4fc <__floatsisf+0x62>
 506:	88 0f       	add	r24, r24
 508:	96 95       	lsr	r25
 50a:	87 95       	ror	r24
 50c:	97 f9       	bld	r25, 7
 50e:	08 95       	ret

00000510 <__fp_split3>:
 510:	57 fd       	sbrc	r21, 7
 512:	90 58       	subi	r25, 0x80	; 128
 514:	44 0f       	add	r20, r20
 516:	55 1f       	adc	r21, r21
 518:	59 f0       	breq	.+22     	; 0x530 <__fp_splitA+0x10>
 51a:	5f 3f       	cpi	r21, 0xFF	; 255
 51c:	71 f0       	breq	.+28     	; 0x53a <__fp_splitA+0x1a>
 51e:	47 95       	ror	r20

00000520 <__fp_splitA>:
 520:	88 0f       	add	r24, r24
 522:	97 fb       	bst	r25, 7
 524:	99 1f       	adc	r25, r25
 526:	61 f0       	breq	.+24     	; 0x540 <__fp_splitA+0x20>
 528:	9f 3f       	cpi	r25, 0xFF	; 255
 52a:	79 f0       	breq	.+30     	; 0x54a <__fp_splitA+0x2a>
 52c:	87 95       	ror	r24
 52e:	08 95       	ret
 530:	12 16       	cp	r1, r18
 532:	13 06       	cpc	r1, r19
 534:	14 06       	cpc	r1, r20
 536:	55 1f       	adc	r21, r21
 538:	f2 cf       	rjmp	.-28     	; 0x51e <__fp_split3+0xe>
 53a:	46 95       	lsr	r20
 53c:	f1 df       	rcall	.-30     	; 0x520 <__fp_splitA>
 53e:	08 c0       	rjmp	.+16     	; 0x550 <__fp_splitA+0x30>
 540:	16 16       	cp	r1, r22
 542:	17 06       	cpc	r1, r23
 544:	18 06       	cpc	r1, r24
 546:	99 1f       	adc	r25, r25
 548:	f1 cf       	rjmp	.-30     	; 0x52c <__fp_splitA+0xc>
 54a:	86 95       	lsr	r24
 54c:	71 05       	cpc	r23, r1
 54e:	61 05       	cpc	r22, r1
 550:	08 94       	sec
 552:	08 95       	ret

00000554 <__fp_zero>:
 554:	e8 94       	clt

00000556 <__fp_szero>:
 556:	bb 27       	eor	r27, r27
 558:	66 27       	eor	r22, r22
 55a:	77 27       	eor	r23, r23
 55c:	cb 01       	movw	r24, r22
 55e:	97 f9       	bld	r25, 7
 560:	08 95       	ret

00000562 <__mulsf3>:
 562:	0b d0       	rcall	.+22     	; 0x57a <__mulsf3x>
 564:	78 c0       	rjmp	.+240    	; 0x656 <__fp_round>
 566:	69 d0       	rcall	.+210    	; 0x63a <__fp_pscA>
 568:	28 f0       	brcs	.+10     	; 0x574 <__mulsf3+0x12>
 56a:	6e d0       	rcall	.+220    	; 0x648 <__fp_pscB>
 56c:	18 f0       	brcs	.+6      	; 0x574 <__mulsf3+0x12>
 56e:	95 23       	and	r25, r21
 570:	09 f0       	breq	.+2      	; 0x574 <__mulsf3+0x12>
 572:	5a c0       	rjmp	.+180    	; 0x628 <__fp_inf>
 574:	5f c0       	rjmp	.+190    	; 0x634 <__fp_nan>
 576:	11 24       	eor	r1, r1
 578:	ee cf       	rjmp	.-36     	; 0x556 <__fp_szero>

0000057a <__mulsf3x>:
 57a:	ca df       	rcall	.-108    	; 0x510 <__fp_split3>
 57c:	a0 f3       	brcs	.-24     	; 0x566 <__mulsf3+0x4>

0000057e <__mulsf3_pse>:
 57e:	95 9f       	mul	r25, r21
 580:	d1 f3       	breq	.-12     	; 0x576 <__mulsf3+0x14>
 582:	95 0f       	add	r25, r21
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	55 1f       	adc	r21, r21
 588:	62 9f       	mul	r22, r18
 58a:	f0 01       	movw	r30, r0
 58c:	72 9f       	mul	r23, r18
 58e:	bb 27       	eor	r27, r27
 590:	f0 0d       	add	r31, r0
 592:	b1 1d       	adc	r27, r1
 594:	63 9f       	mul	r22, r19
 596:	aa 27       	eor	r26, r26
 598:	f0 0d       	add	r31, r0
 59a:	b1 1d       	adc	r27, r1
 59c:	aa 1f       	adc	r26, r26
 59e:	64 9f       	mul	r22, r20
 5a0:	66 27       	eor	r22, r22
 5a2:	b0 0d       	add	r27, r0
 5a4:	a1 1d       	adc	r26, r1
 5a6:	66 1f       	adc	r22, r22
 5a8:	82 9f       	mul	r24, r18
 5aa:	22 27       	eor	r18, r18
 5ac:	b0 0d       	add	r27, r0
 5ae:	a1 1d       	adc	r26, r1
 5b0:	62 1f       	adc	r22, r18
 5b2:	73 9f       	mul	r23, r19
 5b4:	b0 0d       	add	r27, r0
 5b6:	a1 1d       	adc	r26, r1
 5b8:	62 1f       	adc	r22, r18
 5ba:	83 9f       	mul	r24, r19
 5bc:	a0 0d       	add	r26, r0
 5be:	61 1d       	adc	r22, r1
 5c0:	22 1f       	adc	r18, r18
 5c2:	74 9f       	mul	r23, r20
 5c4:	33 27       	eor	r19, r19
 5c6:	a0 0d       	add	r26, r0
 5c8:	61 1d       	adc	r22, r1
 5ca:	23 1f       	adc	r18, r19
 5cc:	84 9f       	mul	r24, r20
 5ce:	60 0d       	add	r22, r0
 5d0:	21 1d       	adc	r18, r1
 5d2:	82 2f       	mov	r24, r18
 5d4:	76 2f       	mov	r23, r22
 5d6:	6a 2f       	mov	r22, r26
 5d8:	11 24       	eor	r1, r1
 5da:	9f 57       	subi	r25, 0x7F	; 127
 5dc:	50 40       	sbci	r21, 0x00	; 0
 5de:	8a f0       	brmi	.+34     	; 0x602 <__mulsf3_pse+0x84>
 5e0:	e1 f0       	breq	.+56     	; 0x61a <__mulsf3_pse+0x9c>
 5e2:	88 23       	and	r24, r24
 5e4:	4a f0       	brmi	.+18     	; 0x5f8 <__mulsf3_pse+0x7a>
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	bb 1f       	adc	r27, r27
 5ec:	66 1f       	adc	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	91 50       	subi	r25, 0x01	; 1
 5f4:	50 40       	sbci	r21, 0x00	; 0
 5f6:	a9 f7       	brne	.-22     	; 0x5e2 <__mulsf3_pse+0x64>
 5f8:	9e 3f       	cpi	r25, 0xFE	; 254
 5fa:	51 05       	cpc	r21, r1
 5fc:	70 f0       	brcs	.+28     	; 0x61a <__mulsf3_pse+0x9c>
 5fe:	14 c0       	rjmp	.+40     	; 0x628 <__fp_inf>
 600:	aa cf       	rjmp	.-172    	; 0x556 <__fp_szero>
 602:	5f 3f       	cpi	r21, 0xFF	; 255
 604:	ec f3       	brlt	.-6      	; 0x600 <__mulsf3_pse+0x82>
 606:	98 3e       	cpi	r25, 0xE8	; 232
 608:	dc f3       	brlt	.-10     	; 0x600 <__mulsf3_pse+0x82>
 60a:	86 95       	lsr	r24
 60c:	77 95       	ror	r23
 60e:	67 95       	ror	r22
 610:	b7 95       	ror	r27
 612:	f7 95       	ror	r31
 614:	e7 95       	ror	r30
 616:	9f 5f       	subi	r25, 0xFF	; 255
 618:	c1 f7       	brne	.-16     	; 0x60a <__mulsf3_pse+0x8c>
 61a:	fe 2b       	or	r31, r30
 61c:	88 0f       	add	r24, r24
 61e:	91 1d       	adc	r25, r1
 620:	96 95       	lsr	r25
 622:	87 95       	ror	r24
 624:	97 f9       	bld	r25, 7
 626:	08 95       	ret

00000628 <__fp_inf>:
 628:	97 f9       	bld	r25, 7
 62a:	9f 67       	ori	r25, 0x7F	; 127
 62c:	80 e8       	ldi	r24, 0x80	; 128
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	08 95       	ret

00000634 <__fp_nan>:
 634:	9f ef       	ldi	r25, 0xFF	; 255
 636:	80 ec       	ldi	r24, 0xC0	; 192
 638:	08 95       	ret

0000063a <__fp_pscA>:
 63a:	00 24       	eor	r0, r0
 63c:	0a 94       	dec	r0
 63e:	16 16       	cp	r1, r22
 640:	17 06       	cpc	r1, r23
 642:	18 06       	cpc	r1, r24
 644:	09 06       	cpc	r0, r25
 646:	08 95       	ret

00000648 <__fp_pscB>:
 648:	00 24       	eor	r0, r0
 64a:	0a 94       	dec	r0
 64c:	12 16       	cp	r1, r18
 64e:	13 06       	cpc	r1, r19
 650:	14 06       	cpc	r1, r20
 652:	05 06       	cpc	r0, r21
 654:	08 95       	ret

00000656 <__fp_round>:
 656:	09 2e       	mov	r0, r25
 658:	03 94       	inc	r0
 65a:	00 0c       	add	r0, r0
 65c:	11 f4       	brne	.+4      	; 0x662 <__fp_round+0xc>
 65e:	88 23       	and	r24, r24
 660:	52 f0       	brmi	.+20     	; 0x676 <__fp_round+0x20>
 662:	bb 0f       	add	r27, r27
 664:	40 f4       	brcc	.+16     	; 0x676 <__fp_round+0x20>
 666:	bf 2b       	or	r27, r31
 668:	11 f4       	brne	.+4      	; 0x66e <__fp_round+0x18>
 66a:	60 ff       	sbrs	r22, 0
 66c:	04 c0       	rjmp	.+8      	; 0x676 <__fp_round+0x20>
 66e:	6f 5f       	subi	r22, 0xFF	; 255
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	08 95       	ret

00000678 <__tablejump2__>:
 678:	ee 0f       	add	r30, r30
 67a:	ff 1f       	adc	r31, r31
 67c:	05 90       	lpm	r0, Z+
 67e:	f4 91       	lpm	r31, Z
 680:	e0 2d       	mov	r30, r0
 682:	09 94       	ijmp

00000684 <_exit>:
 684:	f8 94       	cli

00000686 <__stop_program>:
 686:	ff cf       	rjmp	.-2      	; 0x686 <__stop_program>
