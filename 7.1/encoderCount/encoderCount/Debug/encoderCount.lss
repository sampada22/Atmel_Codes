
encoderCount.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000310  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000310  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  00800064  00800064  000003a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae4  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ec  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c3  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00001c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ff  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000455  00000000  00000000  000022b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000270c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_13>
  38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3a       	cpi	r26, 0xAD	; 173
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 86 01 	jmp	0x30c	; 0x30c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
	 
	DDRD   = (0<<PIND2)|(0<<PIND3)|(1<<PIND7);
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	81 bb       	out	0x11, r24	; 17
	
	
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
  96:	87 e6       	ldi	r24, 0x67	; 103
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z9uart_initj>

	// Timer Clock = 1/1024 of sys clock and CTC mode
	TCCR1B|=((1<<WGM12)|(1<<CS12)|(1<<CS10));
  9e:	8e b5       	in	r24, 0x2e	; 46
  a0:	8d 60       	ori	r24, 0x0D	; 13
  a2:	8e bd       	out	0x2e, r24	; 46
	
	// Initialize INT0
	MCUCR |= (1<<ISC00)|(1<<ISC01);  
  a4:	85 b7       	in	r24, 0x35	; 53
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	85 bf       	out	0x35, r24	; 53
	GICR  |= (1<<INT0);               // Enable INT0 interrupt
  aa:	8b b7       	in	r24, 0x3b	; 59
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	8b bf       	out	0x3b, r24	; 59
	sei();
  b0:	78 94       	sei
	
	while(1)
	{
		uart_putint (count);
  b2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  b6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
  ba:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end+0x2>
  be:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x3>
  c2:	0e 94 27 01 	call	0x24e	; 0x24e <_Z11uart_putinti>
		uart_puts("\n \r");
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 18 01 	call	0x230	; 0x230 <_Z9uart_putsPKc>

char a;
volatile  long signed count=0; // Pulse counter


int main(void)
  ce:	f1 cf       	rjmp	.-30     	; 0xb2 <main+0x20>

000000d0 <__vector_1>:
		uart_putint (count);
		uart_puts("\n \r");
	}
}

ISR(INT0_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
	
       if (!bit_is_set(PIND,3))
  e2:	83 99       	sbic	0x10, 3	; 16
  e4:	14 c0       	rjmp	.+40     	; 0x10e <__vector_1+0x3e>
       {
	count-- ;
  e6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  ea:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
  ee:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end+0x2>
  f2:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x3>
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	a1 09       	sbc	r26, r1
  fa:	b1 09       	sbc	r27, r1
  fc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 100:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 104:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <__data_end+0x2>
 108:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <__data_end+0x3>
 10c:	15 c0       	rjmp	.+42     	; 0x138 <__vector_1+0x68>
       }
       else if (bit_is_set(PIND,3))
 10e:	83 9b       	sbis	0x10, 3	; 16
 110:	13 c0       	rjmp	.+38     	; 0x138 <__vector_1+0x68>
       {
	count++ ;
 112:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 116:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 11a:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end+0x2>
 11e:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x3>
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	a1 1d       	adc	r26, r1
 126:	b1 1d       	adc	r27, r1
 128:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 12c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 130:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <__data_end+0x2>
 134:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <__data_end+0x3>
       }
	
}
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_13>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	2c b1       	in	r18, 0x0c	; 12
 162:	88 71       	andi	r24, 0x18	; 24
 164:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <_ZL11UART_RxHead>
 168:	ef 5f       	subi	r30, 0xFF	; 255
 16a:	ef 71       	andi	r30, 0x1F	; 31
 16c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <_ZL11UART_RxTail>
 170:	e9 17       	cp	r30, r25
 172:	39 f0       	breq	.+14     	; 0x182 <__vector_13+0x38>
 174:	e0 93 6a 00 	sts	0x006A, r30	; 0x80006a <_ZL11UART_RxHead>
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	e3 59       	subi	r30, 0x93	; 147
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	20 83       	st	Z, r18
 180:	01 c0       	rjmp	.+2      	; 0x184 <__vector_13+0x3a>
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <_ZL16UART_LastRxError>
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_14>:
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
 1ae:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <_ZL11UART_TxHead>
 1b2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <_ZL11UART_TxTail>
 1b6:	98 17       	cp	r25, r24
 1b8:	61 f0       	breq	.+24     	; 0x1d2 <__vector_14+0x36>
 1ba:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <_ZL11UART_TxTail>
 1be:	ef 5f       	subi	r30, 0xFF	; 255
 1c0:	ef 71       	andi	r30, 0x1F	; 31
 1c2:	e0 93 6b 00 	sts	0x006B, r30	; 0x80006b <_ZL11UART_TxTail>
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	e3 57       	subi	r30, 0x73	; 115
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	80 81       	ld	r24, Z
 1ce:	8c b9       	out	0x0c, r24	; 12
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <__vector_14+0x38>
 1d2:	55 98       	cbi	0x0a, 5	; 10
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <_Z9uart_initj>:
 1e6:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <_ZL11UART_TxHead>
 1ea:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <_ZL11UART_TxTail>
 1ee:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <_ZL11UART_RxHead>
 1f2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <_ZL11UART_RxTail>
 1f6:	99 23       	and	r25, r25
 1f8:	1c f4       	brge	.+6      	; 0x200 <_Z9uart_initj+0x1a>
 1fa:	22 e0       	ldi	r18, 0x02	; 2
 1fc:	2b b9       	out	0x0b, r18	; 11
 1fe:	9f 77       	andi	r25, 0x7F	; 127
 200:	90 bd       	out	0x20, r25	; 32
 202:	89 b9       	out	0x09, r24	; 9
 204:	88 e9       	ldi	r24, 0x98	; 152
 206:	8a b9       	out	0x0a, r24	; 10
 208:	86 e8       	ldi	r24, 0x86	; 134
 20a:	80 bd       	out	0x20, r24	; 32
 20c:	08 95       	ret

0000020e <_Z9uart_putch>:
 20e:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <_ZL11UART_TxHead>
 212:	2f 5f       	subi	r18, 0xFF	; 255
 214:	2f 71       	andi	r18, 0x1F	; 31
 216:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <_ZL11UART_TxTail>
 21a:	29 17       	cp	r18, r25
 21c:	e1 f3       	breq	.-8      	; 0x216 <_Z9uart_putch+0x8>
 21e:	e2 2f       	mov	r30, r18
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	e3 57       	subi	r30, 0x73	; 115
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	80 83       	st	Z, r24
 228:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <_ZL11UART_TxHead>
 22c:	55 9a       	sbi	0x0a, 5	; 10
 22e:	08 95       	ret

00000230 <_Z9uart_putsPKc>:
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
 236:	88 81       	ld	r24, Y
 238:	88 23       	and	r24, r24
 23a:	31 f0       	breq	.+12     	; 0x248 <_Z9uart_putsPKc+0x18>
 23c:	21 96       	adiw	r28, 0x01	; 1
 23e:	0e 94 07 01 	call	0x20e	; 0x20e <_Z9uart_putch>
 242:	89 91       	ld	r24, Y+
 244:	81 11       	cpse	r24, r1
 246:	fb cf       	rjmp	.-10     	; 0x23e <_Z9uart_putsPKc+0xe>
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <_Z11uart_putinti>:
 Purpose:  transmit integer to UART0
 Input:    integer to be transmitted
 Returns:  none
 **************************************************************************/
void uart_putint(int input)
{
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	2f 97       	sbiw	r28, 0x0f	; 15
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 266:	4a e0       	ldi	r20, 0x0A	; 10
 268:	be 01       	movw	r22, r28
 26a:	6f 5f       	subi	r22, 0xFF	; 255
 26c:	7f 4f       	sbci	r23, 0xFF	; 255
 26e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <__itoa_ncheck>
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	88 23       	and	r24, r24
 276:	51 f0       	breq	.+20     	; 0x28c <_Z11uart_putinti+0x3e>
 278:	8e 01       	movw	r16, r28
 27a:	0e 5f       	subi	r16, 0xFE	; 254
 27c:	1f 4f       	sbci	r17, 0xFF	; 255
	uart_putc(*s++);
 27e:	0e 94 07 01 	call	0x20e	; 0x20e <_Z9uart_putch>
void uart_putint(int input)
{
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 282:	f8 01       	movw	r30, r16
 284:	81 91       	ld	r24, Z+
 286:	8f 01       	movw	r16, r30
 288:	81 11       	cpse	r24, r1
 28a:	f9 cf       	rjmp	.-14     	; 0x27e <_Z11uart_putinti+0x30>
	uart_putc(*s++);

	}
 28c:	2f 96       	adiw	r28, 0x0f	; 15
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	08 95       	ret

000002a2 <__itoa_ncheck>:
 2a2:	bb 27       	eor	r27, r27
 2a4:	4a 30       	cpi	r20, 0x0A	; 10
 2a6:	31 f4       	brne	.+12     	; 0x2b4 <__itoa_ncheck+0x12>
 2a8:	99 23       	and	r25, r25
 2aa:	22 f4       	brpl	.+8      	; 0x2b4 <__itoa_ncheck+0x12>
 2ac:	bd e2       	ldi	r27, 0x2D	; 45
 2ae:	90 95       	com	r25
 2b0:	81 95       	neg	r24
 2b2:	9f 4f       	sbci	r25, 0xFF	; 255
 2b4:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__utoa_common>

000002b8 <__utoa_ncheck>:
 2b8:	bb 27       	eor	r27, r27

000002ba <__utoa_common>:
 2ba:	fb 01       	movw	r30, r22
 2bc:	55 27       	eor	r21, r21
 2be:	aa 27       	eor	r26, r26
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	aa 1f       	adc	r26, r26
 2c6:	a4 17       	cp	r26, r20
 2c8:	10 f0       	brcs	.+4      	; 0x2ce <__utoa_common+0x14>
 2ca:	a4 1b       	sub	r26, r20
 2cc:	83 95       	inc	r24
 2ce:	50 51       	subi	r21, 0x10	; 16
 2d0:	b9 f7       	brne	.-18     	; 0x2c0 <__utoa_common+0x6>
 2d2:	a0 5d       	subi	r26, 0xD0	; 208
 2d4:	aa 33       	cpi	r26, 0x3A	; 58
 2d6:	08 f0       	brcs	.+2      	; 0x2da <__utoa_common+0x20>
 2d8:	a9 5d       	subi	r26, 0xD9	; 217
 2da:	a1 93       	st	Z+, r26
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	79 f7       	brne	.-34     	; 0x2be <__utoa_common+0x4>
 2e0:	b1 11       	cpse	r27, r1
 2e2:	b1 93       	st	Z+, r27
 2e4:	11 92       	st	Z+, r1
 2e6:	cb 01       	movw	r24, r22
 2e8:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <strrev>

000002ec <strrev>:
 2ec:	dc 01       	movw	r26, r24
 2ee:	fc 01       	movw	r30, r24
 2f0:	67 2f       	mov	r22, r23
 2f2:	71 91       	ld	r23, Z+
 2f4:	77 23       	and	r23, r23
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <strrev+0x4>
 2f8:	32 97       	sbiw	r30, 0x02	; 2
 2fa:	04 c0       	rjmp	.+8      	; 0x304 <strrev+0x18>
 2fc:	7c 91       	ld	r23, X
 2fe:	6d 93       	st	X+, r22
 300:	70 83       	st	Z, r23
 302:	62 91       	ld	r22, -Z
 304:	ae 17       	cp	r26, r30
 306:	bf 07       	cpc	r27, r31
 308:	c8 f3       	brcs	.-14     	; 0x2fc <strrev+0x10>
 30a:	08 95       	ret

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
